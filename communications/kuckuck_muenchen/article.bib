
@incollection{dijkstra_chapter_1972,
	title = {Chapter {I}: {Notes} on structured programming},
	isbn = {0-12-200550-3},
	booktitle = {Structured programming},
	publisher = {Academic Press Ltd.},
	author = {Dijkstra, Edsger W.},
	year = {1972},
	pages = {1--82},
}

@book{manovich_language_2001,
	address = {Cambridge, MA},
	title = {The language of new media},
	isbn = {0-262-13374-1 978-0-262-13374-6 0-262-63255-1 978-0-262-63255-3},
	abstract = {In dit boek worden delen van filmtheorie, kunsthistorie, literatuurwetenschap en informatica in verband gebracht met de ontwikkeling van nieuwe media.},
	language = {English},
	publisher = {MIT Press},
	author = {Manovich, Lev.},
	year = {2001},
}

@incollection{dijkstra_craftsman_1982,
	address = {New York, NY},
	series = {Texts and {Monographs} in {Computer} {Science}},
	title = {“{Craftsman} or {Scientist}?”},
	isbn = {978-1-4612-5695-3},
	shorttitle = {“{Craftsman} or {Scientist}?},
	url = {https://doi.org/10.1007/978-1-4612-5695-3_19},
	abstract = {My somewhat elliptic title refers, of course, to the programmer; so much you may have guessed. What, in all probability, you could not have guessed is that I have chosen to use the words “craftsman” and “scientist” in a very specific meaning: they have been chosen to characterize the results of two extreme techniques of education, and this luncheon speech will be devoted to a (be it short) discussion of their role in the education of programmers, in the teaching of programming. For the transmission of knowledge and skills both techniques have been used side by side since many centuries.},
	language = {en},
	urldate = {2021-01-26},
	booktitle = {Selected {Writings} on {Computing}: {A} personal {Perspective}},
	publisher = {Springer},
	author = {Dijkstra, Edsger W.},
	editor = {Dijkstra, Edsger W.},
	year = {1982},
	doi = {10.1007/978-1-4612-5695-3_19},
	pages = {104--109},
}

@book{jordan_copying_2003,
	title = {Copying the {Master} and {Stealing} {His} {Secrets}: {Talent} and {Training} in {Japanese} {Painting}},
	isbn = {978-0-8248-2608-6},
	shorttitle = {Copying the {Master} and {Stealing} {His} {Secrets}},
	abstract = {Copying the Master examines the transmission of painting traditions in Japan from one generation to the next. The contributors emphasize the relationship between inborn abilities and those skills taught in the course of learning how to paint. They focus their discussion on a group of painting masters loosely associated with the prestigious Kano painting atelier, Japan\&\#39;s de facto painting academy throughout the Tokugawa period (1615-1868) and into the early modern era. By delving into why, how, and what these painters transmitted to students through their teaching, readers gain insight into artistic and aesthetic sensibilities active in Japanese painting and a fuller appreciation of extant paintings within their cultural and historical contexts.},
	language = {en},
	publisher = {University of Hawaii Press},
	author = {Jordan, Brenda G. and Weston, Victoria Louise},
	month = jan,
	year = {2003},
	note = {Google-Books-ID: TMCHpmDXUeIC},
	keywords = {Art / Asian / General, Art / Asian / Japanese, Art / Techniques / Painting},
}

@article{davies_models_1993,
	title = {Models and theories of programming strategy},
	volume = {39},
	issn = {0020-7373},
	url = {http://www.sciencedirect.com/science/article/pii/S0020737383710618},
	doi = {10.1006/imms.1993.1061},
	abstract = {Much of the literature concerned with understanding the nature of programming skill has focused explicitly upon the declarative aspects of programmers' knowledge. This literature has sought to describe the nature of stereotypical programming knowledge structures and their organization. However, one major limitation of many of these knowledge-based theories is that they often fail to consider the way in which knowledge is used or applied. Another strand of literature is less well represented. This literature deals with the strategic elements of programming skill and is directed towards an analysis of the strategies commonly employed by programmers in the generation and the comprehension of programs. In this paper an attempt is made to unify various analyses of programming strategy. This paper presents a review of the literature in this area, highlighting common themes and concerns, and proposes a model of strategy development which attempts to encompass the central findings of previous research in this area. It is suggested that many studies of programming strategy are descriptive and fail to explain why strategies take the form they do or to explain the typical strategy shifts which are observed during the transitions between different levels of skill. This paper suggests that what is needed is an explanation of programming skill that integrates ideas about knowledge representation with a strategic model, enabling one to make predictions about how changes in knowledge representation might give rise to particular strategies and to the strategy changes associated with developing expertise. This paper concludes by making a number of brief suggestions about the possible nature of this model and its implications for theories of programming expertise.},
	language = {en},
	number = {2},
	urldate = {2021-01-27},
	journal = {International Journal of Man-Machine Studies},
	author = {Davies, Simon P.},
	month = aug,
	year = {1993},
	pages = {237--267},
	file = {ScienceDirect Snapshot:/home/pierre/Zotero/storage/LMTR823B/S0020737383710618.html:text/html},
}

@inproceedings{treude_understanding_2017,
	title = {Understanding {Stack} {Overflow} {Code} {Fragments}},
	doi = {10.1109/ICSME.2017.24},
	abstract = {Code fragments posted in answers on Q\&A forums can form an important source of developer knowledge. However, effective reuse of code fragments found online often requires information other than the code fragment alone. We report on the results of a survey-based study to investigate to what extent developers perceive Stack Overflow code fragments to be self-explanatory. As part of the study, we also investigated the types of information missing from fragments that were not self-explanatory. We find that less than half of the Stack Overflow code fragments in our sample are considered to be self-explanatory by the 321 participants who answered our survey, and that the main issues that negatively affect code fragment understandability include incomplete fragments, code quality, missing rationale, code organization, clutter, naming issues, and missing domain information. This study is a step towards understanding developers' information needs as they relate to code fragments, and how these needs can be addressed.},
	booktitle = {2017 {IEEE} {International} {Conference} on {Software} {Maintenance} and {Evolution} ({ICSME})},
	author = {Treude, C. and Robillard, M. P.},
	month = sep,
	year = {2017},
	keywords = {Clutter, code fragments, code organization, code quality, code reuse, Data collection, developer knowledge, information needs, Java, Organizations, program compilers, Programming, Software, software engineering, Stack Overflow, stack overflow code fragment reuse},
	pages = {509--513},
	file = {IEEE Xplore Abstract Record:/home/pierre/Zotero/storage/6S5WNFVE/8094452.html:text/html},
}

@book{senseney_art_2011,
	title = {The {Art} of {Building} in the {Classical} {World}: {Vision}, {Craftsmanship}, and {Linear} {Perspective} in {Greek} and {Roman} {Architecture}},
	isbn = {978-1-139-49726-8},
	shorttitle = {The {Art} of {Building} in the {Classical} {World}},
	abstract = {This book examines the application of drawing in the design process of classical architecture, exploring how the tools and techniques of drawing developed for architecture subsequently shaped theories of vision and representations of the universe in science and philosophy. Building on recent scholarship that examines and reconstructs the design process of classical architecture, John R. Senseney focuses on technical drawing in the building trade as a model for the expression of visual order, showing that the techniques of ancient Greek drawing actively determined concepts about the world. He argues that the uniquely Greek innovations of graphic construction determined principles that shaped the massing, special qualities and refinements of buildings and the manner in which order itself was envisioned.},
	language = {en},
	publisher = {Cambridge University Press},
	author = {Senseney, John R.},
	month = mar,
	year = {2011},
	note = {Google-Books-ID: FcqkVF\_QCoQC},
	keywords = {Architecture / History / General, Art / History / Ancient \& Classical, History / Ancient / General, Social Science / Archaeology},
}

@article{taylor_patterns_2001,
	title = {Patterns as {Software} {Design} {Canon}},
	url = {https://aisel.aisnet.org/acis2001/65},
	journal = {ACIS 2001 Proceedings},
	author = {Taylor, Paul},
	month = jan,
	year = {2001},
	file = {"Patterns as Software Design Canon" by Paul R. Taylor:/home/pierre/Zotero/storage/EA2JQ2NR/65.html:text/html},
}

@article{ford_what_2015,
	title = {What {Is} {Code}? {If} {You} {Don}'t {Know}, {You} {Need} to {Read} {This}},
	shorttitle = {What {Is} {Code}?},
	url = {http://www.bloomberg.com/graphics/2015-paul-ford-what-is-code/},
	abstract = {The world belongs to people who code. Those who don’t understand will be left behind.},
	language = {en},
	urldate = {2021-01-28},
	journal = {Bloomberg.com},
	author = {Ford, Paul},
	year = {2015},
	keywords = {Bloomberg Graphics, BusinessWeek, code},
}

@article{wilson_hour_2015,
	title = {Hour of code---a record year for computer science},
	volume = {6},
	issn = {2153-2184},
	url = {https://doi.org/10.1145/2723168},
	doi = {10.1145/2723168},
	number = {1},
	urldate = {2021-01-28},
	journal = {ACM Inroads},
	author = {Wilson, Cameron},
	month = feb,
	year = {2015},
	pages = {22},
}

@article{chun_software_2005,
	title = {On {Software}, or the {Persistence} of {Visual} {Knowledge}},
	volume = {18},
	issn = {1526-3819},
	url = {https://www.mitpressjournals.org/doi/10.1162/1526381043320741},
	doi = {10.1162/1526381043320741},
	urldate = {2021-01-28},
	journal = {Grey Room},
	author = {Chun, Wendy Hui Kyong},
	month = jan,
	year = {2005},
	note = {Publisher: MIT Press},
	pages = {26--51},
	file = {Submitted Version:/home/pierre/Zotero/storage/PGHQQ849/Chun - 2005 - On Software, or the Persistence of Visual Knowledg.pdf:application/pdf},
}

@book{berry_philosophy_2011,
	title = {The {Philosophy} of {Software}: {Code} and {Mediation} in the {Digital} {Age}},
	shorttitle = {The {Philosophy} of {Software}},
	publisher = {Palgrave-Macmillan},
	author = {Berry, David M.},
	year = {2011},
}

@book{hayles_my_2010,
	title = {My {Mother} {Was} a {Computer}: {Digital} {Subjects} and {Literary} {Texts}},
	isbn = {978-0-226-32149-3},
	shorttitle = {My {Mother} {Was} a {Computer}},
	abstract = {We live in a world, according to N. Katherine Hayles, where new languages are constantly emerging, proliferating, and fading into obsolescence. These are languages of our own making: the programming languages written in code for the intelligent machines we call computers. Hayles's latest exploration provides an exciting new way of understanding the relations between code and language and considers how their interactions have affected creative, technological, and artistic practices.  My Mother Was a Computer explores how the impact of code on everyday life has become comparable to that of speech and writing: language and code have grown more entangled, the lines that once separated humans from machines, analog from digital, and old technologies from new ones have become blurred. My Mother Was a Computer gives us the tools necessary to make sense of these complex relationships. Hayles argues that we live in an age of intermediation that challenges our ideas about language, subjectivity, literary objects, and textuality. This process of intermediation takes place where digital media interact with cultural practices associated with older media, and here Hayles sharply portrays such interactions: how code differs from speech; how electronic text differs from print; the effects of digital media on the idea of the self; the effects of digitality on printed books; our conceptions of computers as living beings; the possibility that human consciousness itself might be computational; and the subjective cosmology wherein humans see the universe through the lens of their own digital age.  We are the children of computers in more than one sense, and no critic has done more than N. Katherine Hayles to explain how these technologies define us and our culture. Heady and provocative, My Mother Was a Computer will be judged as her best work yet.},
	language = {en},
	publisher = {University of Chicago Press},
	author = {Hayles, N. Katherine},
	month = mar,
	year = {2010},
	note = {Google-Books-ID: lwaRyOZfBzgC},
	keywords = {Computers / Cybernetics, Literary Criticism / American / General, Literary Criticism / General},
}

@misc{hayes_cultures_2017,
	title = {Cultures of {Code}},
	url = {https://www.americanscientist.org/article/cultures-of-code},
	abstract = {Three communities in the world of computation are bound together by common interests but set apart by distinctly different aims and agendas.},
	language = {en},
	urldate = {2021-01-28},
	journal = {American Scientist},
	author = {Hayes, Brian},
	month = feb,
	year = {2017},
	file = {Snapshot:/home/pierre/Zotero/storage/FDJDLE6A/cultures-of-code.html:text/html},
}

@incollection{man_influence_2015,
	address = {Berlin, Heidelberg},
	series = {Chinese {Contemporary} {Art} {Series}},
	title = {Influence of {Global} {Aesthetics} on {Chinese} {Aesthetics}: {The} {Adaptation} of {Moxie} and the {Case} of {Dafen} {Cun}},
	isbn = {978-3-662-46510-3},
	shorttitle = {Influence of {Global} {Aesthetics} on {Chinese} {Aesthetics}},
	url = {https://doi.org/10.1007/978-3-662-46510-3_13},
	abstract = {This chapter begins to examine the practice of moxie or imitation in art in Chinese aesthetics, compares it with the Platonic notion of mimesis, and explicates its original meaning. It then traces its development from the tradition to the late Qing export paintings in which traditional Chinese aesthetics is combined with Western perspectives to meet the Western interests.},
	language = {en},
	urldate = {2021-01-28},
	booktitle = {Issues of {Contemporary} {Art} and {Aesthetics} in {Chinese} {Context}},
	publisher = {Springer},
	author = {Man, Eva Kit Wah},
	editor = {Man, Eva Kit Wah},
	year = {2015},
	doi = {10.1007/978-3-662-46510-3_13},
	keywords = {Aesthetic Experience, Chinese Painter, Tang Dynasty, Western Perspective, World Expo},
	pages = {95--103},
	file = {Submitted Version:/home/pierre/Zotero/storage/8T2CHYV6/Man - 2015 - Influence of Global Aesthetics on Chinese Aestheti.pdf:application/pdf},
}

@article{oman_computer_2018,
	title = {Computer {Software} as {Copyrightable} {Subject} {Matter}: {Oracle} {V}. {Google}, {Legislative} {Intent}, and the {Scope} of {Rights} in {Digital} {Works}},
	volume = {31},
	shorttitle = {Computer {Software} as {Copyrightable} {Subject} {Matter}},
	url = {/paper/Computer-Software-as-Copyrightable-Subject-Matter%3A-Oman/3b3011119efe6e938e0ad1cb420a0efacf221766},
	abstract = {Semantic Scholar extracted view of \&quot;Computer Software as Copyrightable Subject Matter: Oracle V. Google, Legislative Intent, and the Scope of Rights in Digital Works\&quot; by Ralph Oman},
	language = {en},
	number = {Special Issue Spring 2018},
	urldate = {2021-01-28},
	journal = {Harvard Journal of Law and Technology},
	author = {Oman, Ralph},
	year = {2018},
	pages = {639--652},
	file = {Snapshot:/home/pierre/Zotero/storage/EVKDFSDW/3b3011119efe6e938e0ad1cb420a0efacf221766.html:text/html},
}

@book{sennett_craftsman_2009,
	address = {New Haven, CT},
	title = {The {Craftsman}},
	volume = {1},
	isbn = {978-0-300-15119-0},
	url = {https://yalebooks.yale.edu/book/9780300151190/craftsman},
	urldate = {2021-01-28},
	publisher = {Yale University Press},
	author = {Sennett, Richard},
	year = {2009},
	file = {Craftsman | Yale University Press:/home/pierre/Zotero/storage/U3NMMREE/craftsman.html:text/html},
}

@book{chandra_geek_2014,
	title = {Geek {Sublime}: {The} {Beauty} of {Code}, the {Code} of {Beauty}},
	isbn = {978-1-55597-326-1},
	shorttitle = {Geek {Sublime}},
	abstract = {The nonfiction debut from the author of the international bestseller Sacred Games about the surprising overlap between writing and computer codingVikram Chandra has been a computer programmer for almost as long as he has been a novelist. In this extraordinary new book, his first work of nonfiction, he searches for the connections between the worlds of art and technology. Coders are obsessed with elegance and style, just as writers are, but do the words mean the same thing to both? Can we ascribe beauty to the craft of writing code? Exploring such varied topics as logic gates and literary modernism, the machismo of tech geeks, the omnipresence of an "Indian Mafia" in Silicon Valley, and the writings of the eleventh-century Kashmiri thinker Abhinavagupta, Geek Sublime is both an idiosyncratic history of coding and a fascinating meditation on the writer's art. Part literary essay, part technology story, and part memoir, it is an engrossing, original, and heady book of sweeping ideas.},
	language = {en},
	publisher = {Graywolf Press},
	author = {Chandra, Vikram},
	month = sep,
	year = {2014},
	keywords = {Biography \& Autobiography / Literary Figures, Computers / History, Literary Collections / Essays, Literary Criticism / General},
}

@book{certeau_invention_1990,
	title = {L'invention du quotidien},
	isbn = {978-2-07-032576-4},
	abstract = {La Raison technicienne croit savoir comment organiser au mieux les choses et les gens, assignant à chacun une place, un rôle, des produits à consommer. Mais l'homme ordinaire se soustrait en silence à cette conformation. Il invente le quotidien grâce aux arts de faire, ruses subtiles, tactiques de résistance par lesquelles il détourne les objets et les codes, se réapproprie l'espace et l'usage à sa façon. Tours et traverses, manières de faire des coups, astuces de chasseurs, mobilités, mises en récit et trouvailles de mots, mille pratiques inventives prouvent, à qui sait les voir, que la foule sans qualité n'est pas obéissante et passive, mais pratique l'écart dans l'usage des produits imposés, dans une liberté buissonnière par laquelle chacun tâche de vivre au mieux l'ordre social et la violence des choses. Michel de Certeau, le premier, restitua les ruses anonymes des arts de faire, cet art de vivre la société de consommation. Vite devenues classiques, ses analyses pionnières ont inspiré historiens, philosophes et sociologues.},
	language = {fr},
	publisher = {Gallimard},
	author = {Certeau, Michel de and Giard, Luce and Mayol, Pierre},
	year = {1990},
	note = {Google-Books-ID: GAwEAQAAIAAJ},
	keywords = {Literary Criticism / General, Social Science / Anthropology / Cultural \& Social},
}

@inproceedings{zhang_jingdezhens_2015,
	title = {Jingdezhen’s {Ceramic} {Civilization}: the {Past} and {Today}},
	isbn = {978-94-6252-115-5},
	shorttitle = {Jingdezhen’s {Ceramic} {Civilization}},
	url = {https://www.atlantis-press.com/proceedings/ichssr-15/25840496},
	doi = {10.2991/ichssr-15.2015.3},
	abstract = {As the main host city, Jingdezhen, celebrated China’s ninth “Cultural Heritage Day” on June 14, 2014. After several thousand years’ inheritance and development, Jingdezhen now has unique and unmatched ceramic culture nationwide and even worldwide. It has many precious cultural heritage and immovable cultural relics, totally 770 pieces. Today Jingdezhen...},
	language = {en},
	urldate = {2021-01-28},
	publisher = {Atlantis Press},
	author = {Zhang, Ganlin and Cheng, Zhou and Wang, Qingli},
	month = sep,
	year = {2015},
	note = {ISSN: 2352-5398},
	pages = {9--14},
	file = {Full Text PDF:/home/pierre/Zotero/storage/KH35G6NH/Zhang et al. - 2015 - Jingdezhen’s Ceramic Civilization the Past and To.pdf:application/pdf;Snapshot:/home/pierre/Zotero/storage/DTQQX3WH/25840496.html:text/html},
}

@book{yanagi_unknown_1989,
	title = {The {Unknown} {Craftsman}: {A} {Japanese} {Insight} {Into} {Beauty}},
	isbn = {978-0-87011-948-4},
	shorttitle = {The {Unknown} {Craftsman}},
	abstract = {This book challenges the conventional ideas of art and beauty. What is the value of things made by an anonymous craftsman working in a set tradition for a lifetime? What is the value of handwork? Why should even the roughly lacquered rice bowl of a Japanese farmer be thought beautiful? The late Soetsu Yanagi was the first to fully explore the traditional Japanese appreciation for "objects born, not made."Mr. Yanagi sees folk art as a manifestation of the essential world from which art, philosophy, and religion arise and in which the barriers between them disappear. The implications of the author's ideas are both far-reaching and practical.Soetsu Yanagi is often mentioned in books on Japanese art, but this is the first translation in any Western language of a selection of his major writings. The late Bernard Leach, renowned British potter and friend of Mr. Yanagi for fifty years, has clearly transmitted the insights of one of Japan's most important thinkers. The seventy-six plates illustrate objects that underscore the universality of his concepts. The author's profound view of the creative process and his plea for a new artistic freedom within tradition are especially timely now when the importance of craft and the handmade object is being rediscovered.},
	language = {en},
	publisher = {Kodansha International},
	author = {Yanagi, Soetsu and Yanagi, Muneyoshi and Leach, Bernard},
	year = {1989},
	note = {Google-Books-ID: 486Ye\_1hdRAC},
	keywords = {Art / Asian / General},
}

@book{black_guilds_1984,
	title = {Guilds and {Civil} {Society} in {European} {Political} {Thought} from the {Twelfth} {Century} to the {Present}},
	isbn = {978-0-416-73360-0},
	language = {en},
	publisher = {Methuen},
	author = {Black, Antony},
	year = {1984},
	note = {Google-Books-ID: oQMOAAAAQAAJ},
	keywords = {Political Science / General},
}

@article{wolek_managerial_1999,
	title = {The managerial principles behind guild craftsmanship},
	volume = {5},
	doi = {10.1108/13552529910297460},
	abstract = {The craft guilds of old are prototypes for the legend of European craftsmanship. This paper discusses three managerial principles used by the guilds: regulation, standards of accomplishment, and apprenticeship. The rationale behind, and the implementation of, each principle is outlined with reference to historical sources on guild operations. A consistent weakness of guild administration on these principles has been a bias toward self-interested conservatism. As science and technology progressed, society has responded by abandoning guild administration in favor of independent professional organizations. The paper concludes by noting that, while independent professionalism is progressive, it also minimizes the benefits that guilds obtained from experience-based knowledge.},
	journal = {Journal of Management History (Archive)},
	author = {Wolek, Francis},
	month = nov,
	year = {1999},
	pages = {401--413},
	file = {Full Text PDF:/home/pierre/Zotero/storage/8GK59MGD/Wolek - 1999 - The managerial principles behind guild craftsmansh.pdf:application/pdf},
}

@book{thompson_materials_1956,
	title = {The {Materials} and {Techniques} of {Medieval} {Painting}},
	isbn = {978-0-486-20327-0},
	abstract = {Sums up 20th-century knowledge; paints, binders, metals, surface preparation. Based on mss. and scientific investigation.},
	language = {en},
	publisher = {Courier Corporation},
	author = {Thompson, Daniel Varney},
	month = jan,
	year = {1956},
	note = {Google-Books-ID: I1DFuGQeG10C},
	keywords = {Art / History / Medieval, Art / Techniques / General, Art / Techniques / Painting},
}

@book{bassett_craftsman_2008,
	title = {The {Craftsman} {Revealed}: {Adriaen} de {Vries}},
	isbn = {978-0-89236-919-5},
	shorttitle = {The {Craftsman} {Revealed}},
	abstract = {The sculptor Adriaen de Vries (1556-1626) spent much of his life working for the most discerning royal courts of the age, including that of Holy Roman Emperor Rudolf II in Prague. A master of composition and technique, De Vries was relatively unknown until the J. Paul Getty Museum's groundbreaking 1999 exhibition Adriaen de Vries: Imperial Sculptor, which firmly established the artist's reputation and afforded a rare opportunity to study in depth a large group of bronzes. This heavily illustrated volume presents the results of the technical study of twenty-five bronzes from the exhibition. Introductory chapters provide background on the artist and technical methodologies. Subsequent chapters present case studies of individual statues, revealing the methods and materials used in their creation. The book will be of great interest to conservators, conservation scientists, art historians, curators, and sculptors.},
	language = {en},
	publisher = {Getty Publications},
	author = {Bassett, Associate Conservator Department of Decorative Arts {and} Sculpture Conservation Jane and Bassett, Jane L. and Fogelman, Peggy and Scott, David A. and Calif.), Getty Conservation Institute (Los Angeles and Schmidtling, Ronald C.},
	year = {2008},
	note = {Google-Books-ID: E8oxCwAAQBAJ},
	keywords = {Art / Individual Artists / General, Art / Reference, Art / Sculpture \& Installation},
}

@book{cennini_craftsmans_2012,
	title = {The {Craftsman}'s {Handbook}},
	isbn = {978-0-486-13662-2},
	abstract = {This is D. V. Thompson\&\#39;s definitive English translation of Il Libro dell\&\#39;Arte, an intriguing guide to methods of painting, written in fifteenth-century Florence. Embodying the secrets and techniques of the great masters, it served as an art student\&\#39;s introduction to the ways of his craft.Anyone who has ever looked at a medieval painting and marveled at the brilliance of color and quality of surface that have endured for 500 years should find this fascinating reading. It describes such lost arts as gilding stone, making mosaics of crushed eggshell, fashioning saints\&\#39; diadems, coloring parchment, making goat glue, and regulating your life in the interests of decorum — which meant shunning women, the greatest cause of unsteady hands in artists. You are told how to make green drapery, black for monks\&\#39; robes, trees and plants, oils, beards in fresco, and the proper proportions of a man\&\#39;s body. (\&quot;I will not tell you about the irrational animals because you will never discover any system of proportion in them.\&quot;) So practical are the details that readers might be tempted to experiment with the methods given here for their own amusement and curiosity.Today artists are no longer interested in specific directions on keeping miniver tails from becoming moth-eaten. The Craftsman\&\#39;s Handbook, in which these are ordinary parts of the artist\&\#39;s work, appears quaint and naïve to us. And that is much of its charm. But when we remember the magnificent mosaics, paintings, and frescoes these methods produced, the book takes on an even greater value as a touchstone to another age.\&quot;Recommended to the student of art.\&quot; — Craft Horizons.\&quot;Obviously of great merit.\&quot; — Art Material Trade News.\&quot;Delightful flavor.\&quot; — New York Herald Tribune.Recommended in Harvard List of Great Books on Art, Shaw\&\#39;s List of Books for College Libraries.},
	language = {en},
	publisher = {Courier Corporation},
	author = {Cennini, Cennino},
	month = apr,
	year = {2012},
	note = {Google-Books-ID: 4Z2jAQAAQBAJ},
	keywords = {Art / Techniques / Drawing, Art / Techniques / Oil Painting, Crafts \& Hobbies / Painting},
}

@article{pannabecker_diderot_1994,
	title = {Diderot, the {Mechanical} {Arts}, and the {Encyclopdie}: {In} {Search} of the {Heritage} of {Technology} {Education}},
	volume = {6},
	shorttitle = {Diderot, the {Mechanical} {Arts}, and the {Encyclopdie}},
	abstract = {This paper contributes to a history of technology education by focusing on one of the most ambitious attempts in early modern history to describe technological knowledge --- Diderot's Encyclopdie (Diderot \& d'Alembert, 17511772)},
	journal = {Journal of Technology Education},
	author = {Pannabecker, John R.},
	year = {1994},
	pages = {45--57},
	file = {Citeseer - Full Text PDF:/home/pierre/Zotero/storage/9Q78FMUJ/Pannabecker - 1994 - Diderot, the Mechanical Arts, and the Encyclopdie.pdf:application/pdf},
}

@book{ruskin_seven_1920,
	title = {The seven lamps of architecture. {With} illustrations drawn by the author},
	url = {http://archive.org/details/1920sevenlampsof00ruskuoft},
	abstract = {26},
	language = {eng},
	urldate = {2021-01-28},
	publisher = {London Waverley Book Co},
	author = {Ruskin, John},
	collaborator = {{Robarts - University of Toronto}},
	year = {1920},
	keywords = {Architecture},
}

@book{sturt_wheelwrights_1963,
	address = {Cambridge ; New York},
	edition = {Revised ed. edition},
	title = {The {Wheelwright}'s {Shop}},
	isbn = {978-0-521-22907-4},
	abstract = {George Sturt's frank and moving account of his trade as a wheelwright in the late nineteenth century offers a unique glimpse into the working lives of craftsmen in a world since banished by technology. The wheelwright's shop where he entered business had been operating for two centuries; this chronicle, first published in 1923, is a poignant record of that tradition, written as it was passing into history. E. P. Thompson's new foreword acclaims the significance of Sturt's engaging narrative as a vital document in the history of labour at the turn of the century.},
	language = {English},
	publisher = {Cambridge University Press},
	author = {Sturt, George},
	month = jan,
	year = {1963},
}

@book{jones_reckoning_2016,
	address = {Chicago ; London},
	edition = {1st edition},
	title = {Reckoning with {Matter}: {Calculating} {Machines}, {Innovation}, and {Thinking} about {Thinking} from {Pascal} to {Babbage}},
	isbn = {978-0-226-41146-0},
	shorttitle = {Reckoning with {Matter}},
	abstract = {From Blaise Pascal in the 1600s to Charles Babbage in the first half of the nineteenth century, inventors struggled to create the first calculating machines. All failed—but that does not mean we cannot learn from the trail of ideas, correspondence, machines, and arguments they left behind.   In Reckoning with Matter, Matthew L. Jones draws on the remarkably extensive and well-preserved records of the quest to explore the concrete processes involved in imagining, elaborating, testing, and building calculating machines. He explores the writings of philosophers, engineers, and craftspeople, showing how they thought about technical novelty, their distinctive areas of expertise, and ways they could coordinate their efforts. In doing so, Jones argues that the conceptions of creativity and making they exhibited are often more incisive—and more honest—than those that dominate our current legal, political, and aesthetic culture.},
	language = {English},
	publisher = {University of Chicago Press},
	author = {Jones, Matthew L.},
	month = nov,
	year = {2016},
}

@article{mcgee_craftsmanship_1999,
	title = {From {Craftsmanship} to {Draftsmanship}: {Naval} {Architecture} and the {Three} {Traditions} of {Early} {Modern} {Design}},
	volume = {40},
	issn = {0040-165X},
	shorttitle = {From {Craftsmanship} to {Draftsmanship}},
	url = {https://www.jstor.org/stable/25147307},
	number = {2},
	urldate = {2021-01-28},
	journal = {Technology and Culture},
	author = {McGee, David},
	year = {1999},
	note = {Publisher: [The Johns Hopkins University Press, Society for the History of Technology]},
	pages = {209--236},
}

@article{gordon_who_1988,
	title = {Who {Turned} the {Mechanical} {Ideal} into {Mechanical} {Reality}?},
	volume = {29},
	issn = {0040-165X},
	url = {https://www.jstor.org/stable/3105044},
	doi = {10.2307/3105044},
	number = {4},
	urldate = {2021-01-28},
	journal = {Technology and Culture},
	author = {Gordon, Robert B.},
	year = {1988},
	note = {Publisher: [The Johns Hopkins University Press, Society for the History of Technology]},
	pages = {744--778},
}

@book{raymond_cathedral_2001,
	title = {The {Cathedral} \& the {Bazaar}: {Musings} on {Linux} and {Open} {Source} by an {Accidental} {Revolutionary}},
	isbn = {978-0-596-00108-7},
	shorttitle = {The {Cathedral} \& the {Bazaar}},
	abstract = {Open source provides the competitive advantage in the Internet Age. According to the August Forrester Report, 56 percent of IT managers interviewed at Global 2,500 companies are already using some type of open source software in their infrastructure and another 6 percent will install it in the next two years. This revolutionary model for collaborative software development is being embraced and studied by many of the biggest players in the high-tech industry, from Sun Microsystems to IBM to Intel.  The Cathedral \& the Bazaar is a must for anyone who cares about the future of the computer industry or the dynamics of the information economy. Already, billions of dollars have been made and lost based on the ideas in this book. Its conclusions will be studied, debated, and implemented for years to come. According to Bob Young, "This is Eric Raymond's great contribution to the success of the open source revolution, to the adoption of Linux-based operating systems, and to the success of open source users and the companies that supply them."  The interest in open source software development has grown enormously in the past year. This revised and expanded paperback edition includes new material on open source developments in 1999 and 2000. Raymond's clear and effective writing style accurately describing the benefits of open source software has been key to its success. With major vendors creating acceptance for open source within companies, independent vendors will become the open source story in 2001.},
	language = {en},
	publisher = {"O'Reilly Media, Inc."},
	author = {Raymond, Eric S.},
	year = {2001},
	note = {Google-Books-ID: W2t2d2KP6HsC},
	keywords = {Computers / General, Computers / Human-Computer Interaction (HCI), Computers / Information Technology, Computers / Information Theory, Computers / Internet / General, Computers / Natural Language Processing, Computers / Operating Systems / Linux, Computers / Operating Systems / UNIX, Computers / Programming / General, Computers / Social Aspects},
}

@book{levy_hackers_2010,
	title = {Hackers: {Heroes} of the {Computer} {Revolution} - 25th {Anniversary} {Edition}},
	isbn = {978-1-4493-9374-8},
	shorttitle = {Hackers},
	abstract = {This 25th anniversary edition of Steven Levy's classic book traces the exploits of the computer revolution's original hackers -- those brilliant and eccentric nerds from the late 1950s through the early '80s who took risks, bent the rules, and pushed the world in a radical new direction. With updated material from noteworthy hackers such as Bill Gates, Mark Zuckerberg, Richard Stallman, and Steve Wozniak, Hackers is a fascinating story that begins in early computer research labs and leads to the first home computers.Levy profiles the imaginative brainiacs who found clever and unorthodox solutions to computer engineering problems. They had a shared sense of values, known as "the hacker ethic," that still thrives today. Hackers captures a seminal period in recent history when underground activities blazed a trail for today's digital world, from MIT students finagling access to clunky computer-card machines to the DIY culture that spawned the Altair and the Apple II.},
	language = {en},
	publisher = {"O'Reilly Media, Inc."},
	author = {Levy, Steven},
	month = may,
	year = {2010},
	note = {Google-Books-ID: mShXzzKtpmEC},
	keywords = {Computers / History, Computers / Information Technology, Computers / Programming / General, Computers / Reference, Computers / Social Aspects},
}

@book{brooks_mythical_1975,
	title = {The {Mythical} {Man}-month: {Essays} on {Software} {Engineering}},
	isbn = {978-0-201-00650-6},
	shorttitle = {The {Mythical} {Man}-month},
	abstract = {The tar pit. The mythical man-month. The surgical team; Aristocracy, democracy, and system design. The second-system effect. Passing the word. Why did the tower of babel fail? Calling the shot. Ten pounds in a five-pound sack. The documentary hypothesis. Plan to throw one away. Sharp tools. The whole and parts. Hatching a catastrophe. The other face.},
	language = {en},
	publisher = {Addison-Wesley Publishing Company},
	author = {Brooks, Frederick Phillips and Jr, Frederick P. Brooks},
	year = {1975},
	note = {Google-Books-ID: gWgPAQAAMAAJ},
}

@book{weinberg_psychology_1998,
	title = {The {Psychology} of {Computer} {Programming}},
	isbn = {978-0-932633-42-2},
	abstract = {Discover or Revisit One of the Most Popular Books in Computing This landmark 1971 classic is reprinted with a new preface, chapter-by-chapter commentary, and straight-from-the-heart observations on topics that affect the professional life of programmers. Long regarded as one of the first books to pioneer a people-oriented approach to computing, The Psychology of Computer Programming endures as a penetrating analysis of the intelligence, skill, teamwork, and problem-solving power of the computer programmer. Finding the chapters strikingly relevant to today's issues in programming, Gerald M. Weinberg adds new insights and highlights the similarities and differences between now and then. Using a conversational style that invites the reader to join him, Weinberg reunites with some of his most insightful writings on the human side of software engineering. Topics include egoless programming, intelligence, psychological measurement, personality factors, motivation, training, social problems on large projects, problem-solving ability, programming language design, team formation, the programming environment, and much more. Dorset House Publishing is proud to make this important text available to new generations of programmers--and to encourage readers of the first edition to return to its valuable lessons.},
	language = {en},
	publisher = {Dorset House Pub.},
	author = {Weinberg, Gerald M.},
	year = {1998},
	note = {Google-Books-ID: j\_MJAQAAMAAJ},
	keywords = {Computers / Programming / General},
}

@book{barr_problem_2018,
	title = {The {Problem} with {Software}: {Why} {Smart} {Engineers} {Write} {Bad} {Code}},
	isbn = {978-0-262-34821-8},
	shorttitle = {The {Problem} with {Software}},
	abstract = {An industry insider explains why there is so much bad software—and why academia doesn't teach programmers what industry wants them to know.Why is software so prone to bugs? So vulnerable to viruses? Why are software products so often delayed, or even canceled? Is software development really hard, or are software developers just not that good at it? In The Problem with Software, Adam Barr examines the proliferation of bad software, explains what causes it, and offers some suggestions on how to improve the situation.For one thing, Barr points out, academia doesn't teach programmers what they actually need to know to do their jobs: how to work in a team to create code that works reliably and can be maintained by somebody other than the original authors. As the size and complexity of commercial software have grown, the gap between academic computer science and industry has widened. It's an open secret that there is little engineering in software engineering, which continues to rely not on codified scientific knowledge but on intuition and experience. Barr, who worked as a programmer for more than twenty years, describes how the industry has evolved, from the era of mainframes and Fortran to today's embrace of the cloud. He explains bugs and why software has so many of them, and why today's interconnected computers offer fertile ground for viruses and worms. The difference between good and bad software can be a single line of code, and Barr includes code to illustrate the consequences of seemingly inconsequential choices by programmers. Looking to the future, Barr writes that the best prospect for improving software engineering is the move to the cloud. When software is a service and not a product, companies will have more incentive to make it good rather than “good enough to ship."},
	language = {en},
	publisher = {MIT Press},
	author = {Barr, Adam},
	month = oct,
	year = {2018},
	note = {Google-Books-ID: BxdxDwAAQBAJ},
	keywords = {Computers / Software Development \& Engineering / General, Technology \& Engineering / General},
}

@book{martin_clean_2008,
	title = {Clean {Code}: {A} {Handbook} of {Agile} {Software} {Craftsmanship}},
	isbn = {978-0-13-608325-2},
	shorttitle = {Clean {Code}},
	abstract = {Even bad code can function. But if code isn’t clean, it can bring a development organization to its knees. Every year, countless hours and significant resources are lost because of poorly written code. But it doesn’t have to be that way. Noted software expert Robert C. Martin presents a revolutionary paradigm with  Clean Code: A Handbook of Agile Software Craftsmanship . Martin has teamed up with his colleagues from Object Mentor to distill their best agile practice of cleaning code “on the fly” into a book that will instill within you the values of a software craftsman and make you a better programmer–but only if you work at it. What kind of work will you be doing? You’ll be reading code–lots of code. And you will be challenged to think about what’s right about that code, and what’s wrong with it. More importantly, you will be challenged to reassess your professional values and your commitment to your craft.   Clean Code  is divided into three parts. The first describes the principles, patterns, and practices of writing clean code. The second part consists of several case studies of increasing complexity. Each case study is an exercise in cleaning up code–of transforming a code base that has some problems into one that is sound and efficient. The third part is the payoff: a single chapter containing a list of heuristics and “smells” gathered while creating the case studies. The result is a knowledge base that describes the way we think when we write, read, and clean code. Readers will come away from this book understanding  How to tell the difference between good and bad code How to write good code and how to transform bad code into good code How to create good names, good functions, good objects, and good classes How to format code for maximum readability How to implement complete error handling without obscuring code logic How to unit test and practice test-driven development This book is a must for any developer, software engineer, project manager, team lead, or systems analyst with an interest in producing better code.},
	language = {en},
	publisher = {Pearson Education},
	author = {Martin, Robert C.},
	month = aug,
	year = {2008},
	note = {Google-Books-ID: \_i6bDeoCQzsC},
	keywords = {Computers / Software Development \& Engineering / General, Computers / Software Development \& Engineering / Quality Assurance \& Testing},
}

@book{hendrickson_software_2002,
	title = {Software {Craftsmanship}: {The} {New} {Imperative}},
	isbn = {978-0-201-73386-0},
	shorttitle = {Software {Craftsmanship}},
	abstract = {By recognizing that software development is not a mechanical task, you can create better applications. Today's software development projects are often based on the traditional software engineering model, which was created to develop large-scale defense projects. Projects that use this antiquated industrial model tend to take longer, promise more, and deliver less. As the demand for software has exploded, the software engineering establishment has attempted to adapt to the changing times with short training programs that teach the syntax of coding languages. But writing code is no longer the hard part of development; the hard part is figuring out what to write. This kind of know-how demands a skilled craftsman, not someone who knows only how to pass a certification course. Software Craftsmanship presents an alternative--a craft model that focuses on the people involved in commercial software development. This book illustrates that it is imperative to turn from the technology-for-its-own-sake model to one that is grounded in delivering value to customers. The author, Pete McBreen, presents a method to nurture mastery in the programmer, develop creative collaboration in small developer teams, and enhance communications with the customer. The end result--skilled developers who can create, extend, and enhance robust applications. This book addresses the following topics, among others:  Understanding customer requirements  Identifying when a project may go off track Selecting software craftsmen for a particular project Designing goals for application development Managing software craftsmen Software Craftsmanship is written for programmers who want to become exceptional at their craft and for the project manager who wants to hire them.  0201733862B07242001},
	language = {en},
	publisher = {Addison-Wesley Professional},
	author = {Hendrickson, Mike and McBreen, Pete},
	year = {2002},
	note = {Google-Books-ID: C9vvHV1lIawC},
	keywords = {Computers / Software Development \& Engineering / General},
}

@book{hoover_apprenticeship_2009,
	title = {Apprenticeship {Patterns}: {Guidance} for the {Aspiring} {Software} {Craftsman}},
	isbn = {978-1-4493-7940-7},
	shorttitle = {Apprenticeship {Patterns}},
	abstract = {Are you doing all you can to further your career as a software developer? With today's rapidly changing and ever-expanding technologies, being successful requires more than technical expertise. To grow professionally, you also need soft skills and effective learning techniques. Honing those skills is what this book is all about. Authors Dave Hoover and Adewale Oshineye have cataloged dozens of behavior patterns to help you perfect essential aspects of your craft.Compiled from years of research, many interviews, and feedback from O'Reilly's online forum, these patterns address difficult situations that programmers, administrators, and DBAs face every day. And it's not just about financial success. Apprenticeship Patterns also approaches software development as a means to personal fulfillment. Discover how this book can help you make the best of both your life and your career. Solutions to some common obstacles that this book explores in-depth include: Burned out at work? "Nurture Your Passion" by finding a pet project to rediscover the joy of problem solving.Feeling overwhelmed by new information? Re-explore familiar territory by building something you've built before, then use "Retreat into Competence" to move forward again.Stuck in your learning? Seek a team of experienced and talented developers with whom you can "Be the Worst" for a while."Brilliant stuff! Reading this book was like being in a time machine that pulled me back to those key learning moments in my career as a professional software developer and, instead of having to learn best practices the hard way, I had a guru sitting on my shoulder guiding me every step towards master craftsmanship. I'll certainly be recommending this book to clients. I wish I had this book 14 years ago!"-Russ Miles, CEO, OpenCredo},
	language = {en},
	publisher = {"O'Reilly Media, Inc."},
	author = {Hoover, Dave and Oshineye, Adewale},
	month = oct,
	year = {2009},
	note = {Google-Books-ID: I3xFAoZT\_5AC},
	keywords = {Computers / Programming Languages / General, Computers / Software Development \& Engineering / General},
}

@book{goodliffe_code_2007,
	title = {Code {Craft}: {The} {Practice} of {Writing} {Excellent} {Code}},
	isbn = {978-1-59327-119-0},
	shorttitle = {Code {Craft}},
	abstract = {You know how to write code that works, but what about code that\&\#39;s well written and easy to understand? And robust and bug-free? If other programmers looked at your handiwork, would they be able to figure out the code\&\#39;s logic and purpose? Exceptional programmers have more than just technical know-how; they adopt the right approach and attitude to development.Code Craft will help take your programming beyond writing correct code to writing great code, thus turning you into a true programming professional or enhancing your existing professional skills.With language-agnostic advice that\&\#39;s relevant to all developers, Code Craft covers code-writing concerns such as presentation style, variable naming, error handling, and security. And it tackles broader, real-world programming issues like effective teamwork, development processes, and documentation. Each chapter ends with a Q\&amp;A section that reviews key concepts to get you thinking like an expert, making it an especially great reference for newer programmers who want to work professionally and efficiently as part of a team.This survival guide for the software factory will show you how to:* Write good code when the world\&\#39;s not helping you* Avoid disasters and distractions in the workplace* Assess your abilities accurately and determine ways to improve* Adopt productive attitudes and follow best practicesThere\&\#39;s little more valuable than the advice of a true, programming professional. You\&\#39;ll find Code Craft to be clear, practical, and entertaining throughout, and a great way to take your code (and your career) to the next level.},
	language = {en},
	publisher = {No Starch Press},
	author = {Goodliffe, Pete},
	year = {2007},
	note = {Google-Books-ID: i4zCzpkrt4sC},
	keywords = {Computers / Programming / General, Computers / Programming Languages / General, Computers / Software Development \& Engineering / General},
}

@article{pevsner_term_1942,
	title = {The {Term} '{Architect}' in the {Middle} {Ages}},
	volume = {17},
	issn = {0038-7134},
	url = {https://www.jstor.org/stable/2856447},
	doi = {10.2307/2856447},
	number = {4},
	urldate = {2021-01-28},
	journal = {Speculum},
	author = {Pevsner, N.},
	year = {1942},
	note = {Publisher: [Medieval Academy of America, Cambridge University Press, University of Chicago Press]},
	pages = {549--562},
}

@incollection{henningsen_joys_2020,
	title = {The {Joys} of {Wiki} {Work}: {Craftsmanship}, {Flow} and {Self}-externalization in a {Digital} {Environment}},
	isbn = {978-3-11-063662-8},
	shorttitle = {The {Joys} of {Wiki} {Work}},
	abstract = {Public discussions on digital technology and the Internet tend generally to be framed in epochalist terms and to be rife with utopian and dystopian projections of our imminent digital futures (Du Gay 2003; Henningsen and Larsen, this volume). As many observers have noted, in recent years a shift in the tone of such discussions has occurred, as the optimism that accrued to the Web 2.0 and social media 10–15 years ago has waned, with darker visions being brought to the fore. Today, a probing of the role of social media as vehicles of misinformation,
commoditization, andmass surveillance looms large in popular and scholarly discussions
alike (Fuchs et al. 2012; Van Dijck 2013). However, there is one notable
exception to this trend in the current flora of social media: since the turn of the
century,Wikipedia and platforms based on the wiki-technology have been a constant
source of positive wonder among commentators. This relates to the democratic
nature of the Wikipedia organization, to the deliberative aspect of content
production, and to the platforms’ persistent avoidance of commercialism (Firer-
Blaes and Fuchs 2014; Van Dijck 2013; Wright 2010).},
	booktitle = {Libraries, {Archives} and {Museums} as {Democratic} {Spaces} in a {Digital} {Age}},
	publisher = {De Gruyter Saur},
	author = {Henningsen, Erik and Larsen, Håkon},
	editor = {Audunson, Ragnar and Andresen, Herbjorn and Fagerlid, Cicilie},
	month = sep,
	year = {2020},
	doi = {10.1515/9783110636628-017},
	pages = {345--362},
	file = {Full Text PDF:/home/pierre/Zotero/storage/TWWFQM46/Henningsen and Larsen - 2020 - 7 The Joys of Wiki Work Craftsmanship, Flow and S.pdf:application/pdf},
}

@misc{munroe_good_2012,
	title = {Good {Code}},
	url = {https://xkcd.com/844/},
	urldate = {2021-01-28},
	journal = {xkcd},
	author = {Munroe, Randall},
	year = {2012},
}

@book{williams_pair_2003,
	title = {Pair {Programming} {Illuminated}},
	isbn = {978-0-201-74576-4},
	abstract = {At face value, pair programming appears to be a simple, straightforward concept. Two programmers work side-by-side at one computer, continuously collaborating on the same design, algorithm, code, and test. If it was as simple as plopping two skilled programmers at one desktop, there would be no need for this book. However, there are people and personalities involved, and these people are accustomed to programming alone. Pair programming offers significant benefits: quality is increased, time is saved, morale is improved, trust and teamwork grow, knowledge is shared, and learning is enhanced. However, before any pair programming can take place, participants have to accept a new way of thinking. In Pair Programming Illuminated, Laurie Williams and Robert Kessler help you fight through the exceptions, gain collective acceptance of this approach, and experience remarkable success with it. Two case studies show pair programming in practice using Extreme Programming and Collaborative Software Process as methods.},
	language = {en},
	publisher = {Addison-Wesley Professional},
	author = {Williams, Laurie and Kessler, Robert R.},
	year = {2003},
	note = {Google-Books-ID: LRQhdlrKNE8C},
	keywords = {Computers / Programming / General, Computers / Software Development \& Engineering / General},
}

@book{james_tao_1987,
	title = {The {Tao} of {Programming}},
	isbn = {978-0-931137-07-5},
	language = {en},
	publisher = {InfoBooks},
	author = {James, Geoffrey},
	year = {1987},
	note = {Google-Books-ID: idkNAAAACAAJ},
	keywords = {Computers / Programming / General},
}

@book{raymond_new_1996,
	title = {The {New} {Hacker}'s {Dictionary}},
	isbn = {978-0-262-68092-9},
	abstract = {This new edition of the hacker's own phenomenally successful lexicon includes more than 100 new entries and updates or revises 200 more. This new edition of the hacker's own phenomenally successful lexicon includes more than 100 new entries and updates or revises 200 more. Historically and etymologically richer than its predecessor, it supplies additional background on existing entries and clarifies the murky origins of several important jargon terms (overturning a few long-standing folk etymologies) while still retaining its high giggle value. Sample definition hacker n. [originally, someone who makes furniture with an axe] 1. A person who enjoys exploring the details of programmable systems and how to stretch their capabilities, as opposed to most users, who prefer to learn only the minimum necessary. 2. One who programs enthusiastically (even obsessively) or who enjoys programming rather than just theorizing about programming. 3. A person capable of appreciating \{hack value\}. 4. A person who is good at programming quickly. 5. An expert at a particular program, or one who frequently does work using it or on it; as in `a UNIX hacker'. (Definitions 1 through 5 are correlated, and people who fit them congregate.) 6. An expert or enthusiast of any kind. One might be an astronomy hacker, for example. 7. One who enjoys the intellectual challenge of creatively overcoming or circumventing limitations. 8. [deprecated] A malicious meddler who tries to discover sensitive information by poking around. Hence `password hacker', `network hacker'. The correct term is \{cracker\}. The term 'hacker' also tends to connote membership in the global community defined by the net (see \{network, the\} and \{Internet address\}). It also implies that the person described is seen to subscribe to some version of the hacker ethic (see \{hacker ethic, the\}). It is better to be described as a hacker by others than to describe oneself that way. Hackers consider themselves something of an elite (a meritocracy based on ability), though one to which new members are gladly welcome. There is thus a certain ego satisfaction to be had in identifying yourself as a hacker (but if you claim to be one and are not, you'll quickly be labeled \{bogus\}). See also \{wannabee\}.},
	language = {en},
	publisher = {MIT Press},
	author = {Raymond, Eric S. and Steele, Guy L.},
	year = {1996},
	note = {Google-Books-ID: g80P\_4v4QbIC},
	keywords = {Computers / Computer Science, Computers / Machine Theory, Computers / Reference},
}

@misc{gabriel_mob_2001,
	title = {Mob {Software}: {The} {Erotic} {Life} of {Code}},
	url = {https://www.dreamsongs.com/MobSoftware.html},
	urldate = {2021-01-28},
	journal = {Dreamsongs.org},
	author = {Gabriel, Richard P. and Goldman, Ron},
	year = {2001},
	file = {Mob Software:/home/pierre/Zotero/storage/J3SEANK6/MobSoftware.html:text/html},
}

@book{gabriel_patterns_1998,
	title = {Patterns of {Software}: {Tales} from the {Software} {Community}},
	isbn = {978-0-19-512123-0},
	shorttitle = {Patterns of {Software}},
	abstract = {In our homes, our schools, and our businesses, computers play an ever-increasing role. But while most of us today can work a computer--albeit with the help of the ever-present computer software manual--we know little about what goes on inside the box and virtually nothing about software design or the world of computer programming. In Patterns of Software, the respected software pioneer and computer scientist, Richard Gabriel, gives us an informative inside look at the world of software design and computer programming and the business that surrounds them. In this wide-ranging volume, Gabriel discusses such topics as what makes a successful programming language, how the rest of the world looks at and responds to the work of computer scientists, how he first became involved in computer programming and software development, what makes a successful software business, and why his own company, Lucid, failed in 1994, ten years after its inception. Perhaps the most interesting and enlightening section of the book is Gabriel's detailed look at what he believes are the lessons that can be learned from architect Christopher Alexander, whose books--including the seminal A Pattern Language--have had a profound influence on the computer programming community. Gabriel illuminates some of Alexander's key insights--"the quality without a name," pattern languages, habitability, piecemeal growth--and reveals how these influential architectural ideas apply equally well to the construction of a computer program. Gabriel explains the concept of habitability, for example, by comparing a program to a New England farmhouse and the surrounding structures which slowly grow and are modified according to the needs and desires of the people who live and work on the farm. "Programs live and grow, and their inhabitants--the programmers--need to work with that program the way the farmer works with the homestead." Although computer scientists and software entrepreneurs will get much out of this book, the essays are accessible to everyone and will intrigue anyone curious about Silicon Valley, computer programming, or the world of high technology.},
	language = {en},
	publisher = {Oxford University Press},
	author = {Gabriel, Richard P.},
	year = {1998},
	note = {Google-Books-ID: uwFLPwAACAAJ},
	keywords = {Computers / Software Development \& Engineering / General},
}

@book{lions_lions_1996,
	title = {Lions' {Commentary} on {UNIX} 6th {Edition} with {Source} {Code}},
	isbn = {978-1-57398-013-5},
	abstract = {The most famous suppressed book in computer history! * Used as an Operating System textbook at MIT"After 20 years, this is still the best expostion of the workings of a 'real' operating system." --- Ken Thompson (Developer of the UNIX operating system)After years of suppression (as trade secrets) by various owners of the UNIX code, this tome has been re-released, and we owe a debt to all involved in making this happen. I consider this to be the single most important book of 1996. Unix Review, June 1997"The Lions book", cherished by UNIX hackers and widely circulated as a photocopied bootleg document since the late 1970's, is again available in an unrestricted edition. This legendary underground classic, reproduced without modification, is really two works in one: the complete source code to an early version (Edition 6) of the UNIX operating system, a treasure in itself! a brilliant commentary on that code by John Lionswith additional historical perspective essays added in 1996.Lions' marriage of source code with commentary was originally used as an operating systems textbook, a purpose for which it remains superbly well-suited (as evidenced by it's ongoing use at MIT).},
	language = {en},
	publisher = {Peer-to-Peer Communications},
	author = {Lions, John},
	year = {1996},
	note = {Google-Books-ID: OlZ3QgAACAAJ},
	keywords = {Computers / Operating Systems / UNIX, Computers / Software Development \& Engineering / Systems Analysis \& Design},
}

@book{mackenzie_cutting_2006,
	title = {Cutting {Code}: {Software} and {Sociality}},
	isbn = {978-0-8204-7823-4},
	shorttitle = {Cutting {Code}},
	abstract = {Software has often been marginalized in accounts of digital cultures and network societies. Although software is everywhere, it is hard to say what it actually is. Cutting Code: Software and Sociality is one of the first books to treat software seriously as a full-blown cultural process and as a subtly powerful material in contemporary communication. From deCSS to Java, from Linux to Extreme Programming, this book analyses software artworks, operating systems, commercial products, infrastructures, and programming practices. It explores social forms, identities, materialities, and power relations associated with software, and it asks how software provokes the re-thinking of production, consumption and distribution as entwined cultural processes. Cutting Code argues that analysis of code as a mosaic of algorithms, protocols, infrastructures, and programming conventions offers valuable insights into how contemporary social formations invent new kinds of personhood and new ways of acting.},
	language = {en},
	publisher = {Peter Lang},
	author = {Mackenzie, Adrian},
	year = {2006},
	note = {Google-Books-ID: 083BUgMnLKQC},
	keywords = {Computers / Social Aspects, Social Science / Popular Culture, Technology \& Engineering / Social Aspects},
}

@article{thompson_study_1934,
	title = {The {Study} of {Medieval} {Craftsmanship}},
	volume = {3},
	issn = {1939-0394},
	url = {https://www.jstor.org/stable/4300956},
	urldate = {2021-01-28},
	journal = {Bulletin of the Fogg Art Museum},
	author = {Thompson, Daniel V.},
	year = {1934},
	note = {Publisher: [Harvard University Art Museums, Harvard Art Museums, The President and Fellows of Harvard College]},
	pages = {3--8},
}

@book{seibel_coders_2009,
	title = {Coders at {Work}: {Reflections} on the {Craft} of {Programming}},
	isbn = {978-1-4302-1948-4},
	shorttitle = {Coders at {Work}},
	abstract = {Peter Seibel interviews 15 of the most interesting computer programmers alive today in Coders at Work, offering a companion volume to Apress’s highly acclaimed best-seller Founders at Work by Jessica Livingston. As the words “at work” suggest, Peter Seibel focuses on how his interviewees tackle the day-to-day work of programming, while revealing much more, like how they became great programmers, how they recognize programming talent in others, and what kinds of problems they find most interesting. Hundreds of people have suggested names of programmers to interview on the Coders at Work web site: www.codersatwork.com. The complete list was 284 names. Having digested everyone’s feedback, we selected 15 folks who’ve been kind enough to agree to be interviewed:  Frances Allen: Pioneer in optimizing compilers, first woman to win the Turing Award (2006) and first female IBM fellow  Joe Armstrong: Inventor of Erlang  Joshua Bloch: Author of the Java collections framework, now at Google  Bernie Cosell: One of the main software guys behind the original ARPANET IMPs and a master debugger  Douglas Crockford: JSON founder, JavaScript architect at Yahoo!  L. Peter Deutsch: Author of Ghostscript, implementer of Smalltalk-80 at Xerox PARC and Lisp 1.5 on PDP-1  Brendan Eich: Inventor of JavaScript, CTO of the Mozilla Corporation  Brad Fitzpatrick: Writer of LiveJournal, OpenID, memcached, and Perlbal  Dan Ingalls: Smalltalk implementor and designer  Simon Peyton Jones: Coinventor of Haskell and lead designer of Glasgow Haskell Compiler  Donald Knuth: Author of The Art of Computer Programming and creator of TeX  Peter Norvig: Director of Research at Google and author of the standard text on AI  Guy Steele: Coinventor of Scheme and part of the Common Lisp Gang of Five, currently working on Fortress  Ken Thompson: Inventor of UNIX  Jamie Zawinski: Author of XEmacs and early Netscape/Mozilla hacker   What you’ll learnHow the best programmers in the world do their jobs! Who this book is for  Programmers interested in the point of view of leaders in the field. Programmers looking for approaches that work for some of these outstanding programmers.  Table of Contents Jamie Zawinski  Brad Fitzpatrick  Douglas Crockford  Brendan Eich  Joshua Bloch  Joe Armstrong  Simon Peyton Jones  Peter Norvig  Guy Steele  Dan Ingalls  L Peter Deutsch  Ken Thompson  Fran Allen  Bernie Cosell  Donald Knuth},
	language = {en},
	publisher = {Apress},
	author = {Seibel, Peter},
	month = sep,
	year = {2009},
	keywords = {Business \& Economics / Operations Research, Computers / Programming / General},
}

@inproceedings{tedre_development_2006,
	address = {New York, NY, USA},
	series = {Baltic {Sea} '06},
	title = {The development of computer science: a sociocultural perspective},
	isbn = {978-1-4503-7838-3},
	shorttitle = {The development of computer science},
	url = {https://doi.org/10.1145/1315803.1315808},
	doi = {10.1145/1315803.1315808},
	abstract = {Computer science is a broad discipline, and computer scientists often disagree about the content, form, and practices of the discipline. The processes through which computer scientists create, maintain, and modify knowledge in computer science---processes which often are eclectic and anarchistic---are well researched, but knowledge of those processes is generally not considered to be a part of computer science. On the contrary, I argue that understanding of how computer science works is an important part of the knowledge of an educated computer scientist. In this paper I discuss some characteristics of computer science that are central to understanding how computer science works.},
	urldate = {2021-01-28},
	booktitle = {Proceedings of the 6th {Baltic} {Sea} conference on {Computing} education research: {Koli} {Calling} 2006},
	publisher = {Association for Computing Machinery},
	author = {Tedre, Matti},
	month = feb,
	year = {2006},
	keywords = {metaknowledge in computer science, social issues, social studies of computer science},
	pages = {21--24},
}

@book{weizenbaum_computer_1976,
	address = {San Francisco},
	edition = {1st edition},
	title = {Computer {Power} and {Human} {Reason}: {From} {Judgment} to {Calculation}},
	isbn = {978-0-7167-0463-8},
	shorttitle = {Computer {Power} and {Human} {Reason}},
	abstract = {Examines the sources of the computer's powers and offers evaluative explorations of what computers can do, cannot do, and should not be employed to do. Bibliogs},
	language = {English},
	publisher = {W H Freeman \& Co},
	author = {Weizenbaum, Joseph},
	month = mar,
	year = {1976},
}

@book{collins_tacit_2010,
	title = {Tacit and {Explicit} {Knowledge}},
	isbn = {978-0-226-11382-1},
	abstract = {Much of what humans know we cannot say. And much of what we do we cannot describe. For example, how do we know how to ride a bike when we can’t explain how we do it? Abilities like this were called “tacit knowledge” by physical chemist and philosopher Michael Polanyi, but here Harry Collins analyzes the term, and the behavior, in much greater detail, often departing from Polanyi’s treatment.  In Tacit and Explicit Knowledge, Collins develops a common conceptual language to bridge the concept’s disparate domains by explaining explicit knowledge and classifying tacit knowledge. Collins then teases apart the three very different meanings, which, until now, all fell under the umbrella of Polanyi’s term: relational tacit knowledge (things we could describe in principle if someone put effort into describing them), somatic tacit knowledge (things our bodies can do but we cannot describe how, like balancing on a bike), and collective tacit knowledge (knowledge we draw that is the property of society, such as the rules for language). Thus, bicycle riding consists of some somatic tacit knowledge and some collective tacit knowledge, such as the knowledge that allows us to navigate in traffic. The intermixing of the three kinds of tacit knowledge has led to confusion in the past; Collins’s book will at last unravel the complexities of the idea.  Tacit knowledge drives everything from language, science, education, and management to sport, bicycle riding, art, and our interaction with technology. In Collins’s able hands, it also functions at last as a framework for understanding human behavior in a range of disciplines.},
	language = {en},
	publisher = {University of Chicago Press},
	author = {Collins, Harry},
	month = jun,
	year = {2010},
	note = {Google-Books-ID: ONzRalXOtEMC},
	keywords = {Science / Philosophy \& Social Aspects, Social Science / General, Social Science / Sociology / General},
}

@book{ensmenger_computer_2012,
	address = {Cambridge, Mass.},
	title = {The {Computer} {Boys} {Take} {Over}: {Computers}, {Programmers}, and the {Politics} of {Technical} {Expertise}},
	isbn = {978-0-262-51796-6},
	shorttitle = {The {Computer} {Boys} {Take} {Over}},
	abstract = {This is a book about the computer revolution of the mid-twentieth century and the people who made it possible. Unlike most histories of computing, it is not a book about machines, inventors, or entrepreneurs. Instead, it tells the story of the vast but largely anonymous legions of computer specialists--programmers, systems analysts, and other software developers--who transformed the electronic computer from a scientific curiosity into the defining technology of the modern era. As the systems that they built became increasingly powerful and ubiquitous, these specialists became the focus of a series of critiques of the social and organizational impact of electronic computing. To many of their contemporaries, it seemed the "computer boys" were taking over, not just in the corporate setting, but also in government, politics, and society in general. In The Computer Boys Take Over, Nathan Ensmenger traces the rise to power of the computer expert in modern American society. His rich},
	language = {English},
	publisher = {The MIT Press},
	author = {Ensmenger, Nathan L.},
	editor = {Aspray, William},
	month = aug,
	year = {2012},
}

@article{roskill_aesthetic_1977,
	title = {{THE} {AESTHETIC} {CONCEPT} {OF} {CRAFTSMANSHIP}*},
	volume = {17},
	issn = {0007-0904},
	url = {https://doi.org/10.1093/bjaesthetics/17.2.138},
	doi = {10.1093/bjaesthetics/17.2.138},
	number = {2},
	urldate = {2021-01-28},
	journal = {The British Journal of Aesthetics},
	author = {Roskill, Mark},
	month = feb,
	year = {1977},
	pages = {138--148},
	file = {Snapshot:/home/pierre/Zotero/storage/QTNH5LJH/87175.html:text/html},
}

@article{mazzone_art_2019,
	title = {Art, {Creativity}, and the {Potential} of {Artificial} {Intelligence}},
	volume = {8},
	copyright = {http://creativecommons.org/licenses/by/3.0/},
	url = {https://www.mdpi.com/2076-0752/8/1/26},
	doi = {10.3390/arts8010026},
	abstract = {Our essay discusses an AI process developed for making art (AICAN), and the issues AI creativity raises for understanding art and artists in the 21st century. Backed by our training in computer science (Elgammal) and art history (Mazzone), we argue for the consideration of AICAN\&rsquo;s works as art, relate AICAN works to the contemporary art context, and urge a reconsideration of how we might define human and machine creativity. Our work in developing AI processes for art making, style analysis, and detecting large-scale style patterns in art history has led us to carefully consider the history and dynamics of human art-making and to examine how those patterns can be modeled and taught to the machine. We advocate for a connection between machine creativity and art broadly defined as parallel to but not in conflict with human artists and their emotional and social intentions of art making. Rather, we urge a partnership between human and machine creativity when called for, seeing in this collaboration a means to maximize both partners\&rsquo; creative strengths.},
	language = {en},
	number = {1},
	urldate = {2021-01-28},
	journal = {Arts},
	author = {Mazzone, Marian and Elgammal, Ahmed},
	month = mar,
	year = {2019},
	note = {Number: 1
Publisher: Multidisciplinary Digital Publishing Institute},
	keywords = {adversarial learning, art, artificial intelligence, computational creativity, creativity, deep learning},
	pages = {26},
	file = {Full Text PDF:/home/pierre/Zotero/storage/QPWUSUKJ/Mazzone and Elgammal - 2019 - Art, Creativity, and the Potential of Artificial I.pdf:application/pdf;Snapshot:/home/pierre/Zotero/storage/LL9ERM8M/26.html:text/html},
}

@article{grudin_tool_2016,
	title = {From {Tool} to {Partner}: {The} {Evolution} of {Human}-{Computer} {Interaction}},
	volume = {10},
	issn = {1946-7680},
	shorttitle = {From {Tool} to {Partner}},
	url = {https://www.morganclaypool.com/doi/abs/10.2200/S00745ED1V01Y201612HCI035},
	doi = {10.2200/S00745ED1V01Y201612HCI035},
	number = {1},
	urldate = {2021-01-28},
	journal = {Synthesis Lectures on Human-Centered Informatics},
	author = {Grudin, Jonathan},
	month = dec,
	year = {2016},
	note = {Publisher: Morgan \& Claypool Publishers},
	pages = {i--183},
	file = {Submitted Version:/home/pierre/Zotero/storage/UCKSEH3M/Grudin - 2016 - From Tool to Partner The Evolution of Human-Compu.pdf:application/pdf;Snapshot:/home/pierre/Zotero/storage/ANNTAWEY/S00745ED1V01Y201612HCI035.html:text/html},
}

@phdthesis{pineiro_aesthetics_2003,
	title = {The aesthetics of code : on excellence in instrumental action},
	shorttitle = {The aesthetics of code},
	url = {http://urn.kb.se/resolve?urn=urn:nbn:se:kth:diva-3648},
	abstract = {DiVA portal is a finding tool for research publications and student theses written at the following 49 universities and research institutions.},
	language = {eng},
	urldate = {2021-01-28},
	school = {KTH, Superseded Departments, Industrial Economics and Management.},
	author = {Pineiro, Erik},
	year = {2003},
	note = {Publisher: Industriell ekonomi och organisation},
	file = {Full Text PDF:/home/pierre/Zotero/storage/UAC5JPXL/Pineiro - 2003 - The aesthetics of code  on excellence in instrume.pdf:application/pdf;Snapshot:/home/pierre/Zotero/storage/5CQQLCGL/record.html:text/html},
}

@book{abelson_structure_1979,
	title = {Structure and {Interpretation} of {Computer} {Programs} - 2nd {Edition}},
	abstract = {Structure and Interpretation of Computer Programs by Harold Abelson and Gerald Jay Sussman is licensed under a Creative Commons Attribution-NonCommercial 3.0 License.},
	language = {en},
	publisher = {Justin Kelly},
	author = {Abelson, Harold and Sussman, Gerald Jay and Sussman, Julie},
	year = {1979},
	note = {Google-Books-ID: MXZQAwAAQBAJ},
	keywords = {Computers / Computer Science},
}

@book{mccarthy_lisp_1965,
	title = {{LISP} 1.5 {Programmer}'s {Manual}},
	isbn = {978-0-262-13011-0},
	abstract = {The manual describes LISP, a formal mathematical language. LISP differs from most programming languages in three important ways. The first way is in the nature of the data.The LISP language is designed primarily for symbolic data processing used for symbolic calculations in differential and integral calculus, electrical circuit theory, mathematical logic, game playing, and other fields of artificial intelligence. The manual describes LISP, a formal mathematical language. LISP differs from most programming languages in three important ways. The first way is in the nature of the data. In the LISP language, all data are in the form of symbolic expressions usually referred to as S-expressions, of indefinite length, and which have a branching tree-type of structure, so that significant subexpressions can be readily isolated. In the LISP system, the bulk of the available memory is used for storing S-expressions in the form of list structures. The second distinction is that the LISP language is the source language itself which specifies in what way the S-expressions are to be processed. Third, LISP can interpret and execute programs written in the form of S-expressions. Thus, like machine language, and unlike most other high level languages, it can be used to generate programs for further executions.},
	language = {en},
	publisher = {MIT Press},
	author = {McCarthy, John and Levin, Michael I. and Abrahams, Paul W. and Center, Massachusetts Institute of Technology Computation and Edwards, Daniel J.},
	year = {1965},
	note = {Google-Books-ID: 68j6lEJjMQwC},
	keywords = {Computers / Programming Languages / General},
}

@article{kurp_green_2008,
	title = {Green computing},
	volume = {51},
	issn = {0001-0782},
	url = {https://doi.org/10.1145/1400181.1400186},
	doi = {10.1145/1400181.1400186},
	abstract = {Are you ready for a personal energy meter?},
	number = {10},
	urldate = {2021-01-28},
	journal = {Commun. ACM},
	author = {Kurp, Patrick},
	month = oct,
	year = {2008},
	pages = {11--13},
}

@book{levy_programmation_1992,
	address = {Paris},
	series = {Textes à l'appui. {Anthropologie} des sciences et des techniques},
	title = {De la programmation considérée comme un des beaux-arts},
	isbn = {978-2-7071-2154-7},
	language = {français},
	publisher = {Éd. la Découverte},
	author = {Lévy, Pierre},
	year = {1992},
	keywords = {InformatiquePhilosophieOrdinateursProgrammationAspect socialProgrammation orientée objets (informatique)Aspect socialProgrammationSystèmes experts (informatique)Représentation des connaissancesIntelligence artificielle},
}

@article{seaver_captivating_2019,
	title = {Captivating algorithms: {Recommender} systems as traps},
	volume = {24},
	issn = {1359-1835},
	shorttitle = {Captivating algorithms},
	url = {https://doi.org/10.1177/1359183518820366},
	doi = {10.1177/1359183518820366},
	abstract = {Algorithmic recommender systems are a ubiquitous feature of contemporary cultural life online, suggesting music, movies, and other materials to their users. This article, drawing on fieldwork with developers of recommender systems in the US, describes a tendency among these systems’ makers to describe their purpose as ‘hooking’ people – enticing them into frequent or enduring usage. Inspired by steady references to capture in the field, the author considers recommender systems as traps, drawing on anthropological theories about animal trapping. The article charts the rise of ‘captivation metrics’ – measures of user retention – enabled by a set of transformations in recommenders’ epistemic, economic, and technical contexts. Traps prove useful for thinking about how such systems relate to broader infrastructural ecologies of knowledge and technology. As recommenders spread across online cultural infrastructures and become practically inescapable, thinking with traps offers an alternative to common ethical framings that oppose tropes of freedom and coercion.},
	language = {en},
	number = {4},
	urldate = {2021-01-28},
	journal = {Journal of Material Culture},
	author = {Seaver, Nick},
	month = dec,
	year = {2019},
	note = {Publisher: SAGE Publications Ltd},
	keywords = {algorithms, behaviorism, infrastructure, recommender systems, traps},
	pages = {421--436},
}

@article{perrotta_programming_2020,
	title = {Programming the platform university: {Learning} analytics and predictive infrastructures in higher education},
	issn = {0034-5237},
	shorttitle = {Programming the platform university},
	url = {https://doi.org/10.1177/0034523720965623},
	doi = {10.1177/0034523720965623},
	abstract = {This article offers a case study of how platforms and predictive infrastructures are emerging in higher education. It examines a Learning Analytics Application Programming Interface (API) from a popular Learning Management System. The API is treated firstly as an artefact based on the computational abstraction of educational principles, and secondly as an empirical entry point to investigate the emergence of a Learning Analytics infrastructure in a large Australian university. Through in-depth ethnographic interviews and the interpretative analysis of software development workflows, the paper describes an API-mediated platformisation process involving a range of actors and systems: computational experts, algorithms, data-savvy administrative staff and large corporate actors inserting themselves through back-ends and various other dependencies. In the conclusion, the article argues that the platformisation of higher education is part of a broader project that mobilises programmability and computation to re-engineer educational institutions in the interest of efficiency and prediction. However, the social-scientific study of this project cannot ignore the practical and compromised dimension where human actors and technical systems interact and, in the process, generate meaning.},
	language = {en},
	urldate = {2021-01-28},
	journal = {Research in Education},
	author = {Perrotta, Carlo},
	month = oct,
	year = {2020},
	note = {Publisher: SAGE Publications Ltd STM},
	keywords = {Application Programming Interfaces, higher education, infrastructure studies, Platforms, software studies},
	pages = {0034523720965623},
}

@book{stephenson_beginningwas_1999,
	address = {New York},
	edition = {First Paperback Edition},
	title = {In the {Beginning}...was the {Command} {Line}},
	isbn = {978-0-380-81593-7},
	abstract = {This is "the Word" -- one man's word, certainly -- about the art (and artifice) of the state of our computer-centric existence. And considering that the "one man" is Neal Stephenson, "the hacker Hemingway" (Newsweek) -- acclaimed novelist, pragmatist, seer, nerd-friendly philosopher, and nationally bestselling author of groundbreaking literary works (Snow Crash, Cryptonomicon, etc., etc.) -- the word is well worth hearing. Mostly well-reasoned examination and partial rant, Stephenson's In the Beginning... was the Command Line is a thoughtful, irreverent, hilarious treatise on the cyber-culture past and present; on operating system tyrannies and downloaded popular revolutions; on the Internet, Disney World, Big Bangs, not to mention the meaning of life itself.},
	language = {English},
	publisher = {William Morrow Paperbacks},
	author = {Stephenson, Neal},
	month = nov,
	year = {1999},
}

@article{osborne_aesthetic_1977,
	title = {The {Aesthetic} {Concept} of {Craftsmanship}},
	volume = {17},
	doi = {10.1093/bjaesthetics/17.2.138},
	number = {2},
	journal = {British Journal of Aesthetics},
	author = {Osborne, Harold},
	year = {1977},
	note = {Publisher: Oxford University Press},
	pages = {138},
}

@book{pye_nature_2008,
	edition = {Illustrated edition},
	title = {The {Nature} and {Art} of {Workmanship}},
	isbn = {978-0-7136-8931-0},
	abstract = {This is one of the classic books on craftsmanship and design. Init, David Pye explores the meaning of skill and its relationship todesign and manufacture. Cutting through a century of fuzzythinking, he proposes a new theory of making based on the concept ofgood workmanship and shows how it imparts all-important diversity toour visual environment.},
	language = {English},
	publisher = {Herbert Press},
	author = {Pye, David},
	editor = {Shales, Ezra},
	month = jul,
	year = {2008},
}

@article{licklider_man-computer_1960,
	title = {Man-{Computer} {Symbiosis}},
	volume = {HFE-1},
	issn = {2168-2836},
	doi = {10.1109/THFE2.1960.4503259},
	abstract = {Man-computer symbiosis is an expected development in cooperative interaction between men and electronic computers. It will involve very close coupling between the human and the electronic members of the partnership. The main aims are 1) to let computers facilitate formulative thinking as they now facilitate the solution of formulated problems, and 2) to enable men and computers to cooperate in making decisions and controlling complex situations without inflexible dependence on predetermined programs. In the anticipated symbiotic partnership, men will set the goals, formulate the hypotheses, determine the criteria, and perform the evaluations. Computing machines will do the routinizable work that must be done to prepare the way for insights and decisions in technical and scientific thinking. Preliminary analyses indicate that the symbiotic partnership will perform intellectual operations much more effectively than man alone can perform them. Prerequisites for the achievement of the effective, cooperative association include developments in computer time sharing, in memory components, in memory organization, in programming languages, and in input and output equipment.},
	number = {1},
	journal = {IRE Transactions on Human Factors in Electronics},
	author = {Licklider, J. C. R.},
	month = mar,
	year = {1960},
	note = {Conference Name: IRE Transactions on Human Factors in Electronics},
	keywords = {Computer languages, Insects, Performance analysis, Performance evaluation, Symbiosis, Time sharing computer systems},
	pages = {4--11},
	file = {IEEE Xplore Abstract Record:/home/pierre/Zotero/storage/EDH7JISR/4503259.html:text/html},
}

@book{oram_beautiful_2007,
	address = {Beijing ; Sebastapol, Calif},
	edition = {1st edition},
	title = {Beautiful {Code}: {Leading} {Programmers} {Explain} {How} {They} {Think}},
	isbn = {978-0-596-51004-6},
	shorttitle = {Beautiful {Code}},
	abstract = {How do the experts solve difficult problems in software development? In this unique and insightful book, leading computer scientists offer case studies that reveal how they found unusual, carefully designed solutions to high-profile projects. You will be able to look over the shoulder of major coding and design experts to see problems through their eyes. This is not simply another design patterns book, or another software engineering treatise on the right and wrong way to do things. The authors think aloud as they work through their project's architecture, the tradeoffs made in its construction, and when it was important to break rules. Beautiful Code is an opportunity for master coders to tell their story. All author royalties will be donated to Amnesty International. tion.},
	language = {English},
	publisher = {O'Reilly Media},
	editor = {Oram, Andy and Wilson, Greg},
	month = jul,
	year = {2007},
}
