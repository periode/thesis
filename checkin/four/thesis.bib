
@incollection{dijkstra_chapter_1972,
	title = {Chapter {I}: {Notes} on structured programming},
	isbn = {0-12-200550-3},
	booktitle = {Structured programming},
	publisher = {Academic Press Ltd.},
	author = {Dijkstra, Edsger W.},
	year = {1972},
	pages = {1--82},
}

@book{knuth_art_1997,
	address = {USA},
	title = {The {Art} of {Computer} {Programming}, {Volume} 1 (3rd {Ed}.): {Fundamental} {Algorithms}},
	isbn = {0-201-89683-4},
	publisher = {Addison Wesley Longman Publishing Co., Inc.},
	author = {Knuth, Donald E.},
	year = {1997},
}

@book{goody_logic_1986,
	series = {Studies in {Literacy}, the {Family}, {Culture} and the {State}},
	title = {The {Logic} of {Writing} and the {Organization} of {Society}},
	publisher = {Cambridge University Press},
	author = {Goody, Jack},
	year = {1986},
	doi = {10.1017/CBO9780511621598},
}

@book{manovich_language_2001,
	address = {Cambridge, MA},
	title = {The language of new media},
	isbn = {0-262-13374-1 978-0-262-13374-6 0-262-63255-1 978-0-262-63255-3},
	abstract = {In dit boek worden delen van filmtheorie, kunsthistorie, literatuurwetenschap en informatica in verband gebracht met de ontwikkeling van nieuwe media.},
	language = {English},
	publisher = {MIT Press},
	author = {Manovich, Lev.},
	year = {2001},
}

@article{fraenkel_written_2006,
	title = {Written {Acts} and {Speech} {Acts}: {Performativity} and {Writing} {Practices}},
	volume = {29},
	url = {https://www.cairn-int.info/journal-etudes-de-communication-2006-1-page-69.htm},
	abstract = {The notion of performativity is alive and well in research on the information and communication sciences, but also in closely related disciplines. Social science researchers have placed at the center of the questioning not only the language part of action, but also the pragmatic nature of language, that is the language acts themselves. Études de Communication opens the debate on this multidisciplinary idea of performativity to establish a panorama of the ways it is used. How is this notion mobilized? What place does it hold in the research objectives to which it is—or could be—associated: organizational communication, scientific practice, links between language and work, writing practices, the artistic world, media discourse, market economy, interactions represented in the media . . . ?},
	language = {EN},
	number = {1},
	journal = {Études de communication},
	author = {Fraenkel, Béatrice},
	year = {2006},
	pages = {69--93},
}

@book{lessig_code_1999,
	address = {USA},
	title = {Code and {Other} {Laws} of {Cyberspace}},
	isbn = {0-465-03912-X},
	abstract = {From the Publisher:Should cyberspace be regulated\_\_ \_\_ How can it be done\_\_ \_\_ It's a cherished belief of techies and net denizens everywhere that cyberspace is fundamentally impossible to regulate. Harvard Professor Lawrence Lessig warns that, if we're not careful we'll wake up one day to discover that the character of cyberspace has changed from under us. Cyberspace will no longer be a world of relative freedom; instead it will be a world of perfect control where our identities, actions, and desires are monitored, tracked, and analyzed for the latest market research report. Commercial forces will dictate the change, and architecture—the very structure of cyberspace itself—will dictate the form our interactions can and cannot take. Code And Other Laws of Cyberspace is an exciting examination of how the core values of cyberspace as we know it—intellectual property, free speech, and privacy-—are being threatened and what we can do to protect them. Lessig shows how code—the architecture and law of cyberspace—can make a domain, site, or network free or restrictive; how technological architectures influence people's behavior and the values they adopt; and how changes in code can have damaging consequences for individual freedoms. Code is not just for lawyers and policymakers; it is a must-read for everyone concerned with survival of democratic values in the Information Age.},
	publisher = {Basic Books, Inc.},
	author = {Lessig, Lawrence},
	year = {1999},
}

@book{galloway_interface_2012,
	title = {The {Interface} {Effect}},
	publisher = {Polity},
	author = {Galloway, Alexander R.},
	year = {2012},
}

@incollection{dijkstra_craftsman_1982,
	address = {New York, NY},
	series = {Texts and {Monographs} in {Computer} {Science}},
	title = {“{Craftsman} or {Scientist}?”},
	isbn = {978-1-4612-5695-3},
	shorttitle = {“{Craftsman} or {Scientist}?},
	url = {https://doi.org/10.1007/978-1-4612-5695-3_19},
	abstract = {My somewhat elliptic title refers, of course, to the programmer; so much you may have guessed. What, in all probability, you could not have guessed is that I have chosen to use the words “craftsman” and “scientist” in a very specific meaning: they have been chosen to characterize the results of two extreme techniques of education, and this luncheon speech will be devoted to a (be it short) discussion of their role in the education of programmers, in the teaching of programming. For the transmission of knowledge and skills both techniques have been used side by side since many centuries.},
	language = {en},
	urldate = {2021-01-26},
	booktitle = {Selected {Writings} on {Computing}: {A} personal {Perspective}},
	publisher = {Springer},
	author = {Dijkstra, Edsger W.},
	editor = {Dijkstra, Edsger W.},
	year = {1982},
	doi = {10.1007/978-1-4612-5695-3_19},
	pages = {104--109},
}

@article{wah_man_influence_2013,
	title = {Influence of {Global} {Aesthetics} on {Chinese} {Aesthetics}: {The} {Adaptation} of {Moxie} and the {Case} of {Dafen} {Cun}},
	url = {https://contempaesthetics.org/newvolume/pages/article.php?articleID=674},
	urldate = {2021-01-27},
	journal = {Contemporary Aesthetics},
	author = {Wah Man, Eva Kit},
	year = {2013},
	file = {Influence of Global Aesthetics on Chinese Aesthetics\: The Adaptation of <i>Moxie</i> and the Case of Dafen Cun:/home/pierre/Zotero/storage/9K9VHLLS/article.html:text/html},
}

@book{jordan_copying_2003,
	title = {Copying the {Master} and {Stealing} {His} {Secrets}: {Talent} and {Training} in {Japanese} {Painting}},
	isbn = {978-0-8248-2608-6},
	shorttitle = {Copying the {Master} and {Stealing} {His} {Secrets}},
	abstract = {Copying the Master examines the transmission of painting traditions in Japan from one generation to the next. The contributors emphasize the relationship between inborn abilities and those skills taught in the course of learning how to paint. They focus their discussion on a group of painting masters loosely associated with the prestigious Kano painting atelier, Japan\&\#39;s de facto painting academy throughout the Tokugawa period (1615-1868) and into the early modern era. By delving into why, how, and what these painters transmitted to students through their teaching, readers gain insight into artistic and aesthetic sensibilities active in Japanese painting and a fuller appreciation of extant paintings within their cultural and historical contexts.},
	language = {en},
	publisher = {University of Hawaii Press},
	author = {Jordan, Brenda G. and Weston, Victoria Louise},
	month = jan,
	year = {2003},
	keywords = {Art / Asian / General, Art / Asian / Japanese, Art / Techniques / Painting},
}

@article{davies_models_1993,
	title = {Models and theories of programming strategy},
	volume = {39},
	issn = {0020-7373},
	url = {http://www.sciencedirect.com/science/article/pii/S0020737383710618},
	doi = {10.1006/imms.1993.1061},
	abstract = {Much of the literature concerned with understanding the nature of programming skill has focused explicitly upon the declarative aspects of programmers' knowledge. This literature has sought to describe the nature of stereotypical programming knowledge structures and their organization. However, one major limitation of many of these knowledge-based theories is that they often fail to consider the way in which knowledge is used or applied. Another strand of literature is less well represented. This literature deals with the strategic elements of programming skill and is directed towards an analysis of the strategies commonly employed by programmers in the generation and the comprehension of programs. In this paper an attempt is made to unify various analyses of programming strategy. This paper presents a review of the literature in this area, highlighting common themes and concerns, and proposes a model of strategy development which attempts to encompass the central findings of previous research in this area. It is suggested that many studies of programming strategy are descriptive and fail to explain why strategies take the form they do or to explain the typical strategy shifts which are observed during the transitions between different levels of skill. This paper suggests that what is needed is an explanation of programming skill that integrates ideas about knowledge representation with a strategic model, enabling one to make predictions about how changes in knowledge representation might give rise to particular strategies and to the strategy changes associated with developing expertise. This paper concludes by making a number of brief suggestions about the possible nature of this model and its implications for theories of programming expertise.},
	language = {en},
	number = {2},
	urldate = {2021-01-27},
	journal = {International Journal of Man-Machine Studies},
	author = {Davies, Simon P.},
	month = aug,
	year = {1993},
	pages = {237--267},
	file = {ScienceDirect Snapshot:/home/pierre/Zotero/storage/8NS4HNUE/S0020737383710618.html:text/html},
}

@book{senseney_art_2011,
	title = {The {Art} of {Building} in the {Classical} {World}: {Vision}, {Craftsmanship}, and {Linear} {Perspective} in {Greek} and {Roman} {Architecture}},
	isbn = {978-1-139-49726-8},
	shorttitle = {The {Art} of {Building} in the {Classical} {World}},
	abstract = {This book examines the application of drawing in the design process of classical architecture, exploring how the tools and techniques of drawing developed for architecture subsequently shaped theories of vision and representations of the universe in science and philosophy. Building on recent scholarship that examines and reconstructs the design process of classical architecture, John R. Senseney focuses on technical drawing in the building trade as a model for the expression of visual order, showing that the techniques of ancient Greek drawing actively determined concepts about the world. He argues that the uniquely Greek innovations of graphic construction determined principles that shaped the massing, special qualities and refinements of buildings and the manner in which order itself was envisioned.},
	language = {en},
	publisher = {Cambridge University Press},
	author = {Senseney, John R.},
	month = mar,
	year = {2011},
	keywords = {Architecture / History / General, Art / History / Ancient \& Classical, History / Ancient / General, Social Science / Archaeology},
}

@article{taylor_patterns_2001,
	title = {Patterns as {Software} {Design} {Canon}},
	url = {https://aisel.aisnet.org/acis2001/65},
	journal = {ACIS 2001 Proceedings},
	author = {Taylor, Paul},
	month = jan,
	year = {2001},
	file = {"Patterns as Software Design Canon" by Paul R. Taylor:/home/pierre/Zotero/storage/MLRZX5F9/65.html:text/html},
}

@article{chun_software_2005,
	title = {On {Software}, or the {Persistence} of {Visual} {Knowledge}},
	volume = {18},
	issn = {1526-3819},
	url = {https://www.mitpressjournals.org/doi/10.1162/1526381043320741},
	doi = {10.1162/1526381043320741},
	urldate = {2021-01-28},
	journal = {Grey Room},
	author = {Chun, Wendy Hui Kyong},
	month = jan,
	year = {2005},
	pages = {26--51},
	file = {Submitted Version:/home/pierre/Zotero/storage/8BWGJJU9/Chun - 2005 - On Software, or the Persistence of Visual Knowledg.pdf:application/pdf},
}

@book{berry_philosophy_2011,
	title = {The {Philosophy} of {Software}: {Code} and {Mediation} in the {Digital} {Age}},
	shorttitle = {The {Philosophy} of {Software}},
	publisher = {Palgrave-Macmillan},
	author = {Berry, David M.},
	year = {2011},
}

@book{noauthor_my_nodate,
	title = {My {Mother} {Was} a {Computer}},
	url = {https://press.uchicago.edu/ucp/books/book/chicago/M/bo3622698.html},
	abstract = {We live in a world, according to N. Katherine Hayles, where new languages are constantly emerging, proliferating, and fading into obsolescence. These are languages of our own making: the programming languages written in code for the intelligent machines we call computers. Hayles’s latest exploration provides an exciting new way of understanding the relations between code and language and considers how their interactions have affected creative, technological, and artistic practices. My Mother Was a Computer explores how the impact of code on everyday life has become comparable to that of speech and writing: language and code have grown more entangled, the lines that once separated humans from machines, analog from digital, and old technologies from new ones have become blurred. My Mother Was a Computer gives us the tools necessary to make sense of these complex relationships. Hayles argues that we live in an age of intermediation that challenges our ideas about language, subjectivity, literary objects, and textuality. This process of intermediation takes place where digital media interact with cultural practices associated with older media, and here Hayles sharply portrays such interactions: how code differs from speech; how electronic text differs from print; the effects of digital media on the idea of the self; the effects of digitality on printed books; our conceptions of computers as living beings; the possibility that human consciousness itself might be computational; and the subjective cosmology wherein humans see the universe through the lens of their own digital age. We are the children of computers in more than one sense, and no critic has done more than N. Katherine Hayles to explain how these technologies define us and our culture. Heady and provocative, My Mother Was a Computer will be judged as her best work yet.},
	urldate = {2021-01-28},
	file = {Snapshot:/home/pierre/Zotero/storage/WNFRRCL6/bo3622698.html:text/html},
}

@book{hayles_my_2010,
	title = {My {Mother} {Was} a {Computer}: {Digital} {Subjects} and {Literary} {Texts}},
	isbn = {978-0-226-32149-3},
	shorttitle = {My {Mother} {Was} a {Computer}},
	abstract = {We live in a world, according to N. Katherine Hayles, where new languages are constantly emerging, proliferating, and fading into obsolescence. These are languages of our own making: the programming languages written in code for the intelligent machines we call computers. Hayles's latest exploration provides an exciting new way of understanding the relations between code and language and considers how their interactions have affected creative, technological, and artistic practices. My Mother Was a Computer explores how the impact of code on everyday life has become comparable to that of speech and writing: language and code have grown more entangled, the lines that once separated humans from machines, analog from digital, and old technologies from new ones have become blurred. My Mother Was a Computer gives us the tools necessary to make sense of these complex relationships. Hayles argues that we live in an age of intermediation that challenges our ideas about language, subjectivity, literary objects, and textuality. This process of intermediation takes place where digital media interact with cultural practices associated with older media, and here Hayles sharply portrays such interactions: how code differs from speech; how electronic text differs from print; the effects of digital media on the idea of the self; the effects of digitality on printed books; our conceptions of computers as living beings; the possibility that human consciousness itself might be computational; and the subjective cosmology wherein humans see the universe through the lens of their own digital age. We are the children of computers in more than one sense, and no critic has done more than N. Katherine Hayles to explain how these technologies define us and our culture. Heady and provocative, My Mother Was a Computer will be judged as her best work yet.},
	language = {en},
	publisher = {University of Chicago Press},
	author = {Hayles, N. Katherine},
	month = mar,
	year = {2010},
	keywords = {Computers / Cybernetics, Literary Criticism / American / General, Literary Criticism / General},
}

@book{hayes_cultures_2017,
	title = {Cultures of {Code}},
	url = {https://www.americanscientist.org/article/cultures-of-code},
	abstract = {Three communities in the world of computation are bound together by common interests but set apart by distinctly different aims and agendas.},
	language = {en},
	urldate = {2021-01-28},
	author = {Hayes, Brian},
	month = feb,
	year = {2017},
	note = {Publication Title: American Scientist},
	file = {Snapshot:/home/pierre/Zotero/storage/TBVEX79C/cultures-of-code.html:text/html},
}

@book{sennett_craftsman_2008,
	title = {The {Craftsman}},
	isbn = {978-0-300-15119-0},
	abstract = {In his most ambitious book to date, Richard Sennett offers an original perspective on craftsmanship and its close connections to work and ethical values Craftsmanship, says Richard Sennett, names the basic human impulse to do a job well for its own sake, and good craftsmanship involves developing skills and focusing on the work rather than ourselves. The computer programmer, the doctor, the artist, and even the parent and citizen all engage in a craftsman's work. In this thought-provoking book, Sennett explores the work of craftsmen past and present, identifies deep connections between material consciousness and ethical values, and challenges received ideas about what constitutes good work in today's world. The Craftsman engages the many dimensions of skill–from the technical demands to the obsessive energy required to do good work. Craftsmanship leads Sennett across time and space, from ancient Roman brickmakers to Renaissance goldsmiths to the printing presses of Enlightenment Paris and the factories of industrial London; in the modern world he explores what experiences of good work are shared by computer programmers, nurses and doctors, musicians, glassblowers, and cooks. Unique in the scope of his thinking, Sennett expands previous notions of crafts and craftsmen and apprises us of the surprising extent to which we can learn about ourselves through the labor of making physical things.},
	language = {en},
	publisher = {Yale University Press},
	author = {Sennett, Richard},
	year = {2008},
	keywords = {Business \& Economics / Labor, History / World, Philosophy / Ethics \& Moral Philosophy, Philosophy / Social, Social Science / Sociology / General},
}

@book{noauthor_geek_nodate,
	title = {Geek {Sublime} {\textbackslash}textbar {Graywolf} {Press}},
	url = {https://www.graywolfpress.org/books/geek-sublime},
	urldate = {2021-01-28},
	file = {Geek Sublime | Graywolf Press:/home/pierre/Zotero/storage/QTXS4Z9Y/geek-sublime.html:text/html},
}

@book{chandra_geek_2014,
	title = {Geek {Sublime}: {The} {Beauty} of {Code}, the {Code} of {Beauty}},
	isbn = {978-1-55597-326-1},
	shorttitle = {Geek {Sublime}},
	abstract = {The nonfiction debut from the author of the international bestseller Sacred Games about the surprising overlap between writing and computer codingVikram Chandra has been a computer programmer for almost as long as he has been a novelist. In this extraordinary new book, his first work of nonfiction, he searches for the connections between the worlds of art and technology. Coders are obsessed with elegance and style, just as writers are, but do the words mean the same thing to both? Can we ascribe beauty to the craft of writing code? Exploring such varied topics as logic gates and literary modernism, the machismo of tech geeks, the omnipresence of an "Indian Mafia" in Silicon Valley, and the writings of the eleventh-century Kashmiri thinker Abhinavagupta, Geek Sublime is both an idiosyncratic history of coding and a fascinating meditation on the writer's art. Part literary essay, part technology story, and part memoir, it is an engrossing, original, and heady book of sweeping ideas.},
	language = {en},
	publisher = {Graywolf Press},
	author = {Chandra, Vikram},
	month = sep,
	year = {2014},
	keywords = {Literary Criticism / General, Biography \& Autobiography / Literary Figures, Computers / History, Literary Collections / Essays},
}

@article{seguy_certeau_1992,
	title = {Certeau ({Michel} de) {L}'{Invention} du quotidien t.{I}, {Arts} de faire},
	volume = {80},
	copyright = {free},
	url = {https://www.persee.fr/doc/assr_0335-5985_1992_num_80_1_1564_t1_0249_0000_3},
	language = {fre},
	number = {1},
	urldate = {2021-01-28},
	journal = {Archives de Sciences Sociales des Religions},
	author = {Séguy, Jean},
	year = {1992},
	pages = {249--250},
	file = {Snapshot:/home/pierre/Zotero/storage/DEP24E8Z/assr_0335-5985_1992_num_80_1_1564_t1_0249_0000_3.html:text/html},
}

@book{certeau_invention_1990,
	title = {L'invention du quotidien},
	isbn = {978-2-07-032576-4},
	abstract = {La Raison technicienne croit savoir comment organiser au mieux les choses et les gens, assignant à chacun une place, un rôle, des produits à consommer. Mais l'homme ordinaire se soustrait en silence à cette conformation. Il invente le quotidien grâce aux arts de faire, ruses subtiles, tactiques de résistance par lesquelles il détourne les objets et les codes, se réapproprie l'espace et l'usage à sa façon. Tours et traverses, manières de faire des coups, astuces de chasseurs, mobilités, mises en récit et trouvailles de mots, mille pratiques inventives prouvent, à qui sait les voir, que la foule sans qualité n'est pas obéissante et passive, mais pratique l'écart dans l'usage des produits imposés, dans une liberté buissonnière par laquelle chacun tâche de vivre au mieux l'ordre social et la violence des choses. Michel de Certeau, le premier, restitua les ruses anonymes des arts de faire, cet art de vivre la société de consommation. Vite devenues classiques, ses analyses pionnières ont inspiré historiens, philosophes et sociologues.},
	language = {fr},
	publisher = {Gallimard},
	author = {Certeau, Michel de and Giard, Luce and Mayol, Pierre},
	year = {1990},
	keywords = {Literary Criticism / General, Social Science / Anthropology / Cultural \& Social},
}

@book{thompson_materials_1956,
	title = {The {Materials} and {Techniques} of {Medieval} {Painting}},
	isbn = {978-0-486-20327-0},
	abstract = {Sums up 20th-century knowledge; paints, binders, metals, surface preparation. Based on mss. and scientific investigation.},
	language = {en},
	publisher = {Courier Corporation},
	author = {Thompson, Daniel Varney},
	month = jan,
	year = {1956},
	keywords = {Art / Techniques / Painting, Art / History / Medieval, Art / Techniques / General},
}

@book{cennini_craftsmans_2012,
	title = {The {Craftsman}'s {Handbook}},
	isbn = {978-0-486-13662-2},
	abstract = {This is D. V. Thompson\&\#39;s definitive English translation of Il Libro dell\&\#39;Arte, an intriguing guide to methods of painting, written in fifteenth-century Florence. Embodying the secrets and techniques of the great masters, it served as an art student\&\#39;s introduction to the ways of his craft.Anyone who has ever looked at a medieval painting and marveled at the brilliance of color and quality of surface that have endured for 500 years should find this fascinating reading. It describes such lost arts as gilding stone, making mosaics of crushed eggshell, fashioning saints\&\#39; diadems, coloring parchment, making goat glue, and regulating your life in the interests of decorum — which meant shunning women, the greatest cause of unsteady hands in artists. You are told how to make green drapery, black for monks\&\#39; robes, trees and plants, oils, beards in fresco, and the proper proportions of a man\&\#39;s body. (\&quot;I will not tell you about the irrational animals because you will never discover any system of proportion in them.\&quot;) So practical are the details that readers might be tempted to experiment with the methods given here for their own amusement and curiosity.Today artists are no longer interested in specific directions on keeping miniver tails from becoming moth-eaten. The Craftsman\&\#39;s Handbook, in which these are ordinary parts of the artist\&\#39;s work, appears quaint and naïve to us. And that is much of its charm. But when we remember the magnificent mosaics, paintings, and frescoes these methods produced, the book takes on an even greater value as a touchstone to another age.\&quot;Recommended to the student of art.\&quot; — Craft Horizons.\&quot;Obviously of great merit.\&quot; — Art Material Trade News.\&quot;Delightful flavor.\&quot; — New York Herald Tribune.Recommended in Harvard List of Great Books on Art, Shaw\&\#39;s List of Books for College Libraries.},
	language = {en},
	publisher = {Courier Corporation},
	author = {Cennini, Cennino},
	month = apr,
	year = {2012},
	keywords = {Art / Techniques / Drawing, Art / Techniques / Oil Painting, Crafts \& Hobbies / Painting},
}

@article{pannabecker_diderot_1994,
	title = {Diderot, the {Mechanical} {Arts}, and the {Encyclopdie}: {In} {Search} of the {Heritage} of {Technology} {Education}},
	volume = {6},
	shorttitle = {Diderot, the {Mechanical} {Arts}, and the {Encyclopdie}},
	abstract = {This paper contributes to a history of technology education by focusing on one of the most ambitious attempts in early modern history to describe technological knowledge — Diderot's Encyclopdie (Diderot \& d'Alembert, 17511772)},
	journal = {Journal of Technology Education},
	author = {Pannabecker, John R.},
	year = {1994},
	pages = {45--57},
	file = {Citeseer - Full Text PDF:/home/pierre/Zotero/storage/DPNWUFZM/Pannabecker - 1994 - Diderot, the Mechanical Arts, and the Encyclopdie.pdf:application/pdf},
}

@book{ruskin_seven_1920,
	title = {The seven lamps of architecture. {With} illustrations drawn by the author},
	url = {http://archive.org/details/1920sevenlampsof00ruskuoft},
	abstract = {26},
	language = {eng},
	urldate = {2021-01-28},
	publisher = {London Waverley Book Co},
	author = {Ruskin, John},
	year = {1920},
	keywords = {Architecture},
}

@book{sturt_wheelwrights_1963,
	address = {Cambridge ; New York},
	edition = {Revised ed. edition},
	title = {The {Wheelwright}'s {Shop}},
	isbn = {978-0-521-22907-4},
	abstract = {George Sturt's frank and moving account of his trade as a wheelwright in the late nineteenth century offers a unique glimpse into the working lives of craftsmen in a world since banished by technology. The wheelwright's shop where he entered business had been operating for two centuries; this chronicle, first published in 1923, is a poignant record of that tradition, written as it was passing into history. E. P. Thompson's new foreword acclaims the significance of Sturt's engaging narrative as a vital document in the history of labour at the turn of the century.},
	language = {English},
	publisher = {Cambridge University Press},
	author = {Sturt, George},
	month = jan,
	year = {1963},
}

@book{jones_reckoning_2016,
	address = {Chicago ; London},
	edition = {1st edition},
	title = {Reckoning with {Matter}: {Calculating} {Machines}, {Innovation}, and {Thinking} about {Thinking} from {Pascal} to {Babbage}},
	isbn = {978-0-226-41146-0},
	shorttitle = {Reckoning with {Matter}},
	abstract = {From Blaise Pascal in the 1600s to Charles Babbage in the first half of the nineteenth century, inventors struggled to create the first calculating machines. All failed—but that does not mean we cannot learn from the trail of ideas, correspondence, machines, and arguments they left behind. In Reckoning with Matter, Matthew L. Jones draws on the remarkably extensive and well-preserved records of the quest to explore the concrete processes involved in imagining, elaborating, testing, and building calculating machines. He explores the writings of philosophers, engineers, and craftspeople, showing how they thought about technical novelty, their distinctive areas of expertise, and ways they could coordinate their efforts. In doing so, Jones argues that the conceptions of creativity and making they exhibited are often more incisive—and more honest—than those that dominate our current legal, political, and aesthetic culture.},
	language = {English},
	publisher = {University of Chicago Press},
	author = {Jones, Matthew L.},
	month = nov,
	year = {2016},
}

@article{gordon_who_1988,
	title = {Who {Turned} the {Mechanical} {Ideal} into {Mechanical} {Reality}?},
	volume = {29},
	issn = {0040-165X},
	url = {https://www.jstor.org/stable/3105044},
	doi = {10.2307/3105044},
	number = {4},
	urldate = {2021-01-28},
	journal = {Technology and Culture},
	author = {Gordon, Robert B.},
	year = {1988},
	pages = {744--778},
}

@book{raymond_cathedral_2001,
	title = {The {Cathedral} \& the {Bazaar}: {Musings} on {Linux} and {Open} {Source} by an {Accidental} {Revolutionary}},
	isbn = {978-0-596-00108-7},
	shorttitle = {The {Cathedral} \& the {Bazaar}},
	abstract = {Open source provides the competitive advantage in the Internet Age. According to the August Forrester Report, 56 percent of IT managers interviewed at Global 2,500 companies are already using some type of open source software in their infrastructure and another 6 percent will install it in the next two years. This revolutionary model for collaborative software development is being embraced and studied by many of the biggest players in the high-tech industry, from Sun Microsystems to IBM to Intel. The Cathedral \& the Bazaar is a must for anyone who cares about the future of the computer industry or the dynamics of the information economy. Already, billions of dollars have been made and lost based on the ideas in this book. Its conclusions will be studied, debated, and implemented for years to come. According to Bob Young, "This is Eric Raymond's great contribution to the success of the open source revolution, to the adoption of Linux-based operating systems, and to the success of open source users and the companies that supply them." The interest in open source software development has grown enormously in the past year. This revised and expanded paperback edition includes new material on open source developments in 1999 and 2000. Raymond's clear and effective writing style accurately describing the benefits of open source software has been key to its success. With major vendors creating acceptance for open source within companies, independent vendors will become the open source story in 2001.},
	language = {en},
	publisher = {"O'Reilly Media, Inc."},
	author = {Raymond, Eric S.},
	year = {2001},
	keywords = {Computers / General, Computers / Human-Computer Interaction (HCI), Computers / Information Technology, Computers / Information Theory, Computers / Internet / General, Computers / Natural Language Processing, Computers / Operating Systems / Linux, Computers / Operating Systems / UNIX, Computers / Programming / General, Computers / Social Aspects},
}

@book{levy_hackers_2010,
	title = {Hackers: {Heroes} of the {Computer} {Revolution} - 25th {Anniversary} {Edition}},
	isbn = {978-1-4493-9374-8},
	shorttitle = {Hackers},
	abstract = {This 25th anniversary edition of Steven Levy's classic book traces the exploits of the computer revolution's original hackers – those brilliant and eccentric nerds from the late 1950s through the early '80s who took risks, bent the rules, and pushed the world in a radical new direction. With updated material from noteworthy hackers such as Bill Gates, Mark Zuckerberg, Richard Stallman, and Steve Wozniak, Hackers is a fascinating story that begins in early computer research labs and leads to the first home computers.Levy profiles the imaginative brainiacs who found clever and unorthodox solutions to computer engineering problems. They had a shared sense of values, known as "the hacker ethic," that still thrives today. Hackers captures a seminal period in recent history when underground activities blazed a trail for today's digital world, from MIT students finagling access to clunky computer-card machines to the DIY culture that spawned the Altair and the Apple II.},
	language = {en},
	publisher = {"O'Reilly Media, Inc."},
	author = {Levy, Steven},
	month = may,
	year = {2010},
	keywords = {Computers / History, Computers / Information Technology, Computers / Programming / General, Computers / Social Aspects, Computers / Reference},
}

@book{brooks_mythical_1975,
	title = {The {Mythical} {Man}-month: {Essays} on {Software} {Engineering}},
	isbn = {978-0-201-00650-6},
	shorttitle = {The {Mythical} {Man}-month},
	abstract = {The tar pit. The mythical man-month. The surgical team; Aristocracy, democracy, and system design. The second-system effect. Passing the word. Why did the tower of babel fail? Calling the shot. Ten pounds in a five-pound sack. The documentary hypothesis. Plan to throw one away. Sharp tools. The whole and parts. Hatching a catastrophe. The other face.},
	language = {en},
	publisher = {Addison-Wesley Publishing Company},
	author = {Brooks, Frederick Phillips and Jr, Frederick P. Brooks},
	year = {1975},
}

@book{weinberg_psychology_1998,
	title = {The {Psychology} of {Computer} {Programming}},
	isbn = {978-0-932633-42-2},
	abstract = {Discover or Revisit One of the Most Popular Books in Computing This landmark 1971 classic is reprinted with a new preface, chapter-by-chapter commentary, and straight-from-the-heart observations on topics that affect the professional life of programmers. Long regarded as one of the first books to pioneer a people-oriented approach to computing, The Psychology of Computer Programming endures as a penetrating analysis of the intelligence, skill, teamwork, and problem-solving power of the computer programmer. Finding the chapters strikingly relevant to today's issues in programming, Gerald M. Weinberg adds new insights and highlights the similarities and differences between now and then. Using a conversational style that invites the reader to join him, Weinberg reunites with some of his most insightful writings on the human side of software engineering. Topics include egoless programming, intelligence, psychological measurement, personality factors, motivation, training, social problems on large projects, problem-solving ability, programming language design, team formation, the programming environment, and much more. Dorset House Publishing is proud to make this important text available to new generations of programmers–and to encourage readers of the first edition to return to its valuable lessons.},
	language = {en},
	publisher = {Dorset House Pub.},
	author = {Weinberg, Gerald M.},
	year = {1998},
	keywords = {Computers / Programming / General},
}

@book{martin_clean_2008,
	title = {Clean {Code}: {A} {Handbook} of {Agile} {Software} {Craftsmanship}},
	isbn = {978-0-13-608325-2},
	shorttitle = {Clean {Code}},
	abstract = {Even bad code can function. But if code isn’t clean, it can bring a development organization to its knees. Every year, countless hours and significant resources are lost because of poorly written code. But it doesn’t have to be that way. Noted software expert Robert C. Martin presents a revolutionary paradigm with Clean Code: A Handbook of Agile Software Craftsmanship . Martin has teamed up with his colleagues from Object Mentor to distill their best agile practice of cleaning code “on the fly” into a book that will instill within you the values of a software craftsman and make you a better programmer–but only if you work at it. What kind of work will you be doing? You’ll be reading code–lots of code. And you will be challenged to think about what’s right about that code, and what’s wrong with it. More importantly, you will be challenged to reassess your professional values and your commitment to your craft. Clean Code is divided into three parts. The first describes the principles, patterns, and practices of writing clean code. The second part consists of several case studies of increasing complexity. Each case study is an exercise in cleaning up code–of transforming a code base that has some problems into one that is sound and efficient. The third part is the payoff: a single chapter containing a list of heuristics and “smells” gathered while creating the case studies. The result is a knowledge base that describes the way we think when we write, read, and clean code. Readers will come away from this book understanding How to tell the difference between good and bad code How to write good code and how to transform bad code into good code How to create good names, good functions, good objects, and good classes How to format code for maximum readability How to implement complete error handling without obscuring code logic How to unit test and practice test-driven development This book is a must for any developer, software engineer, project manager, team lead, or systems analyst with an interest in producing better code.},
	language = {en},
	publisher = {Pearson Education},
	author = {Martin, Robert C.},
	month = aug,
	year = {2008},
	keywords = {Computers / Software Development \& Engineering / General, Computers / Software Development \& Engineering / Quality Assurance \& Testing},
}

@book{hendrickson_software_2002,
	title = {Software {Craftsmanship}: {The} {New} {Imperative}},
	isbn = {978-0-201-73386-0},
	shorttitle = {Software {Craftsmanship}},
	abstract = {By recognizing that software development is not a mechanical task, you can create better applications. Today's software development projects are often based on the traditional software engineering model, which was created to develop large-scale defense projects. Projects that use this antiquated industrial model tend to take longer, promise more, and deliver less. As the demand for software has exploded, the software engineering establishment has attempted to adapt to the changing times with short training programs that teach the syntax of coding languages. But writing code is no longer the hard part of development; the hard part is figuring out what to write. This kind of know-how demands a skilled craftsman, not someone who knows only how to pass a certification course. Software Craftsmanship presents an alternative–a craft model that focuses on the people involved in commercial software development. This book illustrates that it is imperative to turn from the technology-for-its-own-sake model to one that is grounded in delivering value to customers. The author, Pete McBreen, presents a method to nurture mastery in the programmer, develop creative collaboration in small developer teams, and enhance communications with the customer. The end result–skilled developers who can create, extend, and enhance robust applications. This book addresses the following topics, among others: Understanding customer requirements Identifying when a project may go off track Selecting software craftsmen for a particular project Designing goals for application development Managing software craftsmen Software Craftsmanship is written for programmers who want to become exceptional at their craft and for the project manager who wants to hire them. 0201733862B07242001},
	language = {en},
	publisher = {Addison-Wesley Professional},
	author = {Hendrickson, Mike and McBreen, Pete},
	year = {2002},
	keywords = {Computers / Software Development \& Engineering / General},
}

@book{hoover_apprenticeship_2009,
	title = {Apprenticeship {Patterns}: {Guidance} for the {Aspiring} {Software} {Craftsman}},
	isbn = {978-1-4493-7940-7},
	shorttitle = {Apprenticeship {Patterns}},
	abstract = {Are you doing all you can to further your career as a software developer? With today's rapidly changing and ever-expanding technologies, being successful requires more than technical expertise. To grow professionally, you also need soft skills and effective learning techniques. Honing those skills is what this book is all about. Authors Dave Hoover and Adewale Oshineye have cataloged dozens of behavior patterns to help you perfect essential aspects of your craft.Compiled from years of research, many interviews, and feedback from O'Reilly's online forum, these patterns address difficult situations that programmers, administrators, and DBAs face every day. And it's not just about financial success. Apprenticeship Patterns also approaches software development as a means to personal fulfillment. Discover how this book can help you make the best of both your life and your career. Solutions to some common obstacles that this book explores in-depth include: Burned out at work? "Nurture Your Passion" by finding a pet project to rediscover the joy of problem solving.Feeling overwhelmed by new information? Re-explore familiar territory by building something you've built before, then use "Retreat into Competence" to move forward again.Stuck in your learning? Seek a team of experienced and talented developers with whom you can "Be the Worst" for a while."Brilliant stuff! Reading this book was like being in a time machine that pulled me back to those key learning moments in my career as a professional software developer and, instead of having to learn best practices the hard way, I had a guru sitting on my shoulder guiding me every step towards master craftsmanship. I'll certainly be recommending this book to clients. I wish I had this book 14 years ago!"-Russ Miles, CEO, OpenCredo},
	language = {en},
	publisher = {"O'Reilly Media, Inc."},
	author = {Hoover, Dave and Oshineye, Adewale},
	month = oct,
	year = {2009},
	keywords = {Computers / Software Development \& Engineering / General, Computers / Programming Languages / General},
}

@book{goodliffe_code_2007,
	title = {Code {Craft}: {The} {Practice} of {Writing} {Excellent} {Code}},
	isbn = {978-1-59327-119-0},
	shorttitle = {Code {Craft}},
	abstract = {You know how to write code that works, but what about code that\&\#39;s well written and easy to understand? And robust and bug-free? If other programmers looked at your handiwork, would they be able to figure out the code\&\#39;s logic and purpose? Exceptional programmers have more than just technical know-how; they adopt the right approach and attitude to development.Code Craft will help take your programming beyond writing correct code to writing great code, thus turning you into a true programming professional or enhancing your existing professional skills.With language-agnostic advice that\&\#39;s relevant to all developers, Code Craft covers code-writing concerns such as presentation style, variable naming, error handling, and security. And it tackles broader, real-world programming issues like effective teamwork, development processes, and documentation. Each chapter ends with a Q\&amp;A section that reviews key concepts to get you thinking like an expert, making it an especially great reference for newer programmers who want to work professionally and efficiently as part of a team.This survival guide for the software factory will show you how to:* Write good code when the world\&\#39;s not helping you* Avoid disasters and distractions in the workplace* Assess your abilities accurately and determine ways to improve* Adopt productive attitudes and follow best practicesThere\&\#39;s little more valuable than the advice of a true, programming professional. You\&\#39;ll find Code Craft to be clear, practical, and entertaining throughout, and a great way to take your code (and your career) to the next level.},
	language = {en},
	publisher = {No Starch Press},
	author = {Goodliffe, Pete},
	year = {2007},
	keywords = {Computers / Programming / General, Computers / Software Development \& Engineering / General, Computers / Programming Languages / General},
}

@book{munroe_good_2012,
	title = {Good {Code}},
	url = {https://xkcd.com/844/},
	urldate = {2021-01-28},
	author = {Munroe, Randall},
	year = {2012},
	note = {Publication Title: xkcd},
}

@book{williams_pair_2003,
	title = {Pair {Programming} {Illuminated}},
	isbn = {978-0-201-74576-4},
	abstract = {At face value, pair programming appears to be a simple, straightforward concept. Two programmers work side-by-side at one computer, continuously collaborating on the same design, algorithm, code, and test. If it was as simple as plopping two skilled programmers at one desktop, there would be no need for this book. However, there are people and personalities involved, and these people are accustomed to programming alone. Pair programming offers significant benefits: quality is increased, time is saved, morale is improved, trust and teamwork grow, knowledge is shared, and learning is enhanced. However, before any pair programming can take place, participants have to accept a new way of thinking. In Pair Programming Illuminated, Laurie Williams and Robert Kessler help you fight through the exceptions, gain collective acceptance of this approach, and experience remarkable success with it. Two case studies show pair programming in practice using Extreme Programming and Collaborative Software Process as methods.},
	language = {en},
	publisher = {Addison-Wesley Professional},
	author = {Williams, Laurie and Kessler, Robert R.},
	year = {2003},
	keywords = {Computers / Programming / General, Computers / Software Development \& Engineering / General},
}

@book{james_tao_1987,
	title = {The {Tao} of {Programming}},
	isbn = {978-0-931137-07-5},
	language = {en},
	publisher = {InfoBooks},
	author = {James, Geoffrey},
	year = {1987},
	keywords = {Computers / Programming / General},
}

@book{raymond_new_1996,
	title = {The {New} {Hacker}'s {Dictionary}},
	isbn = {978-0-262-68092-9},
	abstract = {This new edition of the hacker's own phenomenally successful lexicon includes more than 100 new entries and updates or revises 200 more. This new edition of the hacker's own phenomenally successful lexicon includes more than 100 new entries and updates or revises 200 more. Historically and etymologically richer than its predecessor, it supplies additional background on existing entries and clarifies the murky origins of several important jargon terms (overturning a few long-standing folk etymologies) while still retaining its high giggle value. Sample definition hacker n. [originally, someone who makes furniture with an axe] 1. A person who enjoys exploring the details of programmable systems and how to stretch their capabilities, as opposed to most users, who prefer to learn only the minimum necessary. 2. One who programs enthusiastically (even obsessively) or who enjoys programming rather than just theorizing about programming. 3. A person capable of appreciating \{hack value\}. 4. A person who is good at programming quickly. 5. An expert at a particular program, or one who frequently does work using it or on it; as in `a UNIX hacker'. (Definitions 1 through 5 are correlated, and people who fit them congregate.) 6. An expert or enthusiast of any kind. One might be an astronomy hacker, for example. 7. One who enjoys the intellectual challenge of creatively overcoming or circumventing limitations. 8. [deprecated] A malicious meddler who tries to discover sensitive information by poking around. Hence `password hacker', `network hacker'. The correct term is \{cracker\}. The term 'hacker' also tends to connote membership in the global community defined by the net (see \{network, the\} and \{Internet address\}). It also implies that the person described is seen to subscribe to some version of the hacker ethic (see \{hacker ethic, the\}). It is better to be described as a hacker by others than to describe oneself that way. Hackers consider themselves something of an elite (a meritocracy based on ability), though one to which new members are gladly welcome. There is thus a certain ego satisfaction to be had in identifying yourself as a hacker (but if you claim to be one and are not, you'll quickly be labeled \{bogus\}). See also \{wannabee\}.},
	language = {en},
	publisher = {MIT Press},
	author = {Raymond, Eric S. and Steele, Guy L.},
	year = {1996},
	keywords = {Computers / Reference, Computers / Computer Science, Computers / Machine Theory},
}

@book{noauthor_jargon_nodate,
	title = {The {Jargon} {File}},
	url = {http://www.catb.org/jargon/html/},
	urldate = {2021-01-28},
	file = {The Jargon File:/home/pierre/Zotero/storage/Q45D9CQS/html.html:text/html},
}

@book{gabriel_mob_2001,
	title = {Mob {Software}: {The} {Erotic} {Life} of {Code}},
	url = {https://www.dreamsongs.com/MobSoftware.html},
	urldate = {2021-01-28},
	author = {Gabriel, Richard P. and Goldman, Ron},
	year = {2001},
	note = {Publication Title: Dreamsongs.org},
	file = {Mob Software:/home/pierre/Zotero/storage/M6WYG5D4/MobSoftware.html:text/html},
}

@book{gabriel_patterns_1998,
	title = {Patterns of {Software}: {Tales} from the {Software} {Community}},
	isbn = {978-0-19-512123-0},
	shorttitle = {Patterns of {Software}},
	abstract = {In our homes, our schools, and our businesses, computers play an ever-increasing role. But while most of us today can work a computer–albeit with the help of the ever-present computer software manual–we know little about what goes on inside the box and virtually nothing about software design or the world of computer programming. In Patterns of Software, the respected software pioneer and computer scientist, Richard Gabriel, gives us an informative inside look at the world of software design and computer programming and the business that surrounds them. In this wide-ranging volume, Gabriel discusses such topics as what makes a successful programming language, how the rest of the world looks at and responds to the work of computer scientists, how he first became involved in computer programming and software development, what makes a successful software business, and why his own company, Lucid, failed in 1994, ten years after its inception. Perhaps the most interesting and enlightening section of the book is Gabriel's detailed look at what he believes are the lessons that can be learned from architect Christopher Alexander, whose books–including the seminal A Pattern Language–have had a profound influence on the computer programming community. Gabriel illuminates some of Alexander's key insights–"the quality without a name," pattern languages, habitability, piecemeal growth–and reveals how these influential architectural ideas apply equally well to the construction of a computer program. Gabriel explains the concept of habitability, for example, by comparing a program to a New England farmhouse and the surrounding structures which slowly grow and are modified according to the needs and desires of the people who live and work on the farm. "Programs live and grow, and their inhabitants–the programmers–need to work with that program the way the farmer works with the homestead." Although computer scientists and software entrepreneurs will get much out of this book, the essays are accessible to everyone and will intrigue anyone curious about Silicon Valley, computer programming, or the world of high technology.},
	language = {en},
	publisher = {Oxford University Press},
	author = {Gabriel, Richard P.},
	year = {1998},
	keywords = {Computers / Software Development \& Engineering / General},
}

@book{lions_lions_1996,
	title = {Lions' {Commentary} on {UNIX} 6th {Edition} with {Source} {Code}},
	isbn = {978-1-57398-013-5},
	abstract = {The most famous suppressed book in computer history! * Used as an Operating System textbook at MIT"After 20 years, this is still the best expostion of the workings of a 'real' operating system." — Ken Thompson (Developer of the UNIX operating system)After years of suppression (as trade secrets) by various owners of the UNIX code, this tome has been re-released, and we owe a debt to all involved in making this happen. I consider this to be the single most important book of 1996. Unix Review, June 1997"The Lions book", cherished by UNIX hackers and widely circulated as a photocopied bootleg document since the late 1970's, is again available in an unrestricted edition. This legendary underground classic, reproduced without modification, is really two works in one: the complete source code to an early version (Edition 6) of the UNIX operating system, a treasure in itself! a brilliant commentary on that code by John Lionswith additional historical perspective essays added in 1996.Lions' marriage of source code with commentary was originally used as an operating systems textbook, a purpose for which it remains superbly well-suited (as evidenced by it's ongoing use at MIT).},
	language = {en},
	publisher = {Peer-to-Peer Communications},
	author = {Lions, John},
	year = {1996},
	keywords = {Computers / Operating Systems / UNIX, Computers / Software Development \& Engineering / Systems Analysis \& Design},
}

@book{mackenzie_cutting_2006,
	title = {Cutting {Code}: {Software} and {Sociality}},
	isbn = {978-0-8204-7823-4},
	shorttitle = {Cutting {Code}},
	abstract = {Software has often been marginalized in accounts of digital cultures and network societies. Although software is everywhere, it is hard to say what it actually is. Cutting Code: Software and Sociality is one of the first books to treat software seriously as a full-blown cultural process and as a subtly powerful material in contemporary communication. From deCSS to Java, from Linux to Extreme Programming, this book analyses software artworks, operating systems, commercial products, infrastructures, and programming practices. It explores social forms, identities, materialities, and power relations associated with software, and it asks how software provokes the re-thinking of production, consumption and distribution as entwined cultural processes. Cutting Code argues that analysis of code as a mosaic of algorithms, protocols, infrastructures, and programming conventions offers valuable insights into how contemporary social formations invent new kinds of personhood and new ways of acting.},
	language = {en},
	publisher = {Peter Lang},
	author = {Mackenzie, Adrian},
	year = {2006},
	keywords = {Computers / Social Aspects, Social Science / Popular Culture, Technology \& Engineering / Social Aspects},
}

@book{seibel_coders_2009,
	title = {Coders at {Work}: {Reflections} on the {Craft} of {Programming}},
	isbn = {978-1-4302-1948-4},
	shorttitle = {Coders at {Work}},
	abstract = {Peter Seibel interviews 15 of the most interesting computer programmers alive today in Coders at Work, offering a companion volume to Apress’s highly acclaimed best-seller Founders at Work by Jessica Livingston. As the words “at work” suggest, Peter Seibel focuses on how his interviewees tackle the day-to-day work of programming, while revealing much more, like how they became great programmers, how they recognize programming talent in others, and what kinds of problems they find most interesting. Hundreds of people have suggested names of programmers to interview on the Coders at Work web site: www.codersatwork.com. The complete list was 284 names. Having digested everyone’s feedback, we selected 15 folks who’ve been kind enough to agree to be interviewed: Frances Allen: Pioneer in optimizing compilers, first woman to win the Turing Award (2006) and first female IBM fellow Joe Armstrong: Inventor of Erlang Joshua Bloch: Author of the Java collections framework, now at Google Bernie Cosell: One of the main software guys behind the original ARPANET IMPs and a master debugger Douglas Crockford: JSON founder, JavaScript architect at Yahoo! L. Peter Deutsch: Author of Ghostscript, implementer of Smalltalk-80 at Xerox PARC and Lisp 1.5 on PDP-1 Brendan Eich: Inventor of JavaScript, CTO of the Mozilla Corporation Brad Fitzpatrick: Writer of LiveJournal, OpenID, memcached, and Perlbal Dan Ingalls: Smalltalk implementor and designer Simon Peyton Jones: Coinventor of Haskell and lead designer of Glasgow Haskell Compiler Donald Knuth: Author of The Art of Computer Programming and creator of TeX Peter Norvig: Director of Research at Google and author of the standard text on AI Guy Steele: Coinventor of Scheme and part of the Common Lisp Gang of Five, currently working on Fortress Ken Thompson: Inventor of UNIX Jamie Zawinski: Author of XEmacs and early Netscape/Mozilla hacker What you’ll learnHow the best programmers in the world do their jobs! Who this book is for Programmers interested in the point of view of leaders in the field. Programmers looking for approaches that work for some of these outstanding programmers. Table of Contents Jamie Zawinski Brad Fitzpatrick Douglas Crockford Brendan Eich Joshua Bloch Joe Armstrong Simon Peyton Jones Peter Norvig Guy Steele Dan Ingalls L Peter Deutsch Ken Thompson Fran Allen Bernie Cosell Donald Knuth},
	language = {en},
	publisher = {Apress},
	author = {Seibel, Peter},
	month = sep,
	year = {2009},
	keywords = {Computers / Programming / General, Business \& Economics / Operations Research},
}

@inproceedings{tedre_development_2006,
	address = {New York, NY, USA},
	series = {Baltic {Sea} '06},
	title = {The development of computer science: a sociocultural perspective},
	isbn = {978-1-4503-7838-3},
	shorttitle = {The development of computer science},
	url = {https://doi.org/10.1145/1315803.1315808},
	doi = {10.1145/1315803.1315808},
	abstract = {Computer science is a broad discipline, and computer scientists often disagree about the content, form, and practices of the discipline. The processes through which computer scientists create, maintain, and modify knowledge in computer science—processes which often are eclectic and anarchistic—are well researched, but knowledge of those processes is generally not considered to be a part of computer science. On the contrary, I argue that understanding of how computer science works is an important part of the knowledge of an educated computer scientist. In this paper I discuss some characteristics of computer science that are central to understanding how computer science works.},
	urldate = {2021-01-28},
	booktitle = {Proceedings of the 6th {Baltic} {Sea} conference on {Computing} education research: {Koli} {Calling} 2006},
	publisher = {Association for Computing Machinery},
	author = {Tedre, Matti},
	month = feb,
	year = {2006},
	keywords = {metaknowledge in computer science, social issues, social studies of computer science},
	pages = {21--24},
}

@book{weizenbaum_computer_1976,
	address = {San Francisco},
	edition = {1st edition},
	title = {Computer {Power} and {Human} {Reason}: {From} {Judgment} to {Calculation}},
	isbn = {978-0-7167-0463-8},
	shorttitle = {Computer {Power} and {Human} {Reason}},
	abstract = {Examines the sources of the computer's powers and offers evaluative explorations of what computers can do, cannot do, and should not be employed to do. Bibliogs},
	language = {English},
	publisher = {W H Freeman \& Co},
	author = {Weizenbaum, Joseph},
	month = mar,
	year = {1976},
}

@book{collins_tacit_2010,
	title = {Tacit and {Explicit} {Knowledge}},
	isbn = {978-0-226-11382-1},
	abstract = {Much of what humans know we cannot say. And much of what we do we cannot describe. For example, how do we know how to ride a bike when we can’t explain how we do it? Abilities like this were called “tacit knowledge” by physical chemist and philosopher Michael Polanyi, but here Harry Collins analyzes the term, and the behavior, in much greater detail, often departing from Polanyi’s treatment. In Tacit and Explicit Knowledge, Collins develops a common conceptual language to bridge the concept’s disparate domains by explaining explicit knowledge and classifying tacit knowledge. Collins then teases apart the three very different meanings, which, until now, all fell under the umbrella of Polanyi’s term: relational tacit knowledge (things we could describe in principle if someone put effort into describing them), somatic tacit knowledge (things our bodies can do but we cannot describe how, like balancing on a bike), and collective tacit knowledge (knowledge we draw that is the property of society, such as the rules for language). Thus, bicycle riding consists of some somatic tacit knowledge and some collective tacit knowledge, such as the knowledge that allows us to navigate in traffic. The intermixing of the three kinds of tacit knowledge has led to confusion in the past; Collins’s book will at last unravel the complexities of the idea. Tacit knowledge drives everything from language, science, education, and management to sport, bicycle riding, art, and our interaction with technology. In Collins’s able hands, it also functions at last as a framework for understanding human behavior in a range of disciplines.},
	language = {en},
	publisher = {University of Chicago Press},
	author = {Collins, Harry},
	month = jun,
	year = {2010},
	keywords = {Social Science / Sociology / General, Science / Philosophy \& Social Aspects, Social Science / General},
}

@book{ensmenger_computer_2012,
	address = {Cambridge, Mass.},
	title = {The {Computer} {Boys} {Take} {Over}: {Computers}, {Programmers}, and the {Politics} of {Technical} {Expertise}},
	isbn = {978-0-262-51796-6},
	shorttitle = {The {Computer} {Boys} {Take} {Over}},
	abstract = {This is a book about the computer revolution of the mid-twentieth century and the people who made it possible. Unlike most histories of computing, it is not a book about machines, inventors, or entrepreneurs. Instead, it tells the story of the vast but largely anonymous legions of computer specialists–programmers, systems analysts, and other software developers–who transformed the electronic computer from a scientific curiosity into the defining technology of the modern era. As the systems that they built became increasingly powerful and ubiquitous, these specialists became the focus of a series of critiques of the social and organizational impact of electronic computing. To many of their contemporaries, it seemed the "computer boys" were taking over, not just in the corporate setting, but also in government, politics, and society in general. In The Computer Boys Take Over, Nathan Ensmenger traces the rise to power of the computer expert in modern American society. His rich},
	language = {English},
	publisher = {The MIT Press},
	author = {Ensmenger, Nathan L.},
	editor = {Aspray, William},
	month = aug,
	year = {2012},
}

@article{roskill_aesthetic_1977,
	title = {{THE} {AESTHETIC} {CONCEPT} {OF} {CRAFTSMANSHIP}*},
	volume = {17},
	issn = {0007-0904},
	url = {https://doi.org/10.1093/bjaesthetics/17.2.138},
	doi = {10.1093/bjaesthetics/17.2.138},
	number = {2},
	urldate = {2021-01-28},
	journal = {The British Journal of Aesthetics},
	author = {Roskill, Mark},
	month = feb,
	year = {1977},
	pages = {138--148},
	file = {Snapshot:/home/pierre/Zotero/storage/YQYU3ZIY/87175.html:text/html},
}

@article{mazzone_art_2019,
	title = {Art, {Creativity}, and the {Potential} of {Artificial} {Intelligence}},
	volume = {8},
	copyright = {http://creativecommons.org/licenses/by/3.0/},
	url = {https://www.mdpi.com/2076-0752/8/1/26},
	doi = {10.3390/arts8010026},
	abstract = {Our essay discusses an AI process developed for making art (AICAN), and the issues AI creativity raises for understanding art and artists in the 21st century. Backed by our training in computer science (Elgammal) and art history (Mazzone), we argue for the consideration of AICAN\&rsquo;s works as art, relate AICAN works to the contemporary art context, and urge a reconsideration of how we might define human and machine creativity. Our work in developing AI processes for art making, style analysis, and detecting large-scale style patterns in art history has led us to carefully consider the history and dynamics of human art-making and to examine how those patterns can be modeled and taught to the machine. We advocate for a connection between machine creativity and art broadly defined as parallel to but not in conflict with human artists and their emotional and social intentions of art making. Rather, we urge a partnership between human and machine creativity when called for, seeing in this collaboration a means to maximize both partners\&rsquo; creative strengths.},
	language = {en},
	number = {1},
	urldate = {2021-01-28},
	journal = {Arts},
	author = {Mazzone, Marian and Elgammal, Ahmed},
	month = mar,
	year = {2019},
	keywords = {adversarial learning, art, artificial intelligence, computational creativity, creativity, deep learning},
	pages = {26},
	file = {Full Text PDF:/home/pierre/Zotero/storage/GTKAPYKP/Mazzone and Elgammal - 2019 - Art, Creativity, and the Potential of Artificial I.pdf:application/pdf;Snapshot:/home/pierre/Zotero/storage/WPWNTQQB/26.html:text/html},
}

@article{grudin_tool_2016,
	title = {From {Tool} to {Partner}: {The} {Evolution} of {Human}-{Computer} {Interaction}},
	volume = {10},
	issn = {1946-7680},
	shorttitle = {From {Tool} to {Partner}},
	url = {https://www.morganclaypool.com/doi/abs/10.2200/S00745ED1V01Y201612HCI035},
	doi = {10.2200/S00745ED1V01Y201612HCI035},
	number = {1},
	urldate = {2021-01-28},
	journal = {Synthesis Lectures on Human-Centered Informatics},
	author = {Grudin, Jonathan},
	month = dec,
	year = {2016},
	pages = {i--183},
	file = {Submitted Version:/home/pierre/Zotero/storage/AXE8HRPG/Grudin - 2016 - From Tool to Partner The Evolution of Human-Compu.pdf:application/pdf;Snapshot:/home/pierre/Zotero/storage/UCSVM9LH/S00745ED1V01Y201612HCI035.html:text/html},
}

@phdthesis{pineiro_aesthetics_2003,
	type = {{PhD} {Thesis}},
	title = {The aesthetics of code : on excellence in instrumental action},
	shorttitle = {The aesthetics of code},
	url = {http://urn.kb.se/resolve?urn=urn:nbn:se:kth:diva-3648},
	abstract = {DiVA portal is a finding tool for research publications and student theses written at the following 49 universities and research institutions.},
	language = {eng},
	urldate = {2021-01-28},
	school = {KTH, Superseded Departments, Industrial Economics and Management.},
	author = {Pineiro, Erik},
	year = {2003},
	file = {Full Text PDF:/home/pierre/Zotero/storage/HV6KPAX2/Pineiro - 2003 - The aesthetics of code  on excellence in instrume.pdf:application/pdf;Snapshot:/home/pierre/Zotero/storage/8YQ3PG2P/record.html:text/html},
}

@book{abelson_structure_1979,
	title = {Structure and {Interpretation} of {Computer} {Programs} - 2nd {Edition}},
	abstract = {Structure and Interpretation of Computer Programs by Harold Abelson and Gerald Jay Sussman is licensed under a Creative Commons Attribution-NonCommercial 3.0 License.},
	language = {en},
	publisher = {Justin Kelly},
	author = {Abelson, Harold and Sussman, Gerald Jay and Sussman, Julie},
	year = {1979},
	keywords = {Computers / Computer Science},
}

@book{mccarthy_lisp_1965,
	title = {{LISP} 1.5 {Programmer}'s {Manual}},
	isbn = {978-0-262-13011-0},
	abstract = {The manual describes LISP, a formal mathematical language. LISP differs from most programming languages in three important ways. The first way is in the nature of the data.The LISP language is designed primarily for symbolic data processing used for symbolic calculations in differential and integral calculus, electrical circuit theory, mathematical logic, game playing, and other fields of artificial intelligence. The manual describes LISP, a formal mathematical language. LISP differs from most programming languages in three important ways. The first way is in the nature of the data. In the LISP language, all data are in the form of symbolic expressions usually referred to as S-expressions, of indefinite length, and which have a branching tree-type of structure, so that significant subexpressions can be readily isolated. In the LISP system, the bulk of the available memory is used for storing S-expressions in the form of list structures. The second distinction is that the LISP language is the source language itself which specifies in what way the S-expressions are to be processed. Third, LISP can interpret and execute programs written in the form of S-expressions. Thus, like machine language, and unlike most other high level languages, it can be used to generate programs for further executions.},
	language = {en},
	publisher = {MIT Press},
	author = {McCarthy, John and Levin, Michael I. and Abrahams, Paul W. and Center, Massachusetts Institute of Technology Computation and Edwards, Daniel J.},
	year = {1965},
	keywords = {Computers / Programming Languages / General},
}

@book{levy_programmation_1992,
	address = {Paris},
	series = {Textes à l'appui. {Anthropologie} des sciences et des techniques},
	title = {De la programmation considérée comme un des beaux-arts},
	isbn = {978-2-7071-2154-7},
	language = {français},
	publisher = {Éd. la Découverte},
	author = {Lévy, Pierre},
	year = {1992},
	keywords = {InformatiquePhilosophieOrdinateursProgrammationAspect socialProgrammation orientée objets (informatique)Aspect socialProgrammationSystèmes experts (informatique)Représentation des connaissancesIntelligence artificielle},
}

@article{seaver_captivating_2019,
	title = {Captivating algorithms: {Recommender} systems as traps},
	volume = {24},
	issn = {1359-1835},
	shorttitle = {Captivating algorithms},
	url = {https://doi.org/10.1177/1359183518820366},
	doi = {10.1177/1359183518820366},
	abstract = {Algorithmic recommender systems are a ubiquitous feature of contemporary cultural life online, suggesting music, movies, and other materials to their users. This article, drawing on fieldwork with developers of recommender systems in the US, describes a tendency among these systems’ makers to describe their purpose as ‘hooking’ people – enticing them into frequent or enduring usage. Inspired by steady references to capture in the field, the author considers recommender systems as traps, drawing on anthropological theories about animal trapping. The article charts the rise of ‘captivation metrics’ – measures of user retention – enabled by a set of transformations in recommenders’ epistemic, economic, and technical contexts. Traps prove useful for thinking about how such systems relate to broader infrastructural ecologies of knowledge and technology. As recommenders spread across online cultural infrastructures and become practically inescapable, thinking with traps offers an alternative to common ethical framings that oppose tropes of freedom and coercion.},
	language = {en},
	number = {4},
	urldate = {2021-01-28},
	journal = {Journal of Material Culture},
	author = {Seaver, Nick},
	month = dec,
	year = {2019},
	keywords = {algorithms, behaviorism, infrastructure, recommender systems, traps},
	pages = {421--436},
}

@article{perrotta_programming_2020,
	title = {Programming the platform university: {Learning} analytics and predictive infrastructures in higher education},
	issn = {0034-5237},
	shorttitle = {Programming the platform university},
	url = {https://doi.org/10.1177/0034523720965623},
	doi = {10.1177/0034523720965623},
	abstract = {This article offers a case study of how platforms and predictive infrastructures are emerging in higher education. It examines a Learning Analytics Application Programming Interface (API) from a popular Learning Management System. The API is treated firstly as an artefact based on the computational abstraction of educational principles, and secondly as an empirical entry point to investigate the emergence of a Learning Analytics infrastructure in a large Australian university. Through in-depth ethnographic interviews and the interpretative analysis of software development workflows, the paper describes an API-mediated platformisation process involving a range of actors and systems: computational experts, algorithms, data-savvy administrative staff and large corporate actors inserting themselves through back-ends and various other dependencies. In the conclusion, the article argues that the platformisation of higher education is part of a broader project that mobilises programmability and computation to re-engineer educational institutions in the interest of efficiency and prediction. However, the social-scientific study of this project cannot ignore the practical and compromised dimension where human actors and technical systems interact and, in the process, generate meaning.},
	language = {en},
	urldate = {2021-01-28},
	journal = {Research in Education},
	author = {Perrotta, Carlo},
	month = oct,
	year = {2020},
	keywords = {Application Programming Interfaces, higher education, infrastructure studies, Platforms, software studies},
	pages = {0034523720965623},
}

@book{stephenson_beginningwas_1999,
	address = {New York},
	edition = {First Paperback Edition},
	title = {In the {Beginning}...was the {Command} {Line}},
	isbn = {978-0-380-81593-7},
	abstract = {This is "the Word" – one man's word, certainly – about the art (and artifice) of the state of our computer-centric existence. And considering that the "one man" is Neal Stephenson, "the hacker Hemingway" (Newsweek) – acclaimed novelist, pragmatist, seer, nerd-friendly philosopher, and nationally bestselling author of groundbreaking literary works (Snow Crash, Cryptonomicon, etc., etc.) – the word is well worth hearing. Mostly well-reasoned examination and partial rant, Stephenson's In the Beginning... was the Command Line is a thoughtful, irreverent, hilarious treatise on the cyber-culture past and present; on operating system tyrannies and downloaded popular revolutions; on the Internet, Disney World, Big Bangs, not to mention the meaning of life itself.},
	language = {English},
	publisher = {William Morrow Paperbacks},
	author = {Stephenson, Neal},
	month = nov,
	year = {1999},
}

@article{osborne_aesthetic_1977,
	title = {The {Aesthetic} {Concept} of {Craftsmanship}},
	volume = {17},
	doi = {10.1093/bjaesthetics/17.2.138},
	number = {2},
	journal = {British Journal of Aesthetics},
	author = {Osborne, Harold},
	year = {1977},
	pages = {138},
}

@book{pye_nature_2008,
	edition = {Illustrated edition},
	title = {The {Nature} and {Art} of {Workmanship}},
	isbn = {978-0-7136-8931-0},
	abstract = {This is one of the classic books on craftsmanship and design. Init, David Pye explores the meaning of skill and its relationship todesign and manufacture. Cutting through a century of fuzzythinking, he proposes a new theory of making based on the concept ofgood workmanship and shows how it imparts all-important diversity toour visual environment.},
	language = {English},
	publisher = {Herbert Press},
	author = {Pye, David},
	editor = {Shales, Ezra},
	month = jul,
	year = {2008},
}

@article{licklider_man-computer_1960,
	title = {Man-{Computer} {Symbiosis}},
	volume = {HFE-1},
	issn = {2168-2836},
	doi = {10.1109/THFE2.1960.4503259},
	abstract = {Man-computer symbiosis is an expected development in cooperative interaction between men and electronic computers. It will involve very close coupling between the human and the electronic members of the partnership. The main aims are 1) to let computers facilitate formulative thinking as they now facilitate the solution of formulated problems, and 2) to enable men and computers to cooperate in making decisions and controlling complex situations without inflexible dependence on predetermined programs. In the anticipated symbiotic partnership, men will set the goals, formulate the hypotheses, determine the criteria, and perform the evaluations. Computing machines will do the routinizable work that must be done to prepare the way for insights and decisions in technical and scientific thinking. Preliminary analyses indicate that the symbiotic partnership will perform intellectual operations much more effectively than man alone can perform them. Prerequisites for the achievement of the effective, cooperative association include developments in computer time sharing, in memory components, in memory organization, in programming languages, and in input and output equipment.},
	number = {1},
	journal = {IRE Transactions on Human Factors in Electronics},
	author = {Licklider, J. C. R.},
	month = mar,
	year = {1960},
	keywords = {Computer languages, Insects, Performance analysis, Performance evaluation, Symbiosis, Time sharing computer systems},
	pages = {4--11},
	file = {IEEE Xplore Abstract Record:/home/pierre/Zotero/storage/R9EVGGSM/4503259.html:text/html},
}

@book{oram_beautiful_2007,
	address = {Beijing ; Sebastapol, Calif},
	edition = {1st edition},
	title = {Beautiful {Code}: {Leading} {Programmers} {Explain} {How} {They} {Think}},
	isbn = {978-0-596-51004-6},
	shorttitle = {Beautiful {Code}},
	abstract = {How do the experts solve difficult problems in software development? In this unique and insightful book, leading computer scientists offer case studies that reveal how they found unusual, carefully designed solutions to high-profile projects. You will be able to look over the shoulder of major coding and design experts to see problems through their eyes. This is not simply another design patterns book, or another software engineering treatise on the right and wrong way to do things. The authors think aloud as they work through their project's architecture, the tradeoffs made in its construction, and when it was important to break rules. Beautiful Code is an opportunity for master coders to tell their story. All author royalties will be donated to Amnesty International. tion.},
	language = {English},
	publisher = {O'Reilly Media},
	editor = {Oram, Andy and Wilson, Greg},
	month = jul,
	year = {2007},
}

@article{gabriel_search_2019,
	title = {A {Search} for {Beauty}/{A} {Struggle} with {Complexity}: {Christopher} {Alexander}},
	volume = {3},
	copyright = {http://creativecommons.org/licenses/by/3.0/},
	shorttitle = {A {Search} for {Beauty}/{A} {Struggle} with {Complexity}},
	url = {https://www.mdpi.com/2413-8851/3/2/64},
	doi = {10.3390/urbansci3020064},
	abstract = {Beauty. Christopher Alexander’s prolific journey in building, writing, and teaching was fueled by a relentless search for Beauty and its meaning. While all around him the world was intent on figuring out how to simplify, Alexander came to embrace complexity as the only path to his goal. The Beauty and life of that which he encountered and appreciated—an Indian village, a city, a subway network, an old Turkish carpet, or a campus—lay in its well-ordered complexity. As a designer and maker he found that simplicity came from choosing—at every step—the simplest way to add the necessary complexity. The failure of so much of our modern world, in Alexander’s eyes, was oversimplification, wantonly bulldozing context, misunderstanding the relationships of part and whole, ignoring the required role of time in the shaping of shapes, and ultimately dismissing, like Esau, our birthright of Value in favor of a lentil pottage of mere Fact. Ever elusive, Beauty demands of her suitors a constant return of attention to see what might be newly revealed, and Alexander duly returned again and again in pursuit of the mystery. In this essay—essentially biographical and descriptive of one man’s endeavors—we examine the full arc of his work from dissertation to most recent memoir. We don’t shy away from his failures, and we don’t simplify his journey. We leave work done by other scholars for another day. We reach no conclusion, rather, we invite readers to reflect on what Alexander’s lifelong effort suggests to them about their own path, their own sense of aesthetics and order, innate cognitive shortfalls, and professional blind alleys.},
	language = {en},
	number = {2},
	urldate = {2021-02-02},
	journal = {Urban Science},
	author = {Gabriel, Richard P. and Quillien, Jenny},
	month = jun,
	year = {2019},
	keywords = {beauty, Christopher Alexander, complexity, well-being},
	pages = {64},
	file = {Full Text PDF:/home/pierre/Zotero/storage/HSN482SQ/Gabriel and Quillien - 2019 - A Search for BeautyA Struggle with Complexity Ch.pdf:application/pdf},
}

@book{sethi_programming_1996,
	address = {Reading, Mass},
	title = {Programming {Languages}: {Concepts} and {Constructs}},
	isbn = {978-0-201-59065-4},
	shorttitle = {Programming {Languages}},
	abstract = {Thoroughly revised to provide readable coverage of the major programming paradigms. Includes an expanded discussion of object-oriented programming. DLC: Programming languages (Electronic computers)},
	language = {English},
	author = {Sethi, Ravi},
	year = {1996},
}

@article{galloway_language_2006,
	title = {Language, {Life}, {Code}},
	volume = {76},
	copyright = {Copyright © 2006 John Wiley \& Sons, Ltd.},
	issn = {1554-2769},
	url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/ad.317},
	doi = {https://doi.org/10.1002/ad.317},
	abstract = {Software increasingly determines what can be designed, constructed and even how design occurs. Here, Alexander R Galloway and Eugene Thacker present a series of investigations with the collaborative Radical Software Group (RSG). Their practice examines the nature of software code as a form of language. Addressing theoretical issues regarding meaning and representation, they argue for thinking more abstractly and generatively about language, and propose a new, or liberated, computer language in which the representational determinations implicit to any software are geared towards innovation in communication and design. By rewriting the software that allows for the transmission and translation of knowledge across previously discrete fields of production, programming allows for new and productive cross-pollination. Indeed, programming becomes a new site of design that enfolds disciplines not traditionally seen as part of the creative processes of innovation. Copyright © 2006 John Wiley \& Sons, Ltd.},
	language = {en},
	number = {5},
	urldate = {2021-02-04},
	journal = {Architectural Design},
	author = {Galloway, Alexander R. and Thacker, Eugene},
	year = {2006},
	keywords = {‘fork bomb’, ‘grammars of actions’, ‘structuralist wave’, ‘Vivre et Parler’, Ada Lovelace, Al-Khwarazmi, Bernoulli numbers, Charles Babbage's Analytical Machine, Claude Lévi-Strauss, Dawkins, DNA, François Jacob, Friedrich Kittler, Herman Hollerith, James Beniger, Jean-Joseph Goux, Joseph-Marie Jacquard, Larry Wall, Nietzsche, Perl, Philip Agre, Philippe L'Héritier, Roman Jakobson, Shannon and Weaver, Thomas Levin},
	pages = {26--29},
	file = {Snapshot:/home/pierre/Zotero/storage/3FN8CALT/ad.html:text/html},
}

@book{pratt_programming_2000,
	address = {Upper Saddle River, NJ},
	edition = {4th edition},
	title = {Programming {Languages}: {Design} and {Implementation}},
	isbn = {978-0-13-027678-0},
	shorttitle = {Programming {Languages}},
	abstract = {Exceptionally comprehensive in approach, this book explores the major issues in both design and implementation of modern programming languages and provides a basic introduction to the underlying theoretical models on which these languages are based. The emphasis throughout is on fundamental concepts—readers learn important ideas, not minor language differences–but several languages are highlighted in sufficient detail to enable readers to write programs that demonstrate the relationship between a source program and its execution behavior–e.g., C, C++, JAVA, ML, LISP, Prolog, Smalltalk, Postscript, HTML, PERL, FORTRAN, Ada, COBOL, BASIC SNOBOL4, PL/I, Pascal. Begins with a background review of programming languages and the underlying hardware that will execute the given program; then covers the underlying grammatical model for programming languages and their compilers (elementary data types, data structures and encapsulation, inheritance, statements, procedure invocation, storage management, distributed processing, and network programming). Includes an advanced chapter on language semantics–program verification, denotational semantics, and the lambda calculus. For computer engineers and others interested in programming language designs.},
	language = {English},
	publisher = {Pearson},
	author = {Pratt, Terrence W. and Zelkowitz, Marvin V.},
	month = sep,
	year = {2000},
}

@inproceedings{hoare_algebra_1993,
	address = {Los Angeles, California, United States},
	title = {Algebra and models},
	isbn = {978-0-89791-625-7},
	url = {http://portal.acm.org/citation.cfm?doid=256428.167053},
	doi = {10.1145/256428.167053},
	language = {en},
	urldate = {2021-02-05},
	booktitle = {Proceedings of the 1st {ACM} {SIGSOFT} symposium on {Foundations} of software engineering - {SIGSOFT} '93},
	publisher = {ACM Press},
	author = {Hoare, C. A. R.},
	year = {1993},
	pages = {1--8},
	file = {Algebra and models | 10.1145/256428.167053 | DeepDyve:/home/pierre/Zotero/storage/PQQEMIIX/algebra-and-models-NNts7uZykb.html:text/html},
}

@incollection{milner_semantic_1996,
	address = {United States},
	title = {Semantic ideas in computing},
	abstract = {Are there distinct principles and concepts which underlie computing, so that we are justified in calling it an independent science? Or is computing a resource or commodity – like water – which is perfectly well understood in terms of existing science, for which we merely have to find more and better uses?In this essay I argue that a rich conceptual development is in progress, to which we cannot predict limits, and whose outcome will be a distinct science. This development has all the excitement and unpredictability of any science. We cannot predict how the conceptual landscape will lie in a decade's time; the subject is still young and has many surprises in store, and there is no sure way to extrapolate from the concepts which we now understand to those which will emerge. I therefore support my argument by explaining in outline some semantic ideas which have emerged in the last two or three decades, and some which are just now emerging.I try to present the ideas here in a way which is accessible to someone with an understanding of programming and a little mathematical background. This volume aims to give a balanced picture of computer science; to achieve this, those parts which are mathematical must be presented as such. The essence of foundational work is to give precise meaning to formulations of processes and information; clearly, we should employ mathematics in this work whenever it strengthens our analytical power. Thus, rather than avoiding equations, I try to surround them with helpful narrative.It is a somewhat arbitrary matter to decide when a scientific discipline is mature and stands significantly on its own.},
	language = {English},
	booktitle = {Computing {Tomorrow}},
	publisher = {Cambridge University Press},
	author = {Milner, Robin},
	editor = {Wand, Ian and Milner, Robin},
	year = {1996},
	doi = {10.1017/CBO9780511605611.014},
	pages = {246--283},
}

@book{scott_programming_2009,
	edition = {3rd edition},
	title = {Programming {Language} {Pragmatics}},
	isbn = {978-81-312-2256-0},
	abstract = {Programming Language Pragmatics, Third Edition, is the most comprehensive programming language book available today. Taking the perspective that language design and implementation are tightly interconnected and that neither can be fully understood in isolation, this critically acclaimed and bestselling book has been thoroughly updated to cover the most recent developments in programming language design, inclouding Java 6 and 7, C++0X, C\# 3.0, F\#, Fortran 2003 and 2008, Ada 2005, and Scheme R6RS. A new chapter on run-time program management covers virtual machines, managed code, just-in-time and dynamic compilation, reflection, binary translation and rewriting, mobile code, sandboxing, and debugging and program analysis tools. Over 800 numbered examples are provided to help the reader quickly cross-reference and access content. This text is designed for undergraduate Computer Science students, programmers, and systems and software engineers.},
	language = {English},
	publisher = {Morgan Kaufmann},
	author = {Scott, Michael L.},
	month = apr,
	year = {2009},
}

@book{murray_hamlet_1997,
	title = {Hamlet on the {Holodeck}: {The} {Future} of {Narrative} in {Cyberspace}},
	isbn = {978-0-684-82723-0},
	shorttitle = {Hamlet on the {Holodeck}},
	abstract = {Stories define how we think, the way we play, and the way we understand our lives. And just as Gutenberg made possible the stories that ushered in the Modem Era, so is the computer having a profound effect on the stories of the late 20th century. Today we are confronting the limits of books themselves – anticipating the end of storytelling as we know it – even as we witness the advent of a brave new world of cyberdramas. Computer technology of the late twentieth century is astonishing, thrilling, and strange, and no one is better qualified than Janet Murray to offer a breathtaking tour of how it is reshaping the stories we live by.Can we imagine a world in which Homer's Iyre and Gutenberg's press have given way to virtual reality environments like the Star Trek® holodeck? Murray sees the harbingers of such a world in the fiction of Borges and Calvino, movies like Groundhog Day, and the videogames and Web sites of the 1990s. Where is our map for this new frontier, and what can we hope to find in it? What will it be like to step into our own stories for the first time, to change our vantage point at will, to construct our own worlds or change the outcome of a compelling adventure, be it a murder mystery or a torrid romance? Taking up where Marshall McLuhan left off, Murray offers profound and provocative answers to these and other questions.She discusses the unique properties and pleasures of digital environments and connects them with the traditional satisfactions of narrative. She analyzes the state of "immersion," of participating in a text to such an extent that you literally get lost in a story and obliterate the outside world from your awareness. She dissects the titillating effect of cyber-narratives in which stories never climax and never end, because everything is morphable, and there are always infinite possibilities for the next scene. And she introduces us to enchanted landscapes populated by witty automated characters and inventive role-playing interactors, who together make up a new kind of commedia dell'arte. Equal parts daydream and how-to, Hamlet on the Holodeck is a brilliant blend of imagination and techno-wizardry that will provoke readers and guide writers for years to come.},
	language = {en},
	publisher = {Simon and Schuster},
	author = {Murray, Janet Horowitz and {Murray}},
	year = {1997},
	keywords = {Literary Criticism / General},
}

@article{carroll_aesthetic_2002,
	title = {Aesthetic {Experience} {Revisited}},
	volume = {42},
	issn = {0007-0904},
	url = {https://doi.org/10.1093/bjaesthetics/42.2.145},
	doi = {10.1093/bjaesthetics/42.2.145},
	abstract = {In this article I divide theories of aesthetic experience into three sorts: the affectoriented approach, the axiologically oriented approach, and the content‐oriented approach. I then go on to defend a version of the content‐oriented approach.},
	number = {2},
	urldate = {2021-02-11},
	journal = {The British Journal of Aesthetics},
	author = {Carroll, Noël},
	month = apr,
	year = {2002},
	pages = {145--168},
}

@book{shusterman_aesthetic_2007,
	address = {Florence, UNITED STATES},
	title = {Aesthetic {Experience}},
	isbn = {978-0-203-93910-9},
	url = {http://ebookcentral.proquest.com/lib/nyulibrary-ebooks/detail.action?docID=325222},
	publisher = {Taylor \& Francis Group},
	author = {Shusterman, Richard and Tomlin, Adele},
	year = {2007},
	keywords = {Aesthetics., Experience.},
}

@book{baofu_future_2007,
	address = {Newcastle-upon-Tyne, UNKNOWN},
	title = {The {Future} of {Aesthetic} {Experience} : {Conceiving} a {Better} {Way} to {Understand} {Beauty}, {Ugliness}, and the {Rest}},
	isbn = {978-1-4438-0749-4},
	url = {http://ebookcentral.proquest.com/lib/nyulibrary-ebooks/detail.action?docID=1114292},
	publisher = {Cambridge Scholars Publisher},
	author = {Baofu, Peter},
	year = {2007},
	keywords = {Aesthetics.},
}

@book{lopes_understanding_1996,
	address = {Oxford : Oxford \%3B New York},
	series = {Oxford philosophical monographs},
	title = {Understanding pictures},
	copyright = {Access is restricted to users affiliated with licensed institutions.},
	isbn = {0-19-169956-X},
	language = {eng},
	publisher = {Clarendon Press ; Oxford University Press},
	author = {Lopes, Dominic},
	year = {1996},
	lccn = {95042043},
	keywords = {Aesthetics, Pictures},
}

@article{kieran_aesthetic_1997,
	title = {Aesthetic {Value}: {Beauty}, {Ugliness} and {Incoherence}},
	volume = {72},
	issn = {0031-8191},
	shorttitle = {Aesthetic {Value}},
	url = {https://www.jstor.org/stable/3751740},
	number = {281},
	urldate = {2021-02-11},
	journal = {Philosophy},
	author = {Kieran, Matthew},
	year = {1997},
	pages = {383--399},
}

@incollection{elliott_imagination_1973,
	address = {London},
	series = {Royal {Institute} of {Philosophy} {Lectures}},
	title = {Imagination in the {Experience} of {Art}},
	isbn = {978-1-349-01342-5},
	url = {https://doi.org/10.1007/978-1-349-01342-5_5},
	abstract = {In this paper I shall not be concerned with the imagination as insight, but only with certain aspects of ‘magical’ imagination, that division of the concept which centres upon the notion of an image. In the Philosophical Investigations (ii xi) Wittgenstein makes the extremely interesting remark that when a printed triangle is seen, for instance, as a mountain, it is as if an image came into contact, and for a time remained in contact, with the visual impression (i.e. with the object as seen by me). He goes on to say that in a picture a triangular figure may have some such aspect permanently — in the pictorial context we would read the figure at once as a mountain — but that we can make a distinction between ‘regarding’ and ‘seeing’ the figure as the thing meant. I take him to be contrasting those common experiences in which we see a figure in a picture as depicting a person, or as a ‘picture-person’, with those rarer experiences, referred to by art-critics when they talk of ‘presence’, in which it seems as if the person depicted in the picture is there before us ‘in the flesh’, and I assume that, like Sartre, Wittgenstein would suppose that imagination plays a part in experiences of this latter kind. In this paper I shall be concerned not with this sense of the presence of the object depicted, but chiefly with types of imaginal experience in which the image which seems to come into contact with what is perceived is an image of something which is not depicted or described in the work, but which nevertheless achieves a certain strength of presence.},
	language = {en},
	urldate = {2021-02-11},
	booktitle = {Philosophy and the {Arts}},
	publisher = {Macmillan Education UK},
	author = {Elliott, R. K.},
	editor = {Vesey, Godfrey and Mitchell, Julian and Beardsmore, R. W. and Phillips, D. Z. and Casey, John and Elliott, R. K. and Harrison, Andrew and Urmson, J. O. and Pole, David and Johnson, Oliver and Barrett, Cyril and Lyas, Colin and Dodsworth, Martin and Forge, Andrew and Hepburn, R. W.},
	year = {1973},
	doi = {10.1007/978-1-349-01342-5_5},
	pages = {88--105},
}

@book{detienne_software_2012,
	title = {Software {Design} – {Cognitive} {Aspect}},
	isbn = {978-1-4471-0111-6},
	abstract = {Software Design - Cognitive Aspects covers a variety of areas including software analysis, design, coding and maintenance. It details the history of the research that has been conducted since the 1970s in this fast-developing field before defining a computer program from a computing and cognitive psychology viewpoint. Detailed treatment is given to the two essential sides of programming; software production and software understanding and throughout the book parallels are drawn between studies on processing texts written in natural language and processing computer programs.This book will be of particular interest to researchers, practitioners and graduate students in Computer Science, Cognitive Psychology, and Cognitive Ergonomics.},
	language = {en},
	publisher = {Springer Science \& Business Media},
	author = {Detienne, Francoise},
	month = dec,
	year = {2012},
	keywords = {Computers / Information Technology, Computers / Programming / General, Computers / Software Development \& Engineering / General, Computers / Programming Languages / General},
}

@article{contini_nelson_2019,
	title = {Nelson {Goodman} and {Project} {Zero}: art, cognition, and education},
	volume = {0},
	issn = {1825-8646},
	shorttitle = {Nelson {Goodman} and {Project} {Zero}},
	url = {http://mimesisedizioni.it/journals/index.php/studi-di-estetica/article/view/768},
	abstract = {In 1967, Nelson Goodman founded Project Zero, a program of basic research into art education, which, even today, is an international reference point. This article reviews the relationships between the theses set out in Languages of art and the most original results obtained by Project Zero between 1967 and 1971, when Goodman was the director. Thus emerges the role of general symbol theory in developing an educational approach that attempts to over-come the dichotomy between art and science, between the emotive and the cognitive. The article also analyzes the effects of Goodman’s participation in Project Zero on his aesthetic-philosophical reflections, using it to interpret both the exemplar function taken on by art in Ways of worldmaking, and the emergence of new concepts such as that of “implementation”.},
	language = {en},
	number = {13},
	urldate = {2021-02-18},
	journal = {Studi di estetica},
	author = {Contini, Annamaria},
	month = jun,
	year = {2019},
	keywords = {Art education, Symbol systems, Understanding},
	file = {Full Text PDF:/home/pierre/Zotero/storage/WCNVT6UC/Contini - 2019 - Nelson Goodman and Project Zero art, cognition, a.pdf:application/pdf},
}

@book{noauthor_interpretation_2015,
	address = {Paris},
	title = {Interprétation littéraire et sciences cognitives},
	isbn = {978-2-7056-9159-2},
	language = {fre},
	publisher = {Hermann},
	year = {2015},
	keywords = {Littérature et neurosciences},
}

@inproceedings{cox_programming_2009,
	title = {Programming {Style}: {Influences}, {Factors}, and {Elements}},
	shorttitle = {Programming {Style}},
	doi = {10.1109/ACHI.2009.48},
	abstract = {As a consequence of various situational and personal factors, programmers use a variety of styles when performing software development and maintenance tasks. In this paper, we develop a contextual framework that links situational, task-oriented, and individual factors to a set of traits. These traits are expressed as behavioural modifiers, and thus, influence one's performance of tasks such as computer programming, as well as influencing the skills upon which programming is based (e.g., problem solving, planning). To demonstrate the use of the framework, we examine how risk-tolerance is influenced by contextual factors and show how this trait influences programming style. We also document some preliminary components of programming style.},
	booktitle = {2009 {Second} {International} {Conferences} on {Advances} in {Computer}-{Human} {Interactions}},
	author = {Cox, A. and Fisher, M.},
	month = feb,
	year = {2009},
	keywords = {Programming, computer programming, Cultural differences, Management information systems, Navigation, Problem-solving, Program processors, Programmer Behaviour, programming, Programming profession, Programming Strategy, programming style, Programming Style, Psychology, software development, software maintenance, Software maintenance, software maintenance tasks, Switches, Testing},
	pages = {82--89},
	file = {IEEE Xplore Abstract Record:/home/pierre/Zotero/storage/PGVJSEUY/4782496.html:text/html},
}

@incollection{vinck_mediating_1995,
	title = {Mediating and {Commissioning} {Objects} in the {Sociotechnical} {Process} of {Product} {Design} : a conceptual approach},
	shorttitle = {Mediating and {Commissioning} {Objects} in the {Sociotechnical} {Process} of {Product} {Design}},
	author = {Vinck, Dominique and Jeantet, Alain},
	month = jan,
	year = {1995},
	pages = {111--129},
	file = {Full Text PDF:/home/pierre/Zotero/storage/6L7NKK96/Vinck and Jeantet - 1995 - Mediating and Commissioning Objects in the Sociote.pdf:application/pdf},
}

@book{granger_essai_1988,
	address = {Paris},
	edition = {0 edition},
	title = {Essai d'une philosophie du style},
	isbn = {978-2-7381-0022-1},
	abstract = {309pages. in8. Broché.},
	language = {French},
	publisher = {JACOB},
	author = {Granger, Gilles-Gaston},
	month = jan,
	year = {1988},
}

@book{cox_speaking_2013,
	title = {Speaking {Code}: {Coding} as {Aesthetic} and {Political} {Expression}},
	isbn = {978-0-262-01836-4},
	shorttitle = {Speaking {Code}},
	abstract = {The aesthetic and political implications of working with code as procedure, expression, and action.Speaking Code begins by invoking the "Hello World" convention used by programmers when learning a new language, helping to establish the interplay of text and code that runs through the book. Interweaving the voice of critical writing from the humanities with the tradition of computing and software development, in Speaking Code Geoff Cox formulates an argument that aims to undermine the distinctions between criticism and practice and to emphasize the aesthetic and political implications of software studies.Not reducible to its functional aspects, program code mirrors the instability inherent in the relationship of speech to language; it is only interpretable in the context of its distribution and network of operations. Code is understood as both script and performance, Cox argues, and is in this sense like spoken language–always ready for action.Speaking Code examines the expressive and performative aspects of programming; alternatives to mainstream development, from performances of the live-coding scene to the organizational forms of peer production; the democratic promise of social media and their actual role in suppressing political expression; and the market's emptying out of possibilities for free expression in the public realm. Cox defends language against its invasion by economics, arguing that speech continues to underscore the human condition, however paradoxical this may seem in an era of pervasive computing.},
	language = {en},
	publisher = {MIT Press},
	author = {Cox, Geoff and McLean, Christopher Alex},
	year = {2013},
	keywords = {Computers / Programming / General, Computers / Programming Languages / General, Social Science / Media Studies},
}

@book{crowthers_colossal_1977,
	title = {Colossal {Cave} {Adventure}},
	author = {Crowthers, Will},
	year = {1977},
}

@book{cramer_words_2003,
	title = {Words {Made} {Flesh}},
	publisher = {Piet Zwart Institute},
	author = {Cramer, Florian},
	year = {2003},
}

@book{3130431_transcoding_nodate,
	title = {Transcoding the {Digital}: {How} {Metaphors} {Matter} in {New} {Media}},
	shorttitle = {Transcoding the {Digital}},
	url = {https://issuu.com/instituteofnetworkcultures/docs/tod14-binnenwerk-def-pdf},
	abstract = {Transcoding the Digital: How Metaphors Matter in New Media by Marianne van den Boomen is a material-semiotic inquiry into the constitutive role of metaphors in our daily encounters with computers and networks. While interface concepts such as desktop and windows are easily recognized as metaphors, this research shows how in fact all digital sign-tool-objects – ranging from icons and email to Facebook friends, from hyperlink and tweet to Pirate Bay – are digital-material metaphors. They frame and organize how we access the black boxes of software and machinery, which in turn organize and reconfigure society. The same holds for discourse metaphors such as virtual community, cyberspace, Web 2.0, and social network. Metaphors matter in digital praxis, literally. This study makes an intervention into the contemporary theory of metaphor by extending it with the notion of material metaphor, including a manifest for hacking digital-material metaphors.},
	language = {en},
	urldate = {2021-03-23},
	author = {{3130431}},
	note = {Publication Title: Issuu},
	file = {Snapshot:/home/pierre/Zotero/storage/E8T86WLU/tod14-binnenwerk-def-pdf.html:text/html},
}

@book{cramer_executupable_2019,
	title = {Exe.cut(up)able statements: {Poetische} {Kalküle} und {Phantasmen} des selbstausführenden {Texts}},
	isbn = {978-3-8467-4499-4},
	shorttitle = {Exe.cut(up)able statements},
	url = {https://www.fink.de/view/title/41001},
	abstract = {"Exe.cut(up)able statements" published on 09 Dec 2019 by Wilhelm Fink.},
	language = {de},
	urldate = {2021-03-23},
	publisher = {Wilhelm Fink},
	author = {Cramer, Florian},
	month = dec,
	year = {2019},
	file = {Snapshot:/home/pierre/Zotero/storage/N3L6S7HS/41001.html:text/html},
}

@book{goriunova_read_2005,
	address = {Aarhus},
	edition = {2004th edition},
	title = {Read {Me}: {Software} {Art} \& {Cultures}},
	isbn = {978-87-988440-4-4},
	shorttitle = {Read {Me}},
	abstract = {Software art is a practice that regards software as a cultural phenomenon that defines one of the principal domains of our existence today. Thus, software is not regarded as an invisible layer, but rather as a decisive level and a language working at reproduction of certain orders, whether aesthetic, cultural, social or political. Software art creatively questions and redefines software and its ways of functioning.},
	language = {English},
	publisher = {Aarhus University Press},
	author = {Goriunova, Olga and Shulgin, Alexei},
	month = dec,
	year = {2005},
}

@book{flusser_doubt_2014,
	title = {On {Doubt}},
	isbn = {978-1-937561-24-6},
	url = {https://www.jstor.org/stable/10.5749/j.ctt16d698p},
	abstract = {In \textit{On Doubt} , Vilém Flusser refines Martin Heidegger's famous declaration that "language is the dwelling of Being." For Flusser, "the word is the dwelling of being," because in fact, in the beginning, there was the word. \textit{On Doubt} is a treatise on the human intellect, its relation to language, and the reality-forming discourses that subsequently emerge. For Flusser, the faith that the modern age places in Cartesian doubt plays a role similar to the one that faith in God played in previous eras-a faith that needs to be challenged. Descartes doubts the world through his proposition \textit{cogito ergo sum} , but leaves doubt itself untouched as indubitable and imperious. His \textit{cogito ergo sum} may have proved to the Western intellect that thoughts exist, but it did not prove the existence of that which thinks: one can eliminate thinking and yet continue being. Therefore, should we not doubt doubt itself? Should we not try to go beyond this last step of Cartesian doubt and look for a new faith? The twentieth century has seen many attempts to defeat Cartesian doubt, however, this doubt of doubt has instead generated a complete loss of faith, which the West experiences as existential nihilism. Hence, the emergent emptying of values that results from such extreme doubt. Everything loses its meaning. Can this climate be overcome? Will the West survive the modern age?},
	urldate = {2021-03-24},
	publisher = {University of Minnesota Press},
	author = {FLUSSER, VILÉM and Novaes, Rodrigo Maltez},
	editor = {Zielinski, Siegfried},
	year = {2014},
}

@article{hopkins_camels_1992,
	title = {Camels and {Needles}: {Computer} {Poetry} {Meets} the {Perl} {Programming} {Language}},
	journal = {Usenix Technical Conference},
	author = {Hopkins, Sharon},
	year = {1992},
}

@book{paloque-berges_poetique_2009,
	title = {Poétique des codes sur le réseau informatique},
	isbn = {978-2-914610-70-4},
	abstract = {L'ordinateur est devenu un terrain de jeu expérimental où les instructions des codes informatiques ne sont plus simplement outil mais sujet et objet d'une approche esthétique des mondes numériques. Cette étude entend mettre à jour les systèmes de règles de lectures de ces écritures hybrides où l'exercice de style le dispute à l'exercice conceptuel.–[Memento].},
	language = {fr},
	publisher = {Archives contemporaines},
	author = {Paloque-Bergès, Camille},
	year = {2009},
}

@book{bootz_problem_2005,
	title = {The {Problem} of {Form} {Transitoire} {Observable}, {A} {Laboratory} {For} {Emergent} {Programmed} {Art}},
	url = {http://www.dichtung-digital.de/2005/1/Bootz/index.htm},
	urldate = {2019-07-04},
	author = {Bootz, Philippe},
	year = {2005},
}

@book{bogost_rhetoric_2007,
	title = {The {Rhetoric} of {Video} {Games}},
	url = {/paper/The-Rhetoric-of-Video-Games-Bogost/58b92904ce0d37ab1726e40db881f02529039bd7},
	abstract = {Animal Crossing is an “animal village simulator” for the Nintendo GameCube and DS video game consoles.1 As the game begins, the player has just left home to move to the game’s small village. There he meets a host of cartoonish animal residents and settles into a new life. The player is penniless upon arrival, and the game quickly thrusts him into the reality of making ends meet. The village’s resident real estate tycoon and shopkeeper, Tom Nook, helps the player out, offering him a small shack to live in and a job of planting trees, delivering goods, and creating marketing materials on the town notice board (see figure 1). After completing these chores, Nook releases the player to explore the town on his own. He may then work, trade, and personalize his environment. The game offers a series of innocuous, even mundane activities like bug catching, gardening, and wallpaper designing. One of the more challenging projects in the game is paying off the mortgage on one’s house. Animal Crossing allows players to upgrade their homes, but doing so requires paying off a large note the player must take out to start the game in the first place. The player must then pay down renovation mortgages for even larger sums.2 While the game omits some of the more punitive intricacies of long-term debt, such as compounding interest, improving one’s home does require consistent work in the game world. Catching fish, hunting for fossils, finding insects, and doing jobs for other townsfolk all produce income that can be used to pay off mortgage debt or to buy carpets, furniture, and objects to decorate one’s house. When my then five-year-old began playing the game seriously, he quickly recognized the dilemma he faced. On the one hand, he wanted to spend the money he had earned from collecting fruit and bugs on new furniture, carpets, and shirts. On the other hand, he wanted to pay off his house so he could get a bigger one like mine. Once he managed to amass enough savings to pay off his mortgage, Tom Nook offered to expand his house. While it is possible to refrain from upgrading, the unassuming raccoon continues to offer renovations as frequently as the player visits his store. My son began to realize the dilemma facing him: the more material possessions he took on, the more space he needed, and the more debt he had to assume to provide that space. And the additional space just fueled more material acquisitions, continuing the loop. This link between debt and acquisition gives form to a routine that many mortgage holders fail to recognize: buying more living space not only creates more debt, it also drives the impulse to acquire more goods. More goods demand even more space, creating a vicious cycle.},
	language = {en},
	urldate = {2021-03-25},
	author = {Bogost, I.},
	year = {2007},
	file = {Snapshot:/home/pierre/Zotero/storage/7LZTD9EB/58b92904ce0d37ab1726e40db881f02529039bd7.html:text/html},
}

@inproceedings{tirrell_dumb_2012,
	title = {Dumb {People}, {Smart} {Objects}: {The} {Sims} and {The} {Distributed} {Self}},
	booktitle = {The {Philosophy} of {Computer} {Games} {Conference}},
	author = {Tirrell, Jeremy},
	year = {2012},
}

@book{van_den_boomen_transcoding_2014,
	title = {Transcoding the digital : how metaphors matter in new media},
	copyright = {Amsterdam},
	shorttitle = {Transcoding the digital},
	url = {http://localhost/handle/1874/289883},
	abstract = {This study traces the role of metaphors in digital praxis. Digital praxis refers to a more or less coherent set of everyday practices – acts, habits, routines – that involve the manipulation, modification, and construction of digital-symbolical objects. Examples of these digital-symbolical objects are mundane things as mailbox, menu, and file, but also more complicated assemblages such as Windows, Facebook profiles, search engines, and online communities. Digital-symbolical objects form an onto-epistemological riddle since they are neither pure objects, nor pure symbolic forms, nor pure digital patterns or numbers. They are hybrids of computation, algorithms, and language: artifacts cut out of arbitrarily assigned numbers, processed by machines and humans, represented, symbolized, ontologized, and incorporated in social texture. The riddle, then, is: how do such composites of computer code and cultural code come about and get stabilized? And how do metaphors contribute to (or perhaps counter) these processes? In order to analyze the constitutive role of metaphors this investigation draws upon contemporary metaphor theory (Lakoff 1987; 1993; Lakoff and Johnson 1980), combined with insights from actor-network theory, new media studies, and material semiotics. From actor-network theory the notion of translation is mobilized in order to trace the heterogeneous actors that get aligned into stable ontologies (Callon 1986; Latour 2005; Law 2009), from new media studies the notion of transcoding in order to take computer code, software, explicitly on board (Manovich 2001), and from material semiotics the concept of material metaphor in order to account for the object-like properties of digital entities (Ray 1987; Hayles 2002). The leading research questions are: 1. Which digital-material transcodings and material-semiotic translations can be traced if we follow metaphors as actors? 2. How do such transcodings and translations get fixated into stable taken-for-granted entities and naturalized matters of facts? 3. Which further translations are attached to the transcoding labor of metaphors; which ideologies, narratives and discourses are enabled and sustained, which are suppressed and excluded? The analyses discuss conceptual metaphors that render the interface comprehensible (such as mailbox, page, hyperlink), discourse metaphors that organize popular and academic discourses (media as a window, mirror, container or channel, the Internet as electronic highway vs. cyberspace, software as thing or language), and material metaphors, which are objectified and materialized into software design (virtual community, Web 2.0, social networks). As it turns out, metaphors largely determine our access and interaction with new media and ICT. They not only format how we conceive what is possible and impossible with our computers, they also affect speech, discourse, and action in a wider context. As such they shape and direct public debates, academic discourses, technological innovations, and ideological subject positions. Saliently, the most dominant metaphors do so usually by making the medium, software, and networks invisible, that is, by obscuring and ignoring their materiality. A meticulous analysis in terms of digital-material metaphors can bring this back into the picture, by employing a methodology of what can be called analytical reverse engineering, or hacking metaphors.},
	language = {en},
	urldate = {2021-03-27},
	author = {van den Boomen, M. V. T.},
	month = feb,
	year = {2014},
	note = {Type: Dissertation},
	file = {Full Text PDF:/home/pierre/Zotero/storage/CT259W5A/van den Boomen - 2014 - Transcoding the digital  how metaphors matter in .pdf:application/pdf;Snapshot:/home/pierre/Zotero/storage/5FUV58J5/289883.html:text/html},
}

@article{mcgaughey_ricoeurs_1988,
	title = {Ricoeur's {Metaphor} and {Narrative} {Theories} as a {Foundation} for a {Theory} of {Symbol}},
	volume = {24},
	issn = {0034-4125},
	url = {https://www.jstor.org/stable/20019302},
	number = {4},
	urldate = {2021-03-27},
	journal = {Religious Studies},
	author = {McGaughey, Douglas R.},
	year = {1988},
	pages = {415--437},
}

@article{lakoff_conceptual_1980,
	title = {Conceptual {Metaphor} in {Everyday} {Language}},
	volume = {77},
	url = {https://escholarship.org/uc/item/2p93q7nr},
	abstract = {Author(s): Lakoff, George},
	language = {en},
	number = {8},
	urldate = {2021-03-27},
	journal = {The Journal of Philosophy},
	author = {Lakoff, George},
	month = aug,
	year = {1980},
	file = {Full Text PDF:/home/pierre/Zotero/storage/2U284Z2T/Lakoff - 1980 - Conceptual Metaphor in Everyday Language.pdf:application/pdf;Snapshot:/home/pierre/Zotero/storage/NEXYYN5X/2p93q7nr.html:text/html},
}

@book{lakoff_metaphors_1980,
	title = {Metaphors {We} {Live} {By}},
	isbn = {978-0-226-46801-3},
	url = {https://press.uchicago.edu/ucp/books/book/chicago/M/bo3637992.html},
	abstract = {The now-classic Metaphors We Live By changed our understanding of metaphor and its role in language and the mind. Metaphor, the authors explain, is a fundamental mechanism of mind, one that allows us to use what we know about our physical and social experience to provide understanding of countless other subjects. Because such metaphors structure our most basic understandings of our experience, they are "metaphors we live by"—metaphors that can shape our perceptions and actions without our ever noticing them.In this updated edition of Lakoff and Johnson’s influential book, the authors supply an afterword surveying how their theory of metaphor has developed within the cognitive sciences to become central to the contemporary understanding of how we think and how we express our thoughts in language.},
	urldate = {2021-03-27},
	publisher = {University of Chicago Press},
	author = {Lakoff, George},
	year = {1980},
	file = {Snapshot:/home/pierre/Zotero/storage/XHTRTCX7/bo3637992.html:text/html},
}

@book{ricoeur_rule_2003,
	title = {The {Rule} of {Metaphor}: {The} {Creation} of {Meaning} in {Language}},
	isbn = {978-0-415-31280-6},
	shorttitle = {The {Rule} of {Metaphor}},
	abstract = {A fruitful and insightful study of how language affects how we understand the world, this book is also an indispensable work for all those seeking to retrieve some kind of meaning in uncertain times.Paul Ricoeur is widely regarded as one of the most distinguished philosophers of our time. In The Rule of Metaphor this intellectual giant of our age seeks 'to show how language can extend itself to its very limits, forever discovering new resonances within itself'.Recognizing the fundamental power of language in constructing the world we perceive, Ricoeur reveals the processes by which linguistic imagination creates and recreates meaning through metaphor. Taking further his acclaimed analysis of the power of myth and symbol, Ricoeur invites us to explore the many layers of language in order to rediscover what that meaning might be. A fruitful and insightful study of how language affects how we understand the world, this book is also an indispensable work for all those seeking to retrieve some kind of meaning in uncertain times.},
	language = {en},
	publisher = {Psychology Press},
	author = {Ricoeur, Paul},
	year = {2003},
}

@article{rapaport_philosophy_2005,
	title = {Philosophy of {Computer} {Science}: {An} {Introductory} {Course}},
	volume = {28},
	shorttitle = {Philosophy of {Computer} {Science}},
	doi = {teachphil200528443},
	number = {4},
	journal = {Teaching Philosophy},
	author = {Rapaport, William J.},
	year = {2005},
	pages = {319--341},
}

@book{gibson_ecological_1986,
	title = {The {Ecological} {Approach} to {Visual} {Perception}},
	isbn = {978-0-89859-959-6},
	abstract = {This is a book about how we see: the environment around us (its surfaces, their layout, and their colors and textures); where we are in the environment; whether or not we are moving and, if we are, where we are going; what things are good for; how to do things (to thread a needle or drive an automobile); or why things look as they do.  The basic assumption is that vision depends on the eye which is connected to the brain. The author suggests that natural vision depends on the eyes in the head on a body supported by the ground, the brain being only the central organ of a complete visual system. When no constraints are put on the visual system, people look around, walk up to something interesting and move around it so as to see it from all sides, and go from one vista to another. That is natural vision -- and what this book is about.},
	language = {en},
	publisher = {Psychology Press},
	author = {Gibson, James Jerome},
	year = {1986},
	note = {Google-Books-ID: DrhCCWmJpWUC},
	keywords = {Psychology / Experimental Psychology},
}

@article{beardsley_aesthetic_1970,
	title = {The {Aesthetic} {Point} of {View}*},
	volume = {1},
	issn = {1467-9973},
	url = {https://onlinelibrary.wiley.com/doi/abs/10.1111/j.1467-9973.1970.tb00784.x},
	doi = {https://doi.org/10.1111/j.1467-9973.1970.tb00784.x},
	language = {en},
	number = {1},
	urldate = {2021-03-28},
	journal = {Metaphilosophy},
	author = {Beardsley, Monroe C.},
	year = {1970},
	note = {\_eprint: https://onlinelibrary.wiley.com/doi/pdf/10.1111/j.1467-9973.1970.tb00784.x},
	pages = {39--58},
	file = {Snapshot:/home/pierre/Zotero/storage/EHGJZNFG/j.1467-9973.1970.tb00784.html:text/html},
}

@book{polanyi_tacit_2009,
	address = {Chicago ; London},
	edition = {Revised ed. edition},
	title = {The {Tacit} {Dimension}},
	isbn = {978-0-226-67298-4},
	abstract = {“I shall reconsider human knowledge by starting from the fact that we can know more than we can tell,” writes Michael Polanyi, whose work paved the way for the likes of Thomas Kuhn and Karl Popper. The Tacit Dimension argues that tacit knowledge—tradition, inherited practices, implied values, and prejudgments—is a crucial part of scientific knowledge. Back in print for a new generation of students and scholars, this volume challenges the assumption that skepticism, rather than established belief, lies at the heart of scientific discovery.“Polanyi’s work deserves serious attention. . . . [This is a] compact presentation of some of the essentials of his thought.”—Review of Metaphysics“Polanyi’s work is still relevant today and a closer examination of this theory that all knowledge has personal and tacit elements . . . can be used to support and refute a variety of widely held approaches to knowledge management.”—Electronic Journal of Knowledge"The reissuing of this remarkable book give us a new opportunity to see how far-reaching—and foundational—Michael Polanyi's ideas are, on some of the age-old questions in philosophy."—Amartya Sen, from the new Foreword},
	language = {English},
	publisher = {University of Chicago Press},
	author = {Polanyi, Michael and Sen, Amartya},
	month = may,
	year = {2009},
}

@book{gay_doing_2013,
	address = {Los Angeles, CA},
	edition = {Second edition},
	title = {Doing {Cultural} {Studies}: {The} {Story} of the {Sony} {Walkman}},
	isbn = {978-1-84920-550-4},
	shorttitle = {Doing {Cultural} {Studies}},
	abstract = {"Arguably the most famous book in its field... In theoretical terms, the legacy of Doing Cultural Studies confirms that this classic read is not just about the Walkman itself, but represents a series of clear observations about the symbolic meanings of culture." - LSE Review of Books  Why think about the Walkman in the 21st century? Can the Walkman help us understand today’s media and cultural practices? Through the notion of the ′circuit of culture′, this book teaches students to critically examine what culture means, and how and why it is enmeshed with the media texts and objects in their lives. Students will:   Unpack the key concepts of contemporary culture, such as mobility, materiality, consumption and identity Learn to think about some of the cultural conundrums of the present and their relation to the past, such as branding culture Look with fresh eyes at today′s media world and the cultural practices it gives rise to Gain practical experience with the historical comparative method Practice their critical skills with up-to-date exercises and activities   This book takes students on a journey between past and present, giving them the skills do to cultural analysis along the way. It remains the perfect ′how to′ for students in media studies, cultural studies, design and sociology.},
	language = {English},
	publisher = {SAGE Publications Ltd},
	author = {Gay, Paul du and Hall, Stuart and Janes, Linda and Madsen, Anders Koed and Mackay, Hugh and Negus, Keith},
	month = jun,
	year = {2013},
}

@book{galloway_interface_2012-1,
	address = {Cambridge, UK ; Malden, MA},
	edition = {1st edition},
	title = {The {Interface} {Effect}},
	isbn = {978-0-7456-6253-4},
	abstract = {Interfaces are back, or perhaps they never left. The familiar Socratic conceit from the Phaedrus, of communication as the process of writing directly on the soul of the other, has returned to center stage in today's discussions of culture and media. Indeed Western thought has long construed media as a grand choice between two kinds of interfaces. Following the optimistic path, media seamlessly interface self and other in a transparent and immediate connection. But, following the pessimistic path, media are the obstacles to direct communion, disintegrating self and other into misunderstanding and contradiction. In other words, media interfaces are either clear or complicated, either beautiful or deceptive, either already known or endlessly interpretable. Recognizing the limits of either path, Galloway charts an alternative course by considering the interface as an autonomous zone of aesthetic activity, guided by its own logic and its own ends: the interface effect. Rather than praising user-friendly interfaces that work well, or castigating those that work poorly, this book considers the unworkable nature of all interfaces, from windows and doors to screens and keyboards. Considered allegorically, such thresholds do not so much tell the story of their own operations but beckon outward into the realm of social and political life, and in so doing ask a question to which the political interpretation of interfaces is the only coherent answer. Grounded in philosophy and cultural theory and driven by close readings of video games, software, television, painting, and other images, Galloway seeks to explain the logic of digital culture through an analysis of its most emblematic and ubiquitous manifestation – the interface.},
	language = {English},
	publisher = {Polity},
	author = {Galloway, Alexander R.},
	month = sep,
	year = {2012},
}

@book{nelson_marxism_1988,
	address = {Urbana},
	edition = {Reprint edition},
	title = {Marxism and the {Interpretation} of {Culture}},
	isbn = {978-0-252-01401-7},
	language = {English},
	publisher = {University of Illinois Press},
	author = {Grossberg, Lawrence and Lefebvre, Henri and Mouffe, Chantal and MacKinnon, Catharine A. and Balibar, Etienne and Petrovic, Gajo and Frith, Simon and Eagleton, Terry and Franco, Jean},
	editor = {Nelson, Cary},
	month = oct,
	year = {1988},
}

@book{winograd_language_1982,
	address = {Reading, Mass},
	title = {Language {As} a {Cognitive} {Process}: {Syntax}},
	isbn = {978-0-201-08571-6},
	shorttitle = {Language {As} a {Cognitive} {Process}},
	abstract = {Hardback.  No writing n book.  No damage to book cover.  Found in a storage box.},
	language = {English},
	publisher = {Addison-Wesley},
	author = {Winograd, Terry},
	month = may,
	year = {1982},
}

@article{kintsch_toward_1978,
	title = {Toward a model of text comprehension and production},
	volume = {85},
	issn = {1939-1471(Electronic),0033-295X(Print)},
	doi = {10.1037/0033-295X.85.5.363},
	abstract = {Argues that the semantic structure of texts can be described both at the local microlevel and at a more global macrolevel. A model for text comprehension based on this notion accounts for the formation of a coherent semantic text base in terms of a cyclical process constrained by limitations of working memory. Furthermore, the model includes macro-operators, whose purpose is to reduce the information in a text base to its gist—the theoretical macrostructure. These operations are under the control of a schema, which is a theoretical formulation of the comprehender's goals. The macroprocesses are predictable only when the control schema can be made explicit. On the production side, the model is concerned with the generation of recall and summarization protocols. This process is partly reproductive and partly constructive, involving the inverse operation of the macro-operators. The model is applied to a paragraph from a psychological research report, and methods for the empirical testing of the model are developed. (55 ref) (PsycINFO Database Record (c) 2016 APA, all rights reserved)},
	number = {5},
	journal = {Psychological Review},
	author = {Kintsch, Walter and van Dijk, Teun A.},
	year = {1978},
	note = {Place: US
Publisher: American Psychological Association},
	keywords = {Cognitive Processes, Human Information Storage, Memory, Models, Reading Comprehension, Recall (Learning)},
	pages = {363--394},
	file = {Snapshot:/home/pierre/Zotero/storage/67L7ZHZV/1979-22783-001.html:text/html;Full Text:/home/pierre/Zotero/storage/BCCGIYQZ/Kintsch and van Dijk - 1978 - Toward a model of text comprehension and productio.pdf:application/pdf},
}

@book{chomsky_aspects_1965,
	title = {Aspects of the theory of syntax},
	isbn = {978-0-262-53007-1},
	url = {http://archive.org/details/aspectsoftheoryo00chom},
	abstract = {Bibliography: p. 237-245},
	language = {eng},
	urldate = {2021-03-29},
	publisher = {Cambridge, M.I.T. Press},
	author = {Chomsky, Noam},
	collaborator = {{Internet Archive}},
	year = {1965},
	keywords = {Grammar, Comparative and general},
}

@incollection{forsythe_cathedrals_1986,
	address = {Dordrecht},
	title = {Cathedrals in the {Mind}: {The} {Architecture} of {Metaphor} in {Understanding} {Learning}},
	isbn = {978-94-009-4634-7},
	shorttitle = {Cathedrals in the {Mind}},
	url = {https://doi.org/10.1007/978-94-009-4634-7_37},
	abstract = {The pervasiveness of metaphor in our conceptual system suggests a central and basic role in the underlying architecture of thought. Metaphor represents the ability to understand one thing in terms of another as we ascribe an understood pattern to an unknown phenomena and perceive their structural integrity within the environment of our experience. We can then begin to perceive the environment of learning as one in which analogical thinking serves as architecture, analytical thinking serves as engineering and the imagination ensures that the interactions which create life and meaning are always being realized anew. The implications for this approach to applied epistemology provides insight into the design and development of learning systems that support the creative nature of learning.},
	language = {en},
	urldate = {2021-03-29},
	booktitle = {Cybernetics and {Systems} ’86: {Proceedings} of the {Eighth} {European} {Meeting} on {Cybernetics} and {Systems} {Research}, organized by the {Austrian} {Society} for {Cybernetic} {Studies}, held at the {University} of {Vienna}, {Austria}, 1–4 {April} 1986},
	publisher = {Springer Netherlands},
	author = {Forsythe, Kathleen},
	editor = {Trappl, Robert},
	year = {1986},
	doi = {10.1007/978-94-009-4634-7_37},
	keywords = {Conceptual System, Conscious Architect, Conversation Theory, Pattern Language, Unknown Phenomenon},
	pages = {285--292},
}
