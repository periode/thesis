;   WhichWay;    BLANKS ON    STRING ASISHIBYTE FUNC      EXPORT      MOVE.L    (A7)+,A0	      ;return address     MOVE.W    (A7)+,D0	      ;input value     MOVE.W    (A7)+,D1	      ;return value -- throw away     LSR.W     #8,D0	      ;shift down high byte     ANDI.W    #$FF,D0	      ;just for safety's sake     EXT       D0     MOVE.W    D0,-(A7)     JMP       (A0)LOBYTE FUNC      EXPORT      MOVE.L    (A7)+,A0	      ;return address     MOVE.W    (A7)+,D0	      ;input value     MOVE.W    (A7)+,D1	      ;return value -- throw away     ANDI.W    #$FF,D0	      ;isolate low byte     EXT       D0     MOVE.W    D0,-(A7)     JMP       (A0)DISSOLVE PROC      EXPORT      LINK      A6,#0     MOVEM.L   D0-D4/A0-A5,-(A7)     MOVE.L    $8(A6),A4      ;MaskArr     MOVE.L    $C(A6),A5      ;IndexArr     MOVE.L    $10(A6),A3     ;OutArr     MOVE.L    $14(A6),A2     ;ToArr     MOVE.L    $18(A6),A1     ;FromArr     MOVE.W    $1C(A6),D3     ;dissolve index     MOVE.W    #1150,D2	      ;index for pixel arrayLP10 MOVE.W    0(A1,D2),D0    ;get From pixels     MOVE.W    0(A2,D2),D1    ;get To pixels     EOR.W     D1,D0     MOVE.W    0(A5,D2),D4    ;index element     ADD.W     D3,D4	      ;offset by dissolve index     MOVE.W    0(A4,D4),D4    ;get random value     AND.W     D4,D0     EOR.W     D1,D0     MOVE.W    D0,0(A3,D2)    ;store result into OutArr     SUBQ      #2,D2	      ;next pixel element     BPL.S     LP10     MOVEM.L   (A7)+,D0-D4/A0-A5     UNLK      A6     MOVE.L    (A7)+,A0     ADDA.L    #22,A7     JMP       (A0)MYSQRT FUNC      EXPORT      MOVE.L    (A7)+,A0	      ;return address     MOVE.L    (A7)+,D0	      ;value whose square root is desired     BNE.S     X1	      ;if zero, return     JMP       (A0)X1   MOVE      (A7)+,D1	      ;clear function return value off stack     MOVE.L    D3,-(A7)	      ;save register D3     MOVEQ     #0,D1	      ;clear D1     MOVEQ     #$20,D2	      ;set bit counter in D2LP2  SUBQ      #1,D2	      ;decrement bit counter     ADDQ      #1,D1	      ;increment return counter     ROL.L     #1,D0	      ;shift once     BCC.S     LP2	      ;if bit isn't set, keep shifting     ROR.L     D1,D0	      ;restore D0 to original setting     LSR       #1,D2	      ;halve bit count for square root     ;for the remainder of the code, the registers hold:     ;	 D0:  trial square root, trial square     ;	 D1:  trial square root     ;	 D2:  bit counter     ;	 D3:  true square value     MOVE.L    D0,D3	      ;set up true square value     MOVEQ     #1,D1	      ;initialize trial square value     ROL       D2,D1LP3  MOVE      D1,D0	      ;move trial square root into D0 for multiplication     MULU      D1,D0     CMP.L     D0,D3	      ;compare square with input value     BEQ.S     X2	      ;if equal, we've got it     BCC.S     X3	      ;if trial value is too small, retain this bit     MOVEQ     #1,D0	      ;trial value is too large, delete this bit     ROL       D2,D0	      ;select the bit     EOR       D0,D1	      ;strip the bit out of D1X3   SUBQ      #1,D2	      ;next lower bit     BMI.S     X2	      ;if that was last bit, quit     MOVEQ     #1,D0	      ;set up the next bit to or in     ROL       D2,D0	      ;move bit into position     OR	       D0,D1	      ;or this bit into trial square root     BRA.S     LP3	      ;try this value out for sizeX2   MOVE.L    (A7)+,D3	      ;restore D3     MOVE      D1,-(A7)	      ;return function result     JMP       (A0)	      ;...and into the sunset...     END