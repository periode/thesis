PROGRAM ArmsRace;USES{$L-}{$U-}	 {$LOAD MQOTP.dumpfile}			 Memtypes, QuickDraw, OSIntf, ToolIntf, PackIntf,	 {$LOAD BOPGlobals.dumpfile}		 {$U Globals.p}	Globals,	 {$LOAD}		 {$U Init.p}		Init,		 {$U History.p} History,		 {$U Titles.p}	Titles,		 {$U Background.p} Background,		 {$U StdRoutines.p} StdRoutines,		 {$U Crisis.p} CrisisU,		 {$U PlanMove.p} PlanMove;{$U+}{$E+}{$L+}{$ASM+}{$D-}{$R-}{$OV-}{$SETC DebugFlg=FALSE}{$IFC DebugFlg}	{$D+}	{$R+}	{$OV+}{$ENDC}{***********************************************************************}{$S Chris}{***********************************************************************}PROCEDURE GagaWindow;BEGIN	SaveMap;	ClearRect(1,100,200,340);	IF TwoPFlag THEN		BEGIN			MoveTo(90,340); 			TextFont(0);			IF Human=1 THEN DrawString('USA holds mouse') 								 ELSE DrawString('USSR holds mouse');		END;	MyWind:=GetNewWindow(130,NIL,POINTER(-1));	SetPort(MyWind);END;{***********************************************************************}PROCEDURE MakeScor;BEGIN	GagaWindow;	SetWTitle(MyWind,'Scores');	KillControls(MyWind);	ClearRect(0,0,200,330);	InitCursor; 	TextFont(1); 	TextSize(12);	MoveTo(45,36);	DrawString('Scores for '); 	MyWrite(Year);	GrafScor;END;{************************************************************************}PROCEDURE ClearAdvice;VAR  LocalRect:	Rect;	InnerRect:	Rect;BEGIN	SetRect(LocalRect,212,20,516,330);	SetRect(InnerRect,214,22,510,330);	SetPort(MainWind);	HLock(BufferHandle);	BufferMap.baseaddr:=BufferHandle^;	CopyBits(BufferMap,MainWind^.portbits,LocalRect,LocalRect,srcCopy,NIL);	HUnlock(BufferHandle);	WritScor;END;{************************************************************************}PROCEDURE TransNews(ThisHead: Integer; TVFlag,ForceAdvice: Boolean);CONST	Margin = 222;	LineWidth = 13;VAR	i,j,k,x,y,z:	Integer;	ScorFlag:		Boolean;  LocalRect:	Rect;	InnerRect:	Rect;	FaceRect:		Rect;	MoveRect:		Rect;	TempStrng:	Str255;	Base:				Integer;	Val:				Integer;	Max:				Integer;	MaxVal:			Integer;	VertPlace:	Integer;	Sub:				Integer;	Ver:				Integer;	Obj:				Integer;	New:				Integer;	Old:				Integer;	AdvPStr:		ARRAY[1..5] OF Str255;{------------------------------------------------------------------------}PROCEDURE PostIt(IndexVal,USAPol,USSRPol:	Integer);BEGIN	TextSize(10);	MoveTo(Margin,VertPlace);	TextFace([bold]);	GetIndString(TempStrng,519+IndexVal,1);	DrawString(TempStrng);	TextFace([]);	MoveTo(Margin+110,VertPlace);	GetIndString(TempStrng,519+IndexVal,USAPol+2);	DrawString(TempStrng);	MoveTo(Margin+195,VertPlace);	GetIndString(TempStrng,519+IndexVal,USSRPol+2);	DrawString(TempStrng);	VertPlace:=VertPlace+14;	TextSize(12);END;{------------------------------------------------------------------------}BEGIN	Sub:=Subject[ThisHead];	Ver:=Verb[ThisHead];	Obj:=Object[ThisHead];	New:=NewNVal[ThisHead];	Old:=OldNVal[ThisHead];	IF TVFlag THEN		BEGIN			ClearRect(10,10,200,50);			x:=Sub;			IF ((Ver=Insg) AND (Sub<>Obj)) OR 				 ((Ver=Destabl) AND (Sub<3))				 THEN x:=Obj;			TextFont(0);				TextSize(12);			MoveTo(10,30);			DrawString('In '); 			DrawString(CntryNam[x]); 			DrawString(',');		END;	x:=0;	IF New<Old THEN x:=1;	IF New=Old THEN x:=2;	Base:=300+4*(3*Ver+x);	IF Sub=Obj THEN Base:=Base+100;	{$IFC DebugFlg}		x:=Hurt(Ver,Obj,Old,New); 		y:=(-x*ord4(PrestVal[Obj])) div 256;		ClearRect(10,30,250,48);		MoveTo(10,45); 		MyWrite(x); 		DrawString(' '); 		MyWrite(y);		DrawString(' ');		MyWrite(Ver);		DrawString(' ');		MyWrite(Obj);		DrawString(' ');		MyWrite(New);		DrawString(' ');		MyWrite(Old);		DrawString(' ');		MyWrite(NewsWorth[ThisHead]);	{$ENDC}	IF (Base=388) OR (Base=392)  {kludge city! (handle reversed wording)}		THEN HeadLine(Base,Old,50,Sub,Obj,Old,CrisisVal[ThisHead])		ELSE HeadLine(Base,New,50,Sub,Obj,Old,CrisisVal[ThisHead]);	ScorFlag:=FALSE;	IF (Sub=Obj) AND (Ver=Econ) THEN		BEGIN 			x:=RevlGain[1,Sub]; 			y:=RevlGain[2,Sub]; 			ScorFlag:=TRUE; 		END;	IF (Sub=Obj) AND (Ver=2) THEN		BEGIN 			x:=CoupGain[1,Sub]; 			y:=CoupGain[2,Sub]; 			ScorFlag:=TRUE; 		END;	IF (Sub>2) AND (Ver=Destabl) THEN		BEGIN 			x:=FinlGain[1,Sub]; 			y:=FinlGain[2,Sub]; 			ScorFlag:=TRUE; 		END;	IF (ScorFlag) AND (Year>1989) THEN		BEGIN			ClearRect(2,248,210,260);			MoveTo(2,260); 			DrawString('USA Gain: '); 			MyWrite(x);			MoveTo(105,260); 			DrawString('USSR Gain: '); 			MyWrite(y);		END;	SetRect(LocalRect,212,20,516,330);	SetRect(InnerRect,214,22,510,330);	SetPort(MainWind);	IF ForceAdvice THEN AdviseFlag:=TRUE;	IF NOT AdviseFlag THEN ClearAdvice	   {AdviseFlag is set or cleared by PROCEDURE Headline}	ELSE		BEGIN			FillRect(LocalRect,white);			FrameRect(InnerRect);			TextSize(18);			TextFont(2);			TextFace([bold]);			TempStrng:=Concat('Advisory: ',CntryNam[Obj]);			x:=362-(StringWidth(TempStrng) div 2);			MoveTo(x,40); 			DrawString(TempStrng);			TextSize(10);			TextFont(1);			TextFace([]);			FOR i:=1 TO 4 DO 				BEGIN					x:=GImpt(Sub,Ver,Obj,Old,New,i,y,z);					IF Sub=Human THEN x:=-x;					x:=x div 8;					x:=x+1; {fudge factor};					IF x<-15 THEN x:=-15;					IF x>16 THEN x:=16;					x:=x+16;					GetIndString(TempStrng,550,x);					FOR k:=1 TO 5 DO AdvPStr[k]:='';					j:=LineWidth; 					k:=1; 					x:=1;							WHILE (j<length(TempStrng)) AND (x<5)	DO						BEGIN							REPEAT j:=j-1; UNTIL TempStrng[j] = ' ';							AdvPStr[x]:=Copy(TempStrng,k,j-k);							k:=j+1; 							x:=x+1; 							j:=j+LineWidth;						END;					AdvPStr[x]:=Copy(TempStrng,k,length(TempStrng)-k+1);					FOR k:=1 TO 5 DO						BEGIN							CASE i OF								1: MoveTo(Margin+66,46+12*k);								2: MoveTo(Margin+209,46+12*k);								3: MoveTo(Margin+66,114+12*k);								4: MoveTo(Margin+209,114+12*k);							END;							DrawString(AdvPStr[k]);						END;					CASE i OF						1: SetRect(FaceRect,Margin,46,Margin+64,110);						2: SetRect(FaceRect,Margin+143,46,Margin+207,110);						3: SetRect(FaceRect,Margin,114,Margin+64,178);						4: SetRect(FaceRect,Margin+143,114,Margin+207,178);					END;					SetRect(MoveRect,0,0,64,64);					CopyBits(AdvisorFace[i],MainWind^.portbits,MoveRect,FaceRect,srcCopy,NIL);				END;			TextSize(12);			TextFace([bold]);			MoveTo(Margin,192);			DrawString('Sphere of Influence: ');			x:=(((ord4(DontMess[Obj])-AveDMess)*8) div AveDMess)+6;			IF x>12 THEN x:=12;			IF x<0 THEN x:=0;			GetIndString(TempStrng,633,x+2);			TextFace([]);			DrawString(TempStrng);			IF (Ver>=2) & (Ver<=5) THEN				BEGIN {post special information related to insurgency}					z:=1;					y:=StrngRat[Obj]; 					x:=0;					IF y>1 THEN x:=1;					IF y>7 THEN x:=2;					IF y>31 THEN x:=3;					IF y>127 THEN x:=4;					IF y>511 THEN x:=5;					IF y>2047 THEN x:=6;					Max:=8;					Val:=(GovtStrg[Obj] div ((InsgStrg[Obj] div 5)+1))						 -(OldGStrg[Obj] div ((OldIStrg[Obj] div 5)+1))+1;					MaxVal:=2;				END;			IF (Ver=0) | (Ver=1) THEN				BEGIN					z:=5;					x:=GPopular[Obj] div 2; 					Max:=7;					Val:=3+GPopular[Obj]-OldGPopl[Obj]; 					MaxVal:=6;				END;			IF (Ver=6) | (Ver=7) THEN				BEGIN					z:=-99;					x:=0; 					y:=FinlProb[Cmptr,Obj];					IF y>31 THEN x:=(y-8) div 24;					Max:=4; 					y:=FinlProb[Cmptr,Obj]-OldFinPb[Cmptr,Obj];					Val:=(y+18) div 4;						MaxVal:=9; 				END;			IF x>Max THEN x:=Max;			IF x<0 THEN x:=0;			MoveTo(Margin,208);			GetIndString(TempStrng,629+z,1);			TextFace([bold]); 			DrawString(TempStrng);			MoveTo(382,208);			GetIndString(TempStrng,629+z,x+2);			TextFace([]); 			DrawString(TempStrng);			IF Val<1 THEN Val:=1; 			IF Val>MaxVal THEN Val:=MaxVal;			MoveTo(250,224);			TextFace([bold]); 			DrawString('rate of change: ');			TextFace([]);			TextSize(10);			MoveTo(382,224);			IF z=5 THEN x:=635;			IF z=1 THEN x:=636;			IF z=-99 THEN x:=531;			GetIndString(TempStrng,x,Val);			DrawString(TempStrng);			MoveTo(Margin,228);			LineTo(506,228);			TextSize(12);			MoveTo(350,242);			TextFace([bold]); 			DrawString('USA              USSR');			TextFace([]);			VertPlace:=256;			x:=(DipAff^^[1,Obj]+127) div 28;			IF x>8 THEN x:=8;			y:=(DipAff^^[2,Obj]+127) div 28;			IF y>8 THEN y:=8;			PostIt(1,x,y);			IF Level>=3 THEN PostIt(10,Treaty[1,Obj],Treaty[2,Obj]);			IF z=1 THEN				BEGIN {additional stuff for insurgency policies}					PostIt(3,MiltAid^^[1,Obj],MiltAid^^[2,Obj]);					PostIt(4,InsgAid^^[1,Obj],InsgAid^^[2,Obj]);					PostIt(5,IntvGovt^^[1,Obj],IntvGovt^^[2,Obj]);					PostIt(6,IntvRebl^^[1,Obj],IntvRebl^^[2,Obj]);				END;			IF z=5 THEN				BEGIN {additional stuff for coup policies}					PostIt(7,EconAid[1,Obj],EconAid[2,Obj]);					PostIt(8,Destab[1,Obj],Destab[2,Obj]);				END;			IF z=-99 THEN PostIt(9,Pressure[1,Obj],Pressure[2,Obj]);		END;	SetPort(MyWind);END;{***********************************************************************}PROCEDURE ReactNews;VAR	i,j,x,y,z:			 Integer;	WindFlag,CrisFlag:		Boolean;BEGIN	WindFlag:=FALSE; 	CrisFlag:=FALSE;	i:=1;	WHILE i<=NewsQCtr DO		BEGIN			IF NOT QuitFlag THEN				BEGIN					IF Subject[i]<>Object[i] THEN						BEGIN							IF ((Verb[i]=IntReb) OR (Verb[i]=Insg) OR (Verb[i]=Destabl) OR (Verb[i]=Pressur))										 AND (Subject[i]<3)								 THEN									 BEGIN										 Nastiness:=Nastiness+NewNVal[i]-OldNVal[i];										 IF Nastiness>127 THEN Nastiness:=127;										 IF Nastiness<1 THEN Nastiness:=1;									 END;							IF (Subject[i]=Human) & (NewNVal[i]>OldNVal[i])									& NOT TwoPFlag & NOT CrisisVal[i] THEN								BEGIN									x:=-(GImpt(Subject[i],Verb[i],Object[i],OldNVal[i],NewNVal[i],0,y,z));									IF Cmptr=1 THEN z:=y; {correction}									IF z<0 THEN x:=256;									IF x<Abs(Random div 1024) THEN										BEGIN											IF NOT WindFlag THEN												BEGIN													GagaWindow;													RespHndl:=GetNewControl(130,MyWind);													WindFlag:=TRUE;												END;											IF Human=1 THEN x:=790 ELSE x:=890;											HeadLine(x,1,0,Subject[i],Object[i],OldNVal[i],CrisisVal[i]);											TransNews(i,FALSE,TRUE);											InitCursor; 											CullFlag:=FALSE; 											CrisFlag:=TRUE;											QuitFlag:=Crisis(i);											IF NOT QuitFlag THEN												BEGIN													SetCursor(GetCursor(4)^^);													ClearRect(0,0,250,225);													IF CullFlag THEN i:=i-1;												END;										END; {of x-test}								END	{of Subject=Human, etc test}							ELSE {this ELSE necessary to fix sneaky bug}							BEGIN							IF (Subject[i]>2) & (NewNVal[i]>OldNVal[i]) & (NOT TwoPFlag)									& (Influence(Cmptr,Subject[i])>3) THEN								BEGIN {computer/minor crisis check}									x:=-(GImpt(Subject[i],Verb[i],Object[i],OldNVal[i],NewNVal[i],0,y,z));									IF Cmptr=1 THEN z:=y; {correction}									IF z>Abs(Random div 1024) THEN										BEGIN {computer challenges minor country}											CmptrCrisis(i);										END;								END;							END; {of ELSE-clause}						END;	{of IF S<>O test}				END;	{of QuitFlag test}			i:=i+1;		END; {of WHILE statement}	IF NOT QuitFlag THEN		BEGIN			IF WindFlag THEN ClearDeck;			j:=0; 			x:=0;			NewsQCtr:=0;			IF Year>1989 THEN				BEGIN					FOR i:=3 TO NoCntry DO						BEGIN	{calculate reactions to policy states}							FOR j:=1 TO 2 DO								BEGIN									MinorRej(i,j);									x:=(25*ord4((256*(EconConv(EconAid[j,i]))) div GNP[i])) div (GPopular[i]+1)										 -(32*Destab[j,i])										 +((MiltAid^^[j,i]*MiltPress[i]) div 8)										 -(12*InsgAid^^[j,i])										 +(((IntvGovt^^[j,i])*MiltPress[i]) div 4)										 -(64*IntvRebl^^[j,i])										 -(16*Pressure[j,i])										 +((((Treaty[j,i]*Integrty[j]) div 128)*MiltPress[i]) div 8)										 +(8*(Trade[j,i]-3));									x:=x div 8;									ChgDipAff(i,j,x);								END;	{of j-loop}							IF Level=4 THEN								BEGIN									FOR j:=3 TO NoCntry DO										BEGIN {reactions to minor country policies}											x:=((MiltAid^^[j,i]*MiltPress[i]) div 8)												 -(12*InsgAid^^[j,i])												 +(((IntvGovt^^[j,i])*MiltPress[i]) div 4)												 -(64*IntvRebl^^[j,i]);											x:=x div 8;											ChgDipAff(i,j,x);										END;	{of j-loop}								END;						END; {of i-loop}					CalcScores;					WritScor;				END;	{of IF Year>1989}		END;	END;{***********************************************************************}PROCEDURE NextTurn;VAR	i,j,k,d,x,y,Who:						Integer;	temp,delta:							LongInt;BEGIN  PrePlanMove;	TimeMesg('React to News');	ReactNews;	IF NOT QuitFlag THEN MainMove;END;{***********************************************************************}PROCEDURE SetPolicy(Item: Integer);{for Human player to set his policy with a dialog box}VAR	theDialog:		DialogPtr;	ItemHit:			Integer;	theType:			Integer;	OldCntrl:			Integer;	i,x,max,Sum:	Integer;	MaxHIntv:			Integer;	MaxHMAid:			Integer;	AvlResrc:			Integer;	LocalVerb:		Integer;	OrigItem:			Integer;	theItem:			Handle;	theBox:				Rect;	theCntrol:		ControlHandle;	TitStrng:			str255;	LongAvl:			LongInt;	NumString:		Str255;BEGIN	CASE Item OF		1: LocalVerb:=Miltry;		2: LocalVerb:=Insg;		3: LocalVerb:=IntGov;		4: LocalVerb:=IntReb;		5: LocalVerb:=Econ;		6: LocalVerb:=Destabl;		7: LocalVerb:=Treato;		8: LocalVerb:=Pressur;		9: LocalVerb:=Trado;	END;	SaveMap;	ClearRect(120,285,154,322);	theDialog:=GetNewDialog(128+LocalVerb,NIL,POINTER(-1));	GetDItem(theDialog,9,theType,theItem,theBox);	SetIText(theItem,CntryNam[HitCntry]);	max:=5;	x:=DipAff^^[Human,HitCntry];	CASE LocalVerb OF		Miltry:	BEGIN							 OldCntrl:=MiltAid^^[Human,HitCntry];							 max:=MilMax(x); 							 x:=5;							 AvlResrc:=(MiltSpnd[Human] div 8)+GovtAid[Human];							 FOR i:=4 DOWNTO 0 DO IF MAidConv(i+1)>AvlResrc THEN x:=i;							 IF x<max THEN max:=x;							 AvlResrc:=2*AvlResrc;						 END;		Insg:		BEGIN							 OldCntrl:=InsgAid^^[Human,HitCntry];							 x:=0;							 IF StrngRat[HitCntry]<512 THEN x:=1;							 IF StrngRat[HitCntry]<128 THEN x:=2;							 IF StrngRat[HitCntry]<32	 THEN x:=3;							 IF StrngRat[HitCntry]<8	 THEN x:=4;							 IF StrngRat[HitCntry]<2	 THEN x:=5;							 max:=x;							 x:=InsgAMax(Human,HitCntry);							 IF x<max THEN max:=x;							 AvlResrc:=(MiltSpnd[Human] div 8)+GovtAid[Human];							 FOR i:=4 DOWNTO 0 DO IF MAidConv(i+1)>AvlResrc THEN x:=i;							 IF x<max THEN max:=x;							 AvlResrc:=2*AvlResrc;						 END;		IntGov:	BEGIN							 OldCntrl:=IntvGovt^^[Human,HitCntry];							 max:=IntvGMax(Treaty[Human,HitCntry],x); x:=5;							 AvlResrc:=(MilMen[Human] div 4)-TotlIntv[Human];							 FOR i:=4 DOWNTO 0 DO IF IntvConv(i+1)>AvlResrc THEN x:=i;							 IF x<max THEN max:=x;						 END;		IntReb:	BEGIN							 OldCntrl:=IntvRebl^^[Human,HitCntry];							 max:=InsgIMax(Human,HitCntry); x:=5;							 AvlResrc:=(MilMen[Human] div 4)-TotlIntv[Human];							 FOR i:=4 DOWNTO 0 DO IF IntvConv(i+1)>AvlResrc THEN x:=i;							 IF x<max THEN max:=x;						 END;		Econ:		BEGIN							 OldCntrl:=EconAid[Human,HitCntry]; 							 max:=EconAMax(x);							 Sum:=0; 							 FOR i:=3 TO NoCntry DO Sum:=Sum+EconConv(EconAid[Human,i]);							 x:=5; 							 AvlResrc:=(GNP[Human] div 44)-(2*Sum);							 FOR i:=4 DOWNTO 0 DO 							 	IF EconConv(i+1)>((AvlResrc div 2)+EconConv(OldCntrl)) THEN x:=i;							 IF x<max THEN max:=x;						 END;		Destabl: OldCntrl:=Destab[Human,HitCntry];		Treato:	BEGIN							 OldCntrl:=Treaty[Human,HitCntry];							 max:=TreatMax(Integrty[Human]+x-Pugnacty[Human]);							 IF max<=Treaty[Human,HitCntry] THEN max:=Treaty[Human,HitCntry];							 IF Treaty[Human,HitCntry]>0 THEN								 BEGIN									 FOR i:=0 TO Treaty[Human,HitCntry]-1 DO										 BEGIN											 GetDItem(theDialog,i+3,theType,theItem,theBox);											 theCntrol:=ControlHandle(theItem);											 HiliteControl(theCntrol,255);										 END;								 END;						 END;		Pressur: OldCntrl:=Pressure[Human,HitCntry];		Trado: OldCntrl:=Trade[Human,HitCntry];	END;	OrigItem:=OldCntrl;	OldCntrl:=OldCntrl+3;	 	ItemHit:=OldCntrl;	IF max<5 THEN		BEGIN			FOR i:=max+1 TO 5 DO				BEGIN					GetDItem(theDialog,i+3,theType,theItem,theBox);					theCntrol:=ControlHandle(theItem);					HiliteControl(theCntrol,255);				END;		END;	GetDItem(theDialog,OldCntrl,theType,theItem,theBox);	theCntrol:=ControlHandle(theItem);	SetCtlValue(theCntrol,1);	IF (OldCntrl>3) AND (LocalVerb<>Treato) THEN		BEGIN			FOR i:=3 TO OldCntrl DO				BEGIN					GetDItem(theDialog,i,theType,theItem,theBox);					theCntrol:=ControlHandle(theItem);					HiliteControl(theCntrol,0);				END;		END;	IF Item<6 THEN		BEGIN {Available resource write}			GetIndString(TitStrng,596,Item);			LongAvl:=ord4(AvlResrc);			NumToString(LongAvl,NumString);			TitStrng:=Concat('Available: ',NumString,TitStrng);			GetDItem(theDialog,10,theType,theItem,theBox);			SetIText(theItem,TitStrng);		END;	REPEAT		OldCntrl:=ItemHit;		ModalDialog(NIL,ItemHit);		GetDItem(theDialog,ItemHit,theType,theItem,theBox);		IF ItemHit>2 THEN SetCtlValue(theCntrol,0);		theCntrol:=ControlHandle(theItem);		SetCtlValue(theCntrol,1);	UNTIL ItemHit=1;	DisposDialog(theDialog);	ReDrawMap;	IF OrigItem<>(OldCntrl-3) THEN DoPolicy(Human,LocalVerb,HitCntry,OldCntrl-3,(OldCntrl-3<=OrigItem));END;{********************************************************************************}PROCEDURE MakeFirstHead;VAR	x,i,j,rank:	 Integer;	ly:					LongInt;BEGIN	x:=StrngRat[HitCntry];	j:=0;	WHILE x>1 DO		BEGIN			x:=x div 2;				j:=j+1;		END;	IF j > 12 THEN j:=12;	rank:=(12-j) mod 4;		i:=(12-j) div 4;	IF j = 0 THEN rank:=7-4*StrngRat[HitCntry];	i:=128+(16*i)+(4*BitAnd(BitShift(CntryRnd[HitCntry],8),3));	IF HitCntry=1 THEN i:=900;	IF RebWinFlag[HitCntry] THEN i:=412;	 {mask out rebel news if chg of state}	Headline(i,rank,50,HitCntry,1,3,FALSE);END;{********************************************************************************}PROCEDURE MakeLastHead;VAR i,rank,x:				 Integer;BEGIN	IF CntryRnd[HitCntry]>0 THEN BEGIN i:=232; x:=13*GPopular[HitCntry]; END													ELSE BEGIN i:=216; x:=GovtWing[HitCntry]+127; END;	IF x>255 THEN x:=255;	i:=i+(x div 64)*4;	rank:=(x mod 64) div 16;	IF HitCntry = 1 THEN i:=912;	Headline(i,rank,50,HitCntry,1,3,FALSE);END;{********************************************************************************}PROCEDURE ReLableC(ConHandl: ControlHandle; StrIndex,HiLite: Integer);VAR TempStrng:	Str255;BEGIN	GetIndString(TempStrng,592,StrIndex);	SetCTitle(ConHandl,TempStrng);	HiliteControl(ConHandl,HiLite);END;{***********************************************************************}PROCEDURE ChooseHead(theItem: Integer);CONST	News = 1;	USSRA = 2;	USSRO = 3;	USAA = 4;	USAO = 5;	IntNews = 6;VAR	HitFlag,PrimeFlg:							Boolean;	x,i,WhichHead,FrstHead,LastHead,MaxHead:			Integer;	ThisHead:								LongInt;BEGIN	PButHandle:=GetNewControl(128,MyWind);	NButHandle:=GetNewControl(129,MyWind);	RespHndl:=GetNewControl(130,MyWind);	HiliteControl(PButHandle,255);	WhichHead:=0; 	MaxHead:=NewsQCtr; 	PrimeFlg:=TRUE;	IF theItem=News THEN whichControl:=NIL ELSE whichControl:=NButHandle;	IF (NOT TwoPFlag) AND		 (((theItem=USSRA) AND (Human=1)) OR ((theItem=USAA) AND (Human=2)))		 THEN WhichHead:=LastNews-1;	REPEAT		x:=ReadMouse(TRUE);		IF (x>0) OR PrimeFlg THEN			BEGIN				IF whichControl=RespHndl THEN					BEGIN						CullFlag:=FALSE;						IF Subject[WhichHead]=Cmptr THEN QuitFlag:=Crisis(WhichHead)																				ELSE MinorCrisis(WhichHead);						MaxHead:=NewsQCtr;						IF CullFlag THEN WhichHead:=WhichHead-1;						whichControl:=NButHandle;					END;				IF NOT QuitFlag THEN					BEGIN						ClearRect(2,248,210,260);						IF whichControl=PButHandle THEN							BEGIN								HitFlag:=FALSE;								WHILE (WhichHead>0) AND (HitFlag=FALSE) DO									BEGIN										WhichHead:=WhichHead-1;										IF WhichHead>0 THEN											BEGIN												CASE theItem OF													News: HitFlag:=((Subject[WhichHead]=HitCntry) OR (Object[WhichHead]=HitCntry));													USSRA: HitFlag:=(Subject[WhichHead]=2) AND (NewNVal[WhichHead]>OldNVal[WhichHead])																					 AND (Object[WhichHead]<>2);													USSRO: HitFlag:=(Subject[WhichHead]=2) AND (NewNVal[WhichHead]<=OldNVal[WhichHead]);													USAA:	 HitFlag:=(Subject[WhichHead]=1) AND (NewNVal[WhichHead]>OldNVal[WhichHead])																					 AND (Object[WhichHead]<>1);													USAO: HitFlag:=(Subject[WhichHead]=1) AND (NewNVal[WhichHead]<=OldNVal[WhichHead]);													IntNews: HitFlag:=(Subject[WhichHead]>2);												END; {of CASE statement}											END;	{of whichHead IF}									END;			{of WHILE statement}							END;			{of PButHandle IF}						IF whichControl=NButHandle THEN							BEGIN								HitFlag:=FALSE;								WHILE (WhichHead<=MaxHead) AND (HitFlag=FALSE) DO									BEGIN										WhichHead:=WhichHead+1;										IF WhichHead<=MaxHead THEN											BEGIN												CASE theItem OF													News: HitFlag:=((Subject[WhichHead]=HitCntry) OR (Object[WhichHead]=HitCntry));													USSRA: HitFlag:=(Subject[WhichHead]=2) AND (NewNVal[WhichHead]>OldNVal[WhichHead])																					 AND (Object[WhichHead]<>2);													USSRO: HitFlag:=(Subject[WhichHead]=2) AND (NewNVal[WhichHead]<=OldNVal[WhichHead]);													USAA:	 HitFlag:=(Subject[WhichHead]=1) AND (NewNVal[WhichHead]>OldNVal[WhichHead])																					 AND (Object[WhichHead]<>1);													USAO: HitFlag:=(Subject[WhichHead]=1) AND (NewNVal[WhichHead]<=OldNVal[WhichHead]);													IntNews: HitFlag:=(Subject[WhichHead]>2);												END; {of CASE statement}											END;	 {of WhichHead IF}									END;			 {of WHILE statement}							END;			 {of NButHandle IF}						IF theItem>1 THEN ClearRect(10,10,200,50);						IF WhichHead=0 THEN							BEGIN								ClearAdvice;								SetPort(MyWind);								IF theItem=1 THEN MakeFirstHead														 ELSE Headline(920,1,50,1,1,1,FALSE);							END;						IF WhichHead=MaxHead+1 THEN							BEGIN								ClearAdvice;								SetPort(MyWind);								IF theItem=1 THEN MakeLastHead														 ELSE Headline(908,1,50,1,1,1,FALSE);							END;						IF (WhichHead>0) AND (WhichHead<MaxHead+1) THEN							BEGIN								ThisHead:=WhichHead;								TransNews(ThisHead,(theItem>1),FALSE);							END;						IF (NOT TwoPFlag) &							(((theItem=USSRA) & (Human=1)) OR ((theItem=USAA) & (Human=2)))							 THEN 							BEGIN							 	LastNews:=WhichHead; 								IF LastNews=0 THEN LastNews:=1; 							END;						PrimeFlg:=FALSE;						IF WhichHead=0							THEN ReLableC(PButHandle,2,255) ELSE ReLableC(PButHandle,1,0);						IF WhichHead=MaxHead+1							THEN ReLableC(NButHandle,4,255) ELSE ReLableC(NButHandle,3,0);					END;	{of QuitFlag IF}			END;	 {of x>0 IF}	UNTIL (x<0) OR QuitFlag;END;{********************************************************************************}{$IFC DebugFlg}PROCEDURE DoDebug1;BEGIN  SaveMap;	MyWind:=GetNewWindow(130,NIL,POINTER(-1));	SetPort(MyWind);	SetWTitle(MyWind,'Not for playtesters');	MoveTo(0,10); 	DrawString('GovtAid:	'); 	MyWrite(GovtAid[HitCntry]);	MoveTo(0,26); 	DrawString('DA[H]:	'); 	MyWrite(DipAff^^[Human,HitCntry]);	DrawString('	DA[C]: '); 	MyWrite(DipAff^^[Cmptr,HitCntry]);	MoveTo(0,42); 	DrawString('GovtWing	'); 	MyWrite(GovtWing[HitCntry]);	DrawString(' InsgWing'); 	MyWrite(InsgWing[HitCntry]);	MoveTo(0,58); 	DrawString('GovtStrg	'); 	MyWrite(GovtStrg[HitCntry]);	DrawString(' InsgStrg'); 	MyWrite(InsgStrg[HitCntry]);	MoveTo(0,74); 	DrawString('SqrtStrg	'); 	MyWrite(SqrtStrg[HitCntry]);	DrawString(' InsgPowr:	'); 	MyWrite(InsgPowr[HitCntry]);	MoveTo(0,90); DrawString('GNP:	'); 	MyWrite(GNP[HitCntry]);	DrawString(' GPop:	 '); 	MyWrite(GPopular[HitCntry]);	MoveTo(0,106); 	DrawString('Fracs MCI:	 '); 	MyWrite(MiltFrac[HitCntry]);	DrawString(' ');	 	MyWrite(ConsFrac[HitCntry]); 	DrawString(' ');	 	MyWrite(InvtFrac[HitCntry]);	MoveTo(0,122); 	DrawString('Press M	:'); 	MyWrite(MiltPress[HitCntry]);	MoveTo(0,138); 	DrawString('Spnd	MCI:'); 	MyWrite(MiltSpnd[HitCntry]);	DrawString(' ');	 	MyWrite(ConsSpnd[HitCntry]); 	DrawString(' ');	 	MyWrite(InvtSpnd[HitCntry]);	MoveTo(0,154); 	DrawString('MilPowr:'); 	MyWrite(MilPowr[HitCntry]);	DrawString(' MilMen:	');		MyWrite(MilMen[HitCntry]);	MoveTo(0,170); 	DrawString('DontMess'); 	MyWrite(DontMess[HitCntry]);	MoveTo(0,186); 	DrawString('Maturity:'); 	MyWrite(Maturity[HitCntry]);	MoveTo(0,202); 	DrawString(' CFP,HFB:'); 	MyWrite(FinlProb[Cmptr,HitCntry]);	DrawString(' '); 	MyWrite(FinlProb[Human,HitCntry]);	MoveTo(0,218);	DrawString('DebgArr1: ');	MyWrite(DebgArr1[HitCntry]);	MoveTo(0,234);	DrawString('DebgArr2: ');	MyWrite(DebgArr2[HitCntry]);	MoveTo(0,250);	DrawString('DebgArr3: ');	MyWrite(DebgArr3[HitCntry]);	MoveTo(0,266);	DrawString('DebgArr4: ');	MyWrite(DebgArr4[HitCntry]);	REPEAT UNTIL ReadMouse(TRUE)=-1;END;{#####################################################################}PROCEDURE DoDebug2;VAR i,x,y:			Integer;BEGIN  SaveMap;	MyWind:=GetNewWindow(130,NIL,POINTER(-1));	SetPort(MyWind);	SetWTitle(MyWind,'Not for Playtesters');	MoveTo(0,10); DrawString('NewsQCtr: '); MyWrite(NewsQCtr);	MoveTo(0,26); DrawString('			 Cmptr	Human');	MoveTo(0,42); DrawString('Pugnacity:'); 	MyWrite(Pugnacty[Cmptr]);	DrawString(' ');	MyWrite(Pugnacty[Human]);	MoveTo(0,58); DrawString('Integrity:'); 	MyWrite(Integrty[Cmptr]); 	DrawString(' ');	MyWrite(Integrty[Human]);	MoveTo(0,74); DrawString('Adventure:'); 	MyWrite(Adventur[Cmptr]); 	DrawString(' ');	MyWrite(Adventur[Human]);	MoveTo(0,90); DrawString('Nastiness:'); MyWrite(Nastiness);	MoveTo(0,106); DrawString('GovtAid:	'); 	MyWrite(GovtAid[Cmptr]);	DrawString(' ');	MyWrite(GovtAid[Human]);	MoveTo(0,122); DrawString('TotIntv: '); 	MyWrite(TotlIntv[Cmptr]);	DrawString(' ');	MyWrite(TotlIntv[Human]);	MoveTo(0,138); DrawString('DA[H,C]:'); MyWrite(DipAff^^[1,2]);	MoveTo(0,154); DrawString('SumDMess:'); MyWrite(SumDMess);	x:=0; 	y:=0;	FOR i:=3 TO NoCntry DO		BEGIN x:=x+EconConv(EconAid[Cmptr,i]);y:=y+EconConv(EconAid[Human,i]); END;	MoveTo(0,170); DrawString('EconAid:	'); 	MyWrite(x); 	DrawString(' ');	MyWrite(y);	REPEAT UNTIL ReadMouse(TRUE)=-1;END; {of Debug case}{$ENDC}{***********************************************************************}{$S Bunny}{***********************************************************************}PROCEDURE GiveInfo(theItem: INTEGER);{response to information menu command}CONST	News = 1;VAR	i,j,x,y,Max,MaxPol:					 Integer;	Flag,HitFlag,JkFlag:					Boolean;	AdjectStr,RigtStr:					Str32;	CaptlStr,LeadrStr,LeftStr,NameStr:		Str32;	WhichHead:						Integer;	TempStrng:						Str255;BEGIN	GagaWindow;	GetIndString(TempStrng,597,theItem);	SetWTitle(MyWind,TempStrng);	IF theItem=News THEN		BEGIN			GetLabels(HitCntry,AdjectStr,CaptlStr,LeadrStr,LeftStr,RigtStr,NameStr);			TextFont(6);				TextSize(18);			MoveTo(10,20);			DrawString('The '); DrawString(AdjectStr);			MoveTo(10,40);			DrawString('Yearly News');			MyWrite(Year);		END;	ChooseHead(theItem);END;{********************************************************************************}PROCEDURE GameAction(theItem: Integer);	 {responds to game menu}CONST	ScoreG = 1;	NTurn = 2;	LoadG = 3;	ChangeS = 4;	QuitGame = 6;VAR x:					Integer;BEGIN	CASE theItem OF		ScoreG: MakeScor;		NTurn:			BEGIN				SetCursor(GetCursor(4)^^);				TimeMesg('Save Game');				NoUndoFlag:=FALSE;				IF Year>1988 THEN SaveGame;				NextTurn; 				IF Year=1989 THEN BEGIN ReviseMenu; SaveGame; END;				IF NOT QuitFlag THEN					BEGIN						IF Year=1997 THEN BEGIN WinFlag:=TRUE; EndGame; END;						TwoPActF:=FALSE;						OldVHigh:=2;						ReviseMap(TRUE);						InitCursor;						IF Year=1989 THEN ReviseMap(TRUE); {kluge to fix hardware bug}					END;			END;		LoadG:			BEGIN				SaveMap;				x:=CautionAlert(138,NIL);				ReDrawMap;				IF x=2 THEN BEGIN LoadGame; NoUndoFlag:=TRUE; END;			END;		ChangeS: BEGIN ExchangP; TwoPActF:=TRUE; END;		QuitGame:			BEGIN				SaveMap;				x:=CautionAlert(137,NIL);				QuitFlag:=(x=2);				ReDrawMap;				IF QuitFlag THEN					BEGIN 						QuitFlag:=FALSE; 						SaveGame; 						QuitFlag:=TRUE; 					END;			END;	END;END;{********************************************************************************}PROCEDURE ClrHitCntry;BEGIN	IF HitCntry>0 THEN		BEGIN			FillCntry(HitCntry,IWhite);			ClearRect(220,20,340,44);			OldHit:=HitCntry;			HitCntry:=0;		END;END;{********************************************************************************}PROCEDURE DoAboutBOP2;VAR  x:  Integer;  FrogRect:	 Rect;  TempStrng:		 Str255;  RefCon:		 LongInt;BEGIN	SaveMap;  SetRect(FrogRect,100,100,412,220);	FillRect(FrogRect,white);	FrameRect(FrogRect);  TextFace([bold]);  TempStrng:='Balance of Power';  x:=256-(StringWidth(TempStrng) div 2);  MoveTo(x,120); DrawString(TempStrng);  TextFace([]);  TempStrng:='by Chris Crawford';  x:=256-(StringWidth(TempStrng) div 2);  MoveTo(x,140); DrawString(TempStrng);  TempStrng:='Copyright (c) 1988 Chris Crawford';  x:=256-(StringWidth(TempStrng) div 2);  MoveTo(x,160); DrawString(TempStrng);  TempStrng:='All Rights Reserved';  x:=256-(StringWidth(TempStrng) div 2);  MoveTo(x,180); DrawString(TempStrng);  TempStrng:='Version 2.08';  x:=256-(StringWidth(TempStrng) div 2);  MoveTo(x,200); DrawString(TempStrng);  REPEAT SystemTask UNTIL Button;	ReDrawMap;  FlushEvents(EveryEvent,0);END;{********************************************************************************}PROCEDURE DoCommand(mResult: LongInt); {general menu command handler}CONST	AppleMenu = 1;	GameMenu = 2;	PoltcMenu = 3;	RelnMenu = 4;	PolcyMenu = 5;	EvntMenu = 6;	BrefMenu = 7;	DebgMenu = 8;	CloseUp = 1;	BackGrnd = 2;	History = 3;	Debug1 = 1;	Debug2 = 2;	Hist2 = 3;VAR	theMenu,theItem,x:		Integer;	accName:		Str255;BEGIN	theMenu:=HiWord(mResult);		theItem:=LoWord(mResult);	CASE theMenu OF		AppleMenu: DoAboutBOP2;		GameMenu:	 GameAction(theItem);		PoltcMenu:	BEGIN OldVHigh:=theItem; ClrHitCntry; ReviseMap(TRUE); END;		RelnMenu:		BEGIN									IF theItem<12 THEN										BEGIN											OldVHigh:=theItem+8; 											ReviseMap(TRUE);										END;									IF (theItem=13)	& NOT GoingOut THEN										BEGIN											GoingOut:=TRUE;											CheckItem(MenuArr[3],13,TRUE);											CheckItem(MenuArr[3],14,FALSE);											ReviseMap(TRUE);										END;									IF (theItem=14)	& GoingOut THEN										BEGIN											GoingOut:=FALSE;											CheckItem(MenuArr[3],13,FALSE);											CheckItem(MenuArr[3],14,TRUE);											ReviseMap(TRUE);										END;								END;		PolcyMenu: SetPolicy(theItem);		EvntMenu:	 GiveInfo(theItem);		BrefMenu:			BEGIN				CASE theItem OF					CloseUp: DoCloseUp;					BackGrnd: DoBackGd;					History: DoHistory;				END;			END;		DebgMenu:			BEGIN				{$IFC DebugFlg}				CASE theItem OF					Debug1: DoDebug1;					Debug2: DoDebug2;					Hist2:  BEGIN Do2History; ReviseMap(TRUE); END;				END;				{$ENDC}			END;	END;	IF NOT QuitFlag THEN BEGIN HiLiteMenu(0); ReviseMenu; END;	Junk1:=MaxMem(Junk2);END;{************************************************************************}PROCEDURE TakeInput;VAR		 	i,x,thePart:					Integer;	JunkFlag:			Boolean;	ch:						Char;BEGIN	REPEAT		SystemTask;		JunkFlag:=GetNextEvent(everyEvent,myEvent);		CASE myEvent.what OF			KeyDown:				BEGIN					x:=BitAnd(myEvent.message,CharCodeMask);					ch:=Chr(x);					IF BitAnd(myEvent.modifiers,CmdKey)<>0 THEN DoCommand(MenuKey(ch));				END;			{upDateEvt: 				BEGIN 					BeginUpdate(MainWind);					FOR i:=1 TO NoCntry DO CntryCol[i]:=5;					ReviseMap(TRUE);					EndUpDate(MainWind);				END;}			mouseDown:				BEGIN					thePart:=FindWindow(myEvent.where,whichWindow);					IF thePart=inMenuBar THEN DoCommand(MenuSelect(myEvent.where))					ELSE						BEGIN							ClrHitCntry;							FOR i:=1 TO NoCntry DO IF PtInRgn(myEvent.where,CntryRgn[i]) THEN								BEGIN									Junk1:=MaxMem(Junk2);									FillCntry(i,IBlack);									MoveTo(220,40);									DrawString(CntryNam[i]);									HitCntry:=i;									IF (OldHit=i) & (TimeOfHit+40>myEvent.when) THEN DoCloseUp;									TimeOfHit:=myEvent.when;								END;							IF NOT QuitFlag THEN BEGIN ReviseMap(TRUE); ReviseMenu; END;						END;		 		END;		END; {of CASE statement}	UNTIL QuitFlag;END;	{ TakeInput }{***********************************************************************}BEGIN	{ main program }	MoreMasters;	MoreMasters;	InitGraf(@thePort);	InitFonts;	InitWindows;	InitMenus;	InitDialogs(NIL);	MainWind:=GetNewWindow(304,NIL,Pointer(-1));	SetPort(MainWind);	RandSeed:=TickCount;	REPEAT		TwoPFlag:=TitlePage;		EndDummy:=InitGame;		IF EndDummy=2 THEN GameAction(EndDummy) ELSE LoadGame;		TakeInput;	UNTIL NOT ReplayFlag;END.