Unit StdRoutines;INTERFACEUSES{$L-}{$U-}		{$LOAD MQOTP.dumpfile}			 Memtypes, QuickDraw, OSIntf, ToolIntf, PackIntf,	 {$LOAD BOPGlobals.dumpfile}		 {$U Globals.p}	Globals,	 {$LOAD}		 {$U Init.p}		Init;{$U+}{$E+}{$L+}{$ASM+}{$D-}{$R-}{$OV-}{$IFC DebugFlg}	{$D+}	{$R+}	{$OV+}{$ENDC}PROCEDURE ReviseMap(NewNdxFlag: Boolean);PROCEDURE ReviseMenu;PROCEDURE DoCloseUp;PROCEDURE LoadGame;PROCEDURE SaveGame;IMPLEMENTATION{***********************************************************************}{$S StdR}{***********************************************************************}PROCEDURE ReviseMap(NewNdxFlag: Boolean);{main routine for revising the map under new circumstances}CONST	ClrMap 		= 0;	Spheres 	= 1;	MEvents 	= 2;	MPower 		= 3;	Turmoil 	= 4;	Support 	= 5;	USAFinl 	= 6;	USSRFinl 	= 7;	Wars		 	= 8;	WhoDipRel = 9;	WhoMilAid = 10;	WhoInsg 	= 11;	WhoIntG 	= 12;	WhoIntR 	= 13;	WhoEcon 	= 14;	WhoDest 	= 15;	WhoTret 	= 16;	WhoPres 	= 17;	WhoTrade  = 18;	WhoAtWar 	= 19;VAR	i,j,k,x,y,Scale1,Scale2,Scale3:					Integer;	TitleRect:							Rect;	TempStrng,SmlStrng:			Str255;	SortArr:								IntArr;	StrHandle:							StringHandle;BEGIN	IF (OldVHigh>=WhoDipRel) & (OldVHigh<=WhoAtWar) THEN		IF (HitCntry=0) | ((HitCntry>2) & (Level<4)) THEN OldVHigh:=0;	IF (OldVHigh>=WhoEcon) & (OldVHigh<=WhoTrade) THEN		BEGIN			GoingOut:=(HitCntry<3);			CheckItem(MenuArr[3],13,GoingOut);			CheckItem(MenuArr[3],14,NOT GoingOut);		END;	Scale1:=1; 	Scale2:=3; 	Scale3:=4;	FOR i:=1 TO NoCntry DO SortArr[i]:=0;	CASE OldVHigh OF		ClrMap:			BEGIN				FOR i:=1 TO NoCntry DO SortArr[i]:=0;				Scale1:=20; 				Scale2:=100; 				Scale3:=500;			END;		Spheres:			BEGIN				FOR i:=1 TO NoCntry DO 					SortArr[i]:=-(ord4(DontMess[i])*NoCntry*5) div SumDMess;				Scale1:=-6; 				Scale2:=-5; 				Scale3:=-2;			END;		MEvents:			BEGIN				FOR i:=1 TO NoCntry DO					BEGIN						SortArr[i]:=1;						IF FinlFlag[i] THEN SortArr[i]:=3;						IF CoupFlag[i] THEN SortArr[i]:=5;						IF RebWinFlag[i] THEN SortArr[i]:=7;					END;				Scale1:=2; 				Scale2:=4; 				Scale3:=6;			END;		MPower:			BEGIN				FOR i:=1 TO NoCntry DO SortArr[i]:=PrestVal[i];				Scale1:=60; 				Scale2:=300; 				Scale3:=1500;			END;		Turmoil:			BEGIN				FOR i:=1 TO NoCntry DO SortArr[i]:=-(StrngRat[i]);				Scale1:=-511; 				Scale2:=-31; 				Scale3:=-1;			END;		Support:			BEGIN				FOR i:=1 TO NoCntry DO SortArr[i]:=-GPopular[i];				Scale1:=-11; 				Scale2:=-7; 				Scale3:=-3;			END;		USAFinl:			BEGIN				FOR i:=1 TO NoCntry DO SortArr[i]:=FinlProb[1,i];				Scale1:=56; 				Scale2:=80; 				Scale3:=104;			END;		USSRFinl:			BEGIN				FOR i:=1 TO NoCntry DO SortArr[i]:=FinlProb[2,i];				Scale1:=56; 				Scale2:=80; 				Scale3:=104;			END;		Wars:			BEGIN				FOR i:=3 TO NoCntry DO					BEGIN						FOR j:=3 TO NoCntry DO IF DipAff^^[i,j]=-127 THEN SortArr[i]:=5;					END;			END;		WhoDipRel:			BEGIN				IF GoingOut THEN					BEGIN						FOR i:=1 TO NoCntry DO SortArr[i]:=-DipAff^^[HitCntry,i];					END				ELSE					BEGIN						FOR i:=1 TO NoCntry DO SortArr[i]:=-DipAff^^[i,HitCntry];					END;				Scale1:=-42; 				Scale2:=0; 				Scale3:=42;			END;		WhoMilAid: BEGIN									IF GoingOut THEN										BEGIN											FOR i:=1 TO NoCntry DO 												SortArr[i]:=MiltAid^^[HitCntry,i];										END									ELSE										BEGIN											FOR i:=1 TO NoCntry DO 												SortArr[i]:=MiltAid^^[i,HitCntry];										END;								END;		WhoInsg: BEGIN									IF GoingOut THEN										BEGIN											FOR i:=1 TO NoCntry DO 												SortArr[i]:=InsgAid^^[HitCntry,i];										END									ELSE										BEGIN											FOR i:=1 TO NoCntry DO 												SortArr[i]:=InsgAid^^[i,HitCntry];										END;								END;		WhoIntG: BEGIN									IF GoingOut THEN										BEGIN											FOR i:=1 TO NoCntry DO 												SortArr[i]:=IntvGovt^^[HitCntry,i];										END									ELSE										BEGIN											FOR i:=1 TO NoCntry DO 												SortArr[i]:=IntvGovt^^[i,HitCntry];										END;								END;		WhoIntR: BEGIN									IF GoingOut THEN										BEGIN											FOR i:=1 TO NoCntry DO 												SortArr[i]:=IntvRebl^^[HitCntry,i];										END									ELSE										BEGIN											FOR i:=1 TO NoCntry DO 												SortArr[i]:=IntvRebl^^[i,HitCntry];										END;								END;		WhoEcon: BEGIN									IF GoingOut THEN										BEGIN											FOR i:=1 TO NoCntry DO 												SortArr[i]:=EconAid[HitCntry,i];										END									ELSE										BEGIN											FOR i:=1 TO 2 DO 												SortArr[i]:=EconAid[i,HitCntry];										END;								END;		WhoDest: BEGIN									IF GoingOut THEN										BEGIN											FOR i:=1 TO NoCntry DO 												SortArr[i]:=Destab[HitCntry,i];										END									ELSE										BEGIN											FOR i:=1 TO 2 DO 												SortArr[i]:=Destab[i,HitCntry];										END;								END;		WhoTret: BEGIN									IF GoingOut THEN										BEGIN											FOR i:=1 TO NoCntry DO 												SortArr[i]:=Treaty[HitCntry,i];										END									ELSE										BEGIN											FOR i:=1 TO 2 DO 												SortArr[i]:=Treaty[i,HitCntry];										END;								END;		WhoPres: BEGIN									IF GoingOut THEN										BEGIN											FOR i:=1 TO NoCntry DO 												SortArr[i]:=Pressure[HitCntry,i];										END									ELSE										BEGIN											FOR i:=1 TO 2 DO 												SortArr[i]:=Pressure[i,HitCntry];										END;								END;		WhoTrade: BEGIN									IF GoingOut THEN										BEGIN											FOR i:=1 TO NoCntry DO 												SortArr[i]:=-Trade[HitCntry,i];										END									ELSE										BEGIN											FOR i:=1 TO 2 DO SortArr[i]:=-Trade[i,HitCntry];											FOR i:=3 TO NoCntry DO SortArr[i]:=-5;										END;									Scale1:=-3;									Scale2:=-2;									Scale3:=-1;								END;		WhoAtWar: BEGIN								IF HitCntry>2 THEN FOR i:=3 TO NoCntry DO 									IF (DipAff^^[HitCntry,i]=-127) 									 | (DipAff^^[i,HitCntry]=-127) THEN SortArr[i]:=5;							END;	END;	 {of huge CASE statement}	FOR i:=1 TO NoCntry DO		BEGIN			x:=Idkgray;			IF SortArr[i]<Scale3 THEN x:=Igray;			IF SortArr[i]<Scale2 THEN x:=Iltgray;			IF SortArr[i]<Scale1 THEN x:=Iwhite;			IF i=HitCntry THEN x:=IBlack;			FillCntry(i,x);		END;	WritScor;	IF NewNdxFlag THEN		BEGIN			ClearRect(450,20,500,40); 			TextFont(0); 			MoveTo(450,36); 			MyWrite(Year);			IF TwoPFlag THEN				BEGIN					ClearRect(90,324,194,340);					MoveTo(90,340); 					IF Human=1 THEN DrawString('USA holds mouse') 										 ELSE DrawString('USSR holds mouse');				END;			ClearRect(326,220,434,298);			ClearRect(326,280,458,298);			SetRect(TitleRect,195,300,510,322);			FillRect(TitleRect,white);			IF OldVHigh>0 THEN				BEGIN					PenSize(3,3); 					FrameRect(TitleRect); 					PenSize(1,1);					x:=OldVHigh+505;					IF (OldVHigh>=WhoDipRel) & NOT GoingOut THEN x:=x+16;					StrHandle:=GetString(x);					j:=1;						k:=1;					REPEAT k:=k+1; UNTIL StrHandle^^[k] = '*';					TempStrng:=Copy(StrHandle^^,j,k-j);					SmlStrng:=' ';					IF (OldVHigh>=WhoDipRel) & (OldVHigh<=WhoAtWar)						THEN SmlStrng:=Concat(' ',CntryNam[HitCntry]);					TempStrng:=Concat(TempStrng,SmlStrng);					TextFont(0); 					MoveTo(200,315); 					DrawString(TempStrng);					TextFont(1); 					TextSize(9);					FOR i:=1 TO 4 DO	 {draw and label map key}						BEGIN							SetRect(TitleRect,326,200+20*i,338,215+20*i);							CASE i OF								1: FillRect(TitleRect,white);								2: FillRect(TitleRect,ltgray);								3: FillRect(TitleRect,gray);								4: FillRect(TitleRect,dkgray);							END;							FrameRect(TitleRect);							k:=k+1;								j:=k;							REPEAT k:=k+1; UNTIL StrHandle^^[k] = '*';							TempStrng:=Copy(StrHandle^^,j,k-j);							MoveTo(342,213+20*i);							IF NOT ((OldVHigh=MEvents) & (i>1) & ((5-Level)>i)) 								THEN DrawString(TempStrng);						END;					ReleaseResource(pointer(StrHandle));					TextFont(0); 					TextSize(12);				END;			{PenSize(2,2);			MoveTo(2,167);			LineTo(2,239);			LineTo(86,239);			LineTo(86,187);			LineTo(66,167);			LineTo(2,167);			MoveTo(8,237);			SetRect(TitleRect,2,243,88,340); 			FrameRect(TitleRect);			TextFont(1);			TextSize(9);			DrawString('Central America');			MoveTo(51,254);			DrawString('Middle');			MoveTo(55,262);			DrawString('East');			PenNormal;			TextSize(12);			TextFont(0);}		END; {of new index IF}END;{********************************************************************************}PROCEDURE ReviseMenu;	{revises the menu in response to choice of country}VAR i:	Integer;BEGIN	IF TwoPFlag THEN		BEGIN			EnableItem(MenuArr[1],4);			IF TwoPActF THEN EnableItem(MenuArr[1],2) ELSE DisableItem(MenuArr[1],2);		END;	FOR i:=1 TO 8 DO EnableItem(MenuArr[2],i);	IF HitCntry=0 THEN		BEGIN		 DisableItem(MenuArr[3],0);		 DisableItem(MenuArr[4],0);		 DisableItem(MenuArr[5],1);		 DisableItem(MenuArr[6],1); 		 DisableItem(MenuArr[6],3);		 {$IFC DebugFlg}			 DisableItem(MenuArr[7],1); DisableItem(MenuArr[7],3);		 {$ENDC}		END	ELSE		BEGIN		 EnableItem(MenuArr[3],0);		 FOR i:=1 TO 14 DO EnableItem(MenuArr[3],i);		 EnableItem(MenuArr[5],1);		 EnableItem(MenuArr[6],1); 		 EnableItem(MenuArr[6],3);		 {$IFC DebugFlg}			 EnableItem(MenuArr[7],1); EnableItem(MenuArr[7],3);		 {$ENDC}			IF HitCntry<3				THEN 					BEGIN						DisableItem(MenuArr[4],0);						FOR i:=6 TO 10 DO EnableItem(MenuArr[3],i);						DisableItem(MenuArr[6],3);					END				ELSE					BEGIN						EnableItem(MenuArr[4],0); 						FOR i:=1 TO 9 DO EnableItem(MenuArr[4],i);						FOR i:=6 TO 10 DO DisableItem(MenuArr[3],i);						EnableItem(MenuArr[6],3);					END;		END;	IF Level=1 THEN		BEGIN			FOR i:=5 TO 8 DO DisableItem(MenuArr[2],i);			FOR i:=6 TO 14 DO DisableItem(MenuArr[3],i);			FOR i:=5 TO 9 DO DisableItem(MenuArr[4],i);			IF HitCntry>2 THEN DisableItem(MenuArr[3],0);		END;	IF Level=2 THEN		BEGIN			FOR i:=6 TO 8 DO DisableItem(MenuArr[2],i);			FOR i:=8 TO 14 DO DisableItem(MenuArr[3],i);			FOR i:=7 TO 9 DO DisableItem(MenuArr[4],i);			IF HitCntry>2 THEN DisableItem(MenuArr[3],0);		END;	IF Level=3 THEN		BEGIN			DisableItem(MenuArr[2],8);			FOR i:=10 TO 14 DO DisableItem(MenuArr[3],i);			IF HitCntry>2 THEN DisableItem(MenuArr[3],0);			DisableItem(MenuArr[4],9);		END;	IF (Year<1990) OR NoUndoFlag THEN DisableItem(MenuArr[1],3) ELSE EnableItem(MenuArr[1],3);	IF WinFlag THEN		BEGIN			DisableItem(MenuArr[1],2); 			DisableItem(MenuArr[1],3);			DisableItem(MenuArr[1],4);			DisableItem(MenuArr[4],0);			DisableItem(MenuArr[5],0);		END;	DrawMenuBar;END;{********************************************************************************}PROCEDURE DoCloseUp;VAR	i,j,k,x,y,yy:	Integer;	SumIntvG:			Integer;	SumIntvR:			Integer;	SumMiltG:			Integer;	SumMiltR:			Integer;	MaxIntv:			Integer;	MaxMAid:			Integer;	Sum:					Integer;	MaxNum:				Integer;	DAij:					Integer;	MaxVal:				Integer;	Val:					Integer;	SumEconA:			Integer;	OldVal:				Integer;	Count:				Integer;	Column:				Integer;	Who:					Integer;	Max:					Integer;	VertCord:			Integer;	TempStrng:		Str255;	JunkFlag:			Boolean;	ClickFlg:			Boolean;	StrHandle:		StringHandle;	LongX:			 	LongInt;	AvlResrc:			Integer;BEGIN  SaveMap;	MyWind:=GetNewWindow(140,NIL,POINTER(-1));	SetPort(MyWind);	TempStrng:=ConCat('Closeup:	',CntryNam[HitCntry]);	SetWTitle(MyWind,TempStrng);	CASE Level OF			1: Count:=6;			2: Count:=8;			3: Count:=12;			4: Count:=12;		END;	TextFace([bold]);	IF (HitCntry=Human) OR (HitCntry=Cmptr)		THEN 			BEGIN 				MoveTo(180,15); 				DrawString('Net Sent');				MoveTo(300,15);				DrawString('Amount Remaining');			END		ELSE			BEGIN				MoveTo(150,15); 				DrawString('USA Value');				MoveTo(300,15); 				DrawString('USSR Value');				IF (Level=4) & (HitCntry>2) THEN					BEGIN						MoveTo(410,15);						DrawString('Totals');					END;			END;	FOR j:=1 TO Count DO		BEGIN			MoveTo(2,(j+1)*15);			GetIndString(TempStrng,519+j,1);			DrawString(TempStrng);			DrawString('	');		END;	TextFace([]);	FOR Column:=1 TO 2 DO	BEGIN		Who:=Column;		IF HitCntry>2 THEN		BEGIN		MaxVal:=5; 		MaxNum:=5;		MaxPolcy(Who,MaxIntv,MaxMAid);		DAij:=DipAff^^[Who,HitCntry];		FOR j:=1 TO Count DO			BEGIN				CASE j OF					1: BEGIN Val:=(DAij+127) div 28; MaxNum:=8; MaxVal:=128; OldVal:=Val; END;					2: Val:=(ord4(DAij)*PrestVal[HitCntry]) div 1024;					3: BEGIN							 Val:=MiltAid^^[Who,HitCntry];							 MaxVal:=MilMax(DAij);							 IF MaxMAid<MaxVal THEN MaxVal:=MaxMAid;							 OldVal:=MiltAOld^^[Who,HitCntry];						 END;					4: BEGIN							 Val:=InsgAid^^[Who,HitCntry];							 MaxVal:=MaxMAid;							 x:=0;							 IF StrngRat[HitCntry]<512 THEN x:=1;							 IF StrngRat[HitCntry]<128 THEN x:=2;							 IF StrngRat[HitCntry]<32	 THEN x:=3;							 IF StrngRat[HitCntry]<8	 THEN x:=4;							 IF StrngRat[HitCntry]<2	 THEN x:=5;							 IF x<MaxVal THEN MaxVal:=x;							 x:=InsgAMax(Who,HitCntry);							 IF x<MaxVal THEN MaxVal:=x;							 OldVal:=InsgAOld^^[Who,HitCntry];						 END;					5: BEGIN							 Val:=IntvGovt^^[Who,HitCntry]; 							 x:=Treaty[Who,HitCntry];							 OldVal:=IntvGOld^^[Who,HitCntry];							 MaxVal:=IntvGMax(x,DAij);							 IF MaxIntv<MaxVal THEN MaxVal:=MaxIntv;						 END;					6: BEGIN							 Val:=IntvRebl^^[Who,HitCntry]; 							 OldVal:=IntvROld^^[Who,HitCntry];							 MaxVal:=MaxIntv;							 x:=InsgIMax(Who,HitCntry);							 IF x<MaxVal THEN MaxVal:=x;						 END;					7: BEGIN							Val:=EconAid[Who,HitCntry]; 							OldVal:=EconAOld[Who,HitCntry];							MaxVal:=EconAMax(DAij);							Sum:=0; 							FOR i:=3 TO NoCntry DO Sum:=Sum+EconConv(EconAid[Who,i]);							x:=5; 							y:=(GNP[Who] div 44)-(2*Sum);							FOR i:=4 DOWNTO 0 DO IF EconConv(i+1)>y THEN x:=i;							IF x<MaxVal THEN MaxVal:=x;						 END;					8: BEGIN							 Val:=Destab[Who,HitCntry]; 							 OldVal:=DestaOld[Who,HitCntry];							 MaxVal:=5;						 END;					9: BEGIN							 Val:=Pressure[Who,HitCntry]; 							 OldVal:=PressOld[Who,HitCntry];							 MaxVal:=5;						 END;					10: BEGIN							 Val:=Treaty[Who,HitCntry]; 							 OldVal:=TreatOld[Who,HitCntry];							 MaxVal:=TreatMax(Integrty[Who]+DAij-Pugnacty[Who]);						 END;				 11: BEGIN							 Val:=0; 							 OldVal:=Val;							 y:=FinlProb[Who,HitCntry];							 IF y>31 THEN Val:=(y-8) div 24;							 MaxNum:=4; 							 MaxVal:=99; 							 OldVal:=Val;						 END;				 12: BEGIN							 y:=FinlProb[Who,HitCntry]-OldFinPb[Who,HitCntry];							 Val:=(y+18) div 4;								 OldVal:=Val;							 MaxNum:=9; 							 MaxVal:=99;						 END;				END;			IF j=2 THEN BEGIN MoveTo(150*Column+11,45); MyWrite(Val); END			ELSE			BEGIN			IF Val>MaxNum THEN Val:=MaxNum;			IF Val<0 THEN Val:=0;			x:=150*Column; 			y:=(j+1)*15;			IF (j>2) AND (j<10) THEN				BEGIN					IF Val>OldVal THEN						BEGIN							MoveTo(x,y);							LineTo(x,y-11); LineTo(x+2,y-6); LineTo(x-2,y-6);							LineTo(x,y-11); LineTo(x-1,y-7); LineTo(x+1,y-7);						END;					IF Val<OldVal THEN						BEGIN							MoveTo(x,y-11);							LineTo(x,y); LineTo(x+2,y-5); LineTo(x-2,y-5);							LineTo(x,y); LineTo(x-1,y-4); LineTo(x+1,y-4);						END;				END;			MoveTo(150*Column+10,(j+1)*15);			GetIndString(TempStrng,519+j,Val+2);			IF MaxVal<=Val THEN DrawString('{');			DrawString(TempStrng);			IF MaxVal<=Val THEN DrawString('}');			END; {of j=2 test}		END; {of j-loop}		x:=PrestVal[HitCntry] div 8; 		MoveTo(410,45); 		DrawString('{'); 		MyWrite(x);		DrawString('}');	END; {of Who<>HitCntry test}	END; {of monster Column loop}	IF (Level=4) & (HitCntry>2) THEN		BEGIN {compute and write totals}			FOR j:=1 TO 4 DO				BEGIN					CASE j OF						1:	BEGIN									Sum:=0;									FOR k:=1 TO NoCntry DO 										Sum:=Sum+MAidConv(MiltAid^^[k,HitCntry]);								END;						2:	BEGIN									Sum:=0;									FOR k:=1 TO NoCntry DO 										Sum:=Sum+MAidConv(InsgAid^^[k,HitCntry]);								END;						3:	BEGIN									Sum:=0;									FOR k:=1 TO NoCntry DO 										Sum:=Sum+IntvConv(IntvGovt^^[k,HitCntry]);								END;						4:	BEGIN									Sum:=0;									FOR k:=1 TO NoCntry DO 										Sum:=Sum+IntvConv(IntvRebl^^[k,HitCntry]);								END;					END;					MoveTo(410,(j+3)*15);					IF (j<3) THEN						BEGIN							DrawString('$');							IF Sum<1638 THEN Sum:=Sum*20													ELSE Sum:=32767;						END;					MyWrite(Sum);					IF (j>2) THEN						BEGIN							IF Sum>0 THEN DrawString(',000 men')											 ELSE DrawString(' men');						END					ELSE DrawString(' million');				END;		END;	MoveTo(140,30+Count*15); 	TextFace([bold]);	DrawString('Values in {brackets} are maximum possible');	TextFace([]);	IF HitCntry<3 THEN		BEGIN			SumIntvG:=0; 			SumIntvR:=0; 			SumMiltG:=0; 			SumMiltR:=0; 			SumEconA:=0;			FOR i:=3 TO NoCntry DO				BEGIN					SumIntvG:=SumIntvG+IntvConv(IntvGovt^^[HitCntry,i]);					SumIntvR:=SumIntvR+IntvConv(IntvRebl^^[HitCntry,i]);					SumMiltG:=SumMiltG+MAidConv(MiltAid^^[HitCntry,i]);					SumMiltR:=SumMiltR+MAidConv(InsgAid^^[HitCntry,i]);					SumEconA:=SumEconA+EconConv(EconAid[HitCntry,i]);				END;			FOR j:=3 TO Count DO				BEGIN					CASE j OF						3: BEGIN								y:=2*SumMiltG;							 	AvlResrc:=2*((MiltSpnd[HitCntry] div 8)+GovtAid[HitCntry]);							 END;						4: BEGIN								y:=2*SumMiltR;							  AvlResrc:=2*((MiltSpnd[HitCntry] div 8)+GovtAid[HitCntry]);							 END;						5: BEGIN								y:=SumIntvG;							 	AvlResrc:=(MilMen[HitCntry] div 4)-TotlIntv[HitCntry];							 END;						6: BEGIN								y:=SumIntvR;							 	AvlResrc:=(MilMen[HitCntry] div 4)-TotlIntv[HitCntry];							 END;						7: BEGIN								y:=2*SumEconA;							 	AvlResrc:=(GNP[HitCntry] div 44)-y;							 END;					END; {of CASE statement}					IF j<8 THEN						BEGIN							MoveTo(160,15+j*15);							MyWrite(y);							IF ((j=3) OR (j=4)) AND (y<>0) THEN DrawString('0 million$');							IF ((j=5) OR (j=6)) AND (y<>0) THEN DrawString(',000');							IF (j=7) AND (y<>0) THEN DrawString('00 million$');							MoveTo(320,15+j*15);							MyWrite(AvlResrc);							IF ((j=3) OR (j=4)) AND (AvlResrc<>0) THEN DrawString('0 million$');							IF ((j=5) OR (j=6)) AND (AvlResrc<>0) THEN DrawString(',000');							IF (j=7) AND (AvlResrc<>0) THEN DrawString('00 million$');						END;				END; {of j-loop -- now enter domestic information}		END; {of test for superpowers}	Count:=4; 	IF Level>1 THEN Count:=5;	FOR j:=1 TO Count DO		BEGIN			CASE j OF				1: BEGIN						 y:=StrngRat[HitCntry]; x:=0;						 IF y>1 THEN x:=1;						 IF y>7 THEN x:=2;						 IF y>31 THEN x:=3;						 IF y>127 THEN x:=4;						 IF y>511 THEN x:=5;						 IF y>2047 THEN x:=6;						 Max:=8;						 Val:=(GovtStrg[HitCntry] div ((InsgStrg[HitCntry] div 5)+1))								 -(OldGStrg[HitCntry] div ((OldIStrg[HitCntry] div 5)+1))+1;						 MaxVal:=2;					END;				2: BEGIN x:=(GovtWing[HitCntry]+128) div 16; Max:=15; END;				3: BEGIN						x:=0;						y:=MilPowr[HitCntry];						IF y>20 THEN x:=1;						IF y>40 THEN x:=2;						IF y>100 THEN x:=3;						IF y>200 THEN x:=4;						IF y>500 THEN x:=5;						IF y>1000 THEN x:=6;						IF y>2000 THEN x:=7;						Max:=7;					 END;				4: BEGIN x:=(((ord4(DontMess[HitCntry])-AveDMess)*8) div AveDMess)+6; Max:=12; END;				5: BEGIN						x:=GPopular[HitCntry] div 2; Max:=7;						Val:=3+GPopular[HitCntry]-OldGPopl[HitCntry]; MaxVal:=6;					 END;			END;		IF x>Max THEN x:=Max;		IF x<0 THEN x:=0;		MoveTo(2,209+14*j);		GetIndString(TempStrng,629+j,1);		TextFace([bold]); 		DrawString(TempStrng);		DrawString('	');		GetIndString(TempStrng,629+j,x+2);		TextFace([]); DrawString(TempStrng);		IF (j=5) OR (j=1) THEN			BEGIN				IF Val<1 THEN Val:=1; IF Val>MaxVal THEN Val:=MaxVal;				DrawString(' -- ');				IF j=5 THEN x:=635 ELSE x:=636;				GetIndString(TempStrng,x,Val);				DrawString(TempStrng);			END;	END; {of j-loop}	StrHandle:=GetString(1000+HitCntry);	j:=1;	 i:=1;	REPEAT i:=i+1; UNTIL StrHandle^^[i] = '*';	i:=i+1;	j:=i;	REPEAT i:=i+1; UNTIL StrHandle^^[i] = '*';	TempStrng:=Copy(StrHandle^^,j,i-j);	MoveTo(2,294);	TextFace([bold]); DrawString('Capital: ');	TextFace([]); DrawString(TempStrng);	i:=i+1;	j:=i;	REPEAT i:=i+1; UNTIL StrHandle^^[i] = '*';	i:=i+1;	j:=i;	REPEAT i:=i+1; UNTIL StrHandle^^[i] = '*';	IF LeftPowr[HitCntry] THEN		BEGIN			i:=i+1;	j:=i;			REPEAT i:=i+1; UNTIL StrHandle^^[i] = '*';		END;	TempStrng:=Copy(StrHandle^^,j,i-j);	MoveTo(200,294);	TextFace([bold]); 	DrawString('Insurgency: ');	TextFace([]); 	DrawString(TempStrng);	ReleaseResource(pointer(StrHandle));	ClickFlg:=FALSE;	REPEAT		JunkFlag:=GetNextEvent(everyEvent,myEvent);		IF myEvent.what=Mousedown THEN			BEGIN				IF FindWindow(myEvent.where,MyWind)=inGoAway THEN					BEGIN						IF TrackGoAway(MyWind,myEvent.where) THEN							BEGIN								SetPort(MainWind);								KillControls(MyWind);								DisposeWindow(MyWind);								RedrawMap;								ClickFlg:=TRUE;							END;					END;			END;	UNTIL ClickFlg;END;{********************************************************************************}PROCEDURE LoadGame;VAR	i,x:		Integer;	y,z:		LongInt;	error,Cerror:	OSErr;BEGIN	FOR i:=1 TO NoCntry DO CntryCol[i]:=9;	error:=FSOpen('SavedGame',0,StartDummy);	IF error=0 THEN		BEGIN			DisposHandle(Handle(DipAff));			DisposHandle(Handle(MiltAid));			DisposHandle(Handle(IntvGovt));			DisposHandle(Handle(InsgAid));			DisposHandle(Handle(IntvRebl));			DisposHandle(Handle(MiltAOld));			DisposHandle(Handle(InsgAOld));			DisposHandle(Handle(IntvGOld));			DisposHandle(Handle(IntvROld));			DisposHandle(Handle(MinorSph));			DisposHandle(BufferHandle);			FOR i:=1 TO 4 DO DisposPtr(AdvisorFace[i].baseAddr);			error:=SetFPos(StartDummy,1,0);			y:=LongInt(@StartDummy)-LongInt(@EndDummy);			error:=FSRead(StartDummy,y,@EndDummy);			DipAff:= 	TwoDHndl(NewHandle(SizeOf(TwoDArr)));			MiltAid:=	TwoDHndl(NewHandle(SizeOf(TwoDArr)));			IntvGovt:=TwoDHndl(NewHandle(SizeOf(TwoDArr)));			InsgAid:=	TwoDHndl(NewHandle(SizeOf(TwoDArr)));			IntvRebl:=TwoDHndl(NewHandle(SizeOf(TwoDArr)));			MiltAOld:=TwoDHndl(NewHandle(SizeOf(TwoDArr)));			InsgAOld:=TwoDHndl(NewHandle(SizeOf(TwoDArr)));			IntvGOld:=TwoDHndl(NewHandle(SizeOf(TwoDArr)));			IntvROld:=TwoDHndl(NewHandle(SizeOf(TwoDArr)));			MinorSph:=TwoFHndl(NewHandle(SizeOf(TwoFArr)));			BufferHandle:=NewHandle(21888);			y:=SizeOf(TwoDArr);			IF error=0 THEN error:=FSRead(StartDummy,y,@DipAff^^);			IF error=0 THEN error:=FSRead(StartDummy,y,@MiltAid^^);			IF error=0 THEN error:=FSRead(StartDummy,y,@IntvGovt^^);			IF error=0 THEN error:=FSRead(StartDummy,y,@InsgAid^^);			IF error=0 THEN error:=FSRead(StartDummy,y,@IntvRebl^^);			IF error=0 THEN error:=FSRead(StartDummy,y,@MiltAOld^^);			IF error=0 THEN error:=FSRead(StartDummy,y,@InsgAOld^^);			IF error=0 THEN error:=FSRead(StartDummy,y,@IntvGOld^^);			IF error=0 THEN error:=FSRead(StartDummy,y,@IntvROld^^);			y:=SizeOf(TwoFArr);			IF error=0 THEN error:=FSRead(StartDummy,y,@MinorSph^^);			IF error<>0 THEN				BEGIN					x:=StopAlert(336,NIL);					error:=0;					QuitFlag:=TRUE;				END			ELSE				BEGIN					ClearRect(220,20,340,44);					IF HitCntry>0 THEN						BEGIN							FillRgn(CntryRgn[HitCntry],black);							FrameRgn(CntryRgn[HitCntry]);							MoveTo(220,40);							DrawString(CntryNam[HitCntry]);						END;					FOR x:=1 TO NoCntry DO CntryCol[x]:=99;					ReviseMap(TRUE); 					ReviseMenu;					ClearRect(450,20,500,40); 					TextFont(0); 					TextSize(12); 					MoveTo(450,36); 					MyWrite(Year);					WritScor;					SetRect(BufferRect,0,20,512,342);					BufferMap.rowBytes:=64;					BufferMap.bounds:=BufferRect;					SaveMap;				END;		END;	IF error<>0 THEN x:=StopAlert(335,NIL);	Cerror:=FSClose(StartDummy);	ReadFaces;END;{********************************************************************************}PROCEDURE SaveGame;VAR	x:	Integer;	y:		LongInt;	error,CError:	OSErr;BEGIN	REPEAT		error:=Create('SavedGame',0,'ARMS','ARMF');		error:=FSOpen('SavedGame',0,StartDummy);		y:=LongInt(@StartDummy)-LongInt(@EndDummy);		error:=FSWrite(StartDummy,y,@EndDummy);		y:=SizeOf(TwoDArr);		IF error=0 THEN error:=FSWrite(StartDummy,y,@DipAff^^);		IF error=0 THEN error:=FSWrite(StartDummy,y,@MiltAid^^);		IF error=0 THEN error:=FSWrite(StartDummy,y,@IntvGovt^^);		IF error=0 THEN error:=FSWrite(StartDummy,y,@InsgAid^^);		IF error=0 THEN error:=FSWrite(StartDummy,y,@IntvRebl^^);		IF error=0 THEN error:=FSWrite(StartDummy,y,@MiltAOld^^);		IF error=0 THEN error:=FSWrite(StartDummy,y,@InsgAOld^^);		IF error=0 THEN error:=FSWrite(StartDummy,y,@IntvGOld^^);		IF error=0 THEN error:=FSWrite(StartDummy,y,@IntvROld^^);		y:=SizeOf(TwoFArr);		IF error=0 THEN error:=FSWrite(StartDummy,y,@MinorSph^^);		Cerror:=FSClose(StartDummy);		Cerror:=FlushVol(NIL,0);		IF error=WPrErr THEN			BEGIN				Cerror:=FSDelete('SavedGame',0);				SaveMap;				Cerror:=Eject(NIL,0);				x:=StopAlert(339,NIL);				ReDrawMap;			END		ELSE			BEGIN				IF error=DskFulErr THEN					BEGIN						Cerror:=FSDelete('SavedGame',0);						SaveMap;						Cerror:=Eject(NIL,0);						x:=StopAlert(338,NIL);						ReDrawMap;					END				ELSE					BEGIN						IF error<>0 THEN							BEGIN								Cerror:=FSDelete('SavedGame',0);								SaveMap;								Cerror:=Eject(NIL,0);								x:=StopAlert(335,NIL);								ReDrawMap;							END;					END;			END;	UNTIL error=0;END;{**************************************************************************}END.