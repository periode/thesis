@article{10.1016/S0020-7373(05)80090-2,
  title = {The Initial Stage of Program Comprehension},
  author = {Wiedenbeck, Susan},
  year = {1991},
  month = nov,
  volume = {35},
  number = {4},
  pages = {517--540},
  publisher = {{Academic Press Ltd.}},
  address = {{GBR}},
  issn = {0020-7373},
  doi = {10.1016/S0020-7373(05)80090-2},
  issue_date = {Oct. 1991}
}

@inproceedings{abbes_empirical_2011,
  title = {An {{Empirical Study}} of the {{Impact}} of {{Two Antipatterns}}, {{Blob}} and {{Spaghetti Code}}, on {{Program Comprehension}}},
  booktitle = {2011 15th {{European Conference}} on {{Software Maintenance}} and {{Reengineering}}},
  author = {Abbes, Marwen and Khomh, Foutse and Gu{\'e}h{\'e}neuc, Yann-Ga{\"e}l and Antoniol, Giuliano},
  year = {2011},
  month = mar,
  pages = {181--190},
  issn = {1534-5351},
  doi = {10.1109/CSMR.2011.24},
  abstract = {Antipatterns are "poor" solutions to recurring design problems which are conjectured in the literature to make object-oriented systems harder to maintain. However, little quantitative evidence exists to support this conjecture. We performed an empirical study to investigate whether the occurrence of antipatterns does indeed affect the understandability of systems by developers during comprehension and maintenance tasks. We designed and conducted three experiments, with 24 subjects each, to collect data on the performance of developers on basic tasks related to program comprehension and assessed the impact of two antipatterns and of their combinations: Blob and Spaghetti Code. We measured the developers' performance with: (1) the NASA task load index for their effort, (2) the time that they spent performing their tasks, and, (3) their percentages of correct answers. Collected data show that the occurrence of one antipattern does not significantly decrease developers' performance while the combination of two antipatterns impedes significantly developers. We conclude that developers can cope with one antipattern but that combinations of antipatterns should be avoided possibly through detection and refactorings.},
  keywords = {Analysis of variance,Antipatterns,Blob,Empirical Software Engineering,Indexes,Java,Maintenance engineering,NASA,Program Comprehension,Program Maintenance,Programming,Spaghetti Code,Time measurement},
  file = {/home/pierre/Zotero/storage/V7UY2XSU/Abbes et al. - 2011 - An Empirical Study of the Impact of Two Antipatter.pdf;/home/pierre/Zotero/storage/22H4FDMY/5741260.html}
}

@book{abelson_structure_1979,
  title = {Structure and {{Interpretation}} of {{Computer Programs}} - 2nd {{Edition}}},
  author = {Abelson, Harold and Sussman, Gerald Jay and Sussman, Julie},
  year = {1979},
  publisher = {{Justin Kelly}},
  abstract = {Structure and Interpretation of Computer Programs by Harold Abelson and Gerald Jay Sussman is licensed under a Creative Commons Attribution-NonCommercial 3.0 License.},
  langid = {english},
  keywords = {Computers / Computer Science}
}

@misc{akesson_mind_2017,
  title = {A {{Mind Is Born}}},
  author = {Akesson, Linus},
  year = {2017},
  urldate = {2021-04-03},
  file = {/home/pierre/Zotero/storage/MLTQE9H7/a-mind-is-born.html}
}

@misc{akten_journey_2016,
  title = {A Journey through Multiple Dimensions and Transformations in {{SPACE}}},
  author = {Akten, Memo},
  year = {2016},
  month = sep,
  journal = {Artists + Machine Intelligence},
  urldate = {2023-03-08},
  abstract = {This is an expanded transcript of a guest lecture I gave at the School of Ma in Berlin, in July 2016, during Gene Kogan's ``Machine Learning\ldots},
  langid = {english},
  file = {/home/pierre/Zotero/storage/MAHAHRDH/a-journey-through-multiple-dimensions-and-transformations-in-space-the-final-frontier-d8435d81c.html}
}

@book{alexander_pattern_1977,
  title = {A {{Pattern Language}}: {{Towns}}, {{Buildings}}, {{Construction}}},
  shorttitle = {A {{Pattern Language}}},
  author = {Alexander, Christopher and Ishikawa, Sara and Silverstein, Murray and Jacobson, Max and {Fiksdahl-King}, Ingrid and Angel, Shlomo},
  year = {1977},
  month = jan,
  publisher = {{Oxford University Press}},
  address = {{New York}},
  abstract = {You can use this book to design a house for yourself with your family; you can use it to work with your neighbors to improve your town and neighborhood; you can use it to design an office, or a workshop, or a public building. And you can use it to guide you in the actual process of construction. After a ten-year silence, Christopher Alexander and his colleagues at the Center for Environmental Structure are now publishing a major statement in the form of three books which will, in their words, "lay the basis for an entirely new approach to architecture, building and planning, which will we hope replace existing ideas and practices entirely." The three books are The Timeless Way of Building, The Oregon Experiment, and this book, A Pattern Language. At the core of these books is the idea that people should design for themselves their own houses, streets, and communities. This idea may be radical (it implies a radical transformation of the architectural profession) but it comes simply from the observation that most of the wonderful places of the world were not made by architects but by the people. At the core of the books, too, is the point that in designing their environments people always rely on certain "languages," which, like the languages we speak, allow them to articulate and communicate an infinite variety of designs within a forma system which gives them coherence. This book provides a language of this kind. It will enable a person to make a design for almost any kind of building, or any part of the built environment. "Patterns," the units of this language, are answers to design problems (How high should a window sill be? How many stories should a building have? How much space in a neighborhood should be devoted to grass and trees?). More than 250 of the patterns in this pattern language are given: each consists of a problem statement, a discussion of the problem with an illustration, and a solution. As the authors say in their introduction, many of the patterns are archetypal, so deeply rooted in the nature of things that it seemly likely that they will be a part of human nature, and human action, as much in five hundred years as they are today.},
  isbn = {978-0-19-501919-3},
  langid = {english}
}

@book{alexander_timeless_1979,
  title = {The {{Timeless Way}} of {{Building}}},
  author = {Alexander, Christopher},
  year = {1979},
  publisher = {{Oxford University Press}},
  abstract = {The theory of architecture implicit in our world today, Christopher Alexander believes, is bankrupt. More and more people are aware that something is deeply wrong. Yet the power of present-day ideas is so great that many feel uncomfortable, even afraid, to say openly that they dislike what is happening, because they are afraid to seem foolish, afraid perhaps that they will be laughed at.Now, at last, there is a coherent theory which describes in modern terms an architecture as ancient as human society itself.The Timeless Way of Building is the introductory volume in the Center for Environmental Structure series, Christopher Alexander presents in it a new theory of architecture, building, and planning which has at its core that age-old process by which the people of a society have always pulled the order of their world from their own being.Alexander writes, "There is one timeless way of building. It is thousands of years old, and the same today as it has always been. The great traditional buildings of the past, the villages and tents and temples in which man feels at home, have always been made by people who were very close to the center of this way. And as you will see, this way will lead anyone who looks for it to buildings which are themselves as ancient in their form as the trees and hills, and as our faces are."},
  isbn = {978-0-19-502402-9},
  langid = {english},
  keywords = {Architecture / Design,Architecture / Study \& Teaching,Architecture / Urban \& Land Use Planning,Drafting,Drawing \& Presentation}
}

@article{anthes_beauty_2011,
  title = {Beauty and Elegance},
  author = {Anthes, Gary},
  year = {2011},
  month = jun,
  journal = {Communications of the ACM},
  volume = {54},
  number = {6},
  pages = {14--15},
  issn = {0001-0782},
  doi = {10.1145/1953122.1953131},
  urldate = {2022-06-06},
  abstract = {Leslie Valiant talks about machine learning; parallel computing, and his quest for simplicity.}
}

@article{aquilina_computational_2015,
  title = {The {{Computational Sublime}} in {{Nick Montfort}}'s `{{Round}}' and `{{All}} the {{Names}} of {{God}}'},
  author = {Aquilina, Mario},
  year = {2015},
  month = dec,
  journal = {CounterText},
  volume = {1},
  pages = {348--365},
  doi = {10.3366/count.2015.0027},
  abstract = {What if the post-literary also meant that which operates in a literary space (almost) devoid of language as we know it: for instance, a space in which language simply frames the literary or poetic rather than `containing' it? What if the countertextual also meant the (en)countering of literary text with non-textual elements, such as mathematical concepts, or with texts that we would not normally think of as literary, such as computer code? This article addresses these issues in relation to Nick Montfort's \#!, a 2014 print collection of poems that presents readers with the output of computer programs as well as the programs themselves, which are designed to operate on principles of text generation regulated by specific constraints. More specifically, it focuses on two works in the collection, `Round' and `All the Names of God', which are read in relation to the notions of the `computational sublime' and the `event'.},
  file = {/home/pierre/Zotero/storage/2CA5RYJJ/Aquilina - 2015 - The Computational Sublime in Nick Montfort's â€˜Roun.pdf}
}

@misc{arcfide_don_2017,
  title = {Don't Complain That {{Chinese}} Is Ugly and Unreadable Just Because You Speak {{Englis}}... | {{Hacker News}}},
  author = {{arcfide}},
  year = {2017},
  month = may,
  urldate = {2023-03-10},
  howpublished = {https://news.ycombinator.com/item?id=13571159},
  file = {/home/pierre/Zotero/storage/P3BX28HC/item.html}
}

@book{arendt_human_1998,
  title = {The Human Condition},
  author = {Arendt, Hannah},
  year = {1998},
  edition = {2nd ed. / introduction by Margaret Canovan.},
  publisher = {{University of Chicago Press}},
  address = {{Chicago}},
  keywords = {Economics,Sociology,Technology}
}

@book{aristotle_metaphysics_2006,
  title = {Metaphysics},
  author = {{Aristotle}},
  year = {2006},
  publisher = {{Stilwell, KS : Digireads.com}},
  urldate = {2023-03-24},
  abstract = {164 pages ; 23 cm; Translated from the Ancient Greek},
  collaborator = {{Internet Archive}},
  isbn = {978-1-4209-2749-8},
  langid = {english},
  keywords = {Metaphysics -- Early works to 1800}
}

@book{arnaud_poemes_1968,
  title = {{Po\`emes ALGOL}},
  author = {Arnaud, No{\"e}l},
  year = {1968},
  publisher = {{Temps m\'el\'ees}},
  googlebooks = {e59aGwAACAAJ},
  langid = {french}
}

@article{arns_code_2005,
  title = {Code as Performative Speech Act},
  author = {Arns, Inke},
  year = {2005},
  month = may,
  journal = {Artnodes},
  volume = {0},
  number = {4},
  issn = {1695-5951},
  doi = {10.7238/a.v0i4.727},
  urldate = {2021-03-29},
  abstract = {Software art involves an artistic activity which, in the medium \textemdash or rather, the material\textemdash{} of software, allows for critical reflection on software (and its cultural impact). It thus highlights the aesthetic and political subtexts of seemingly neutral technical commands. In this article Inke Arns argues that, in the context of software art, a far more interesting notion than the ``generative'' nature of code is its ``performativity''. This notion \textemdash borrowed from speech act theory\textemdash{} not only involves the ability to generate in a technical context, but also encompasses the implications and repercussions of code in terms of aesthetics, politics and society. This article proposes the notion of the performativity of code as one of the reasons for contemporary artists' growing interest in using software as an artistic material.},
  langid = {english},
  file = {/home/pierre/Zotero/storage/CQP9ZIDW/Arns - 2005 - Code as performative speech act.pdf}
}

@book{bakhtin_dialogic_1981,
  title = {The Dialogic Imagination : Four Essays},
  shorttitle = {The Dialogic Imagination},
  author = {Bakhtin, M. M. (Mikhail Mikhailovich)},
  year = {1981},
  publisher = {{Austin : University of Texas Press}},
  urldate = {2023-03-10},
  abstract = {xxxiv, 444 pages ; 24 cm; These essays reveal Mikhail Bakhtin (1895-1975)--known in the West largely through his studies of Rabelais and Dostoevsky--as a philosopher of language, a cultural historian, and a major theoretician of the novel. The Dialogic Imaginationpresents, in superb English translation, four selections fromVoprosy literatury i estetiki(Problems of literature and esthetics), published in Moscow in 1975. The volume also contains a lengthy introduction to Bakhtin and his thought and a glossary of terminology. Bakhtin uses the category "novel" in a highly idiosyncratic way, claiming for it vastly larger territory than has been traditionally accepted. For him, the novel is not so much a genre as it is a force, "novelness," which he discusses in "From the Prehistory of Novelistic Discourse." Two essays, "Epic and Novel" and "Forms of Time and of the Chronotope in the Novel," deal with literary history in Bakhtin's own unorthodox way. In the final essay, he discusses literature and language in general, which he sees as stratified, constantly changing systems of subgenres, dialects, and fragmented "languages" in battle with one another; Translation of: Voprosy literatury i \.estetiki; Includes index; Epic and novel -- From the Prehistory of novelistic discourse -- Forms of time and of the chronotope in the novel -- Discourse in the novel; Includes bibliographical references and index; Translation of: Voprosy literatury i estetiki},
  collaborator = {{Internet Archive}},
  isbn = {978-0-292-71527-1 978-0-292-71534-9},
  langid = {english},
  keywords = {Romans}
}

@book{baofu_future_2007,
  title = {The {{Future}} of {{Aesthetic Experience}} : {{Conceiving}} a {{Better Way}} to {{Understand Beauty}}, {{Ugliness}}, and the {{Rest}}},
  author = {Baofu, Peter},
  year = {2007},
  publisher = {{Cambridge Scholars Publisher}},
  address = {{Newcastle-upon-Tyne, UNKNOWN}},
  isbn = {978-1-4438-0749-4},
  keywords = {Aesthetics.}
}

@misc{barrera_how_2022,
  title = {How the Clipboard Works},
  author = {Barrera, Hugo Osvaldo},
  year = {2022},
  month = oct,
  journal = {Why not Hugo?},
  urldate = {2022-12-09},
  howpublished = {https://whynothugo.nl/journal/2022/10/21/how-the-clipboard-works/},
  file = {/home/pierre/Zotero/storage/EHH64CAM/how-the-clipboard-works.html}
}

@book{barthes_bruissement_1984,
  title = {{Le bruissement de la langue: essais critiques IV}},
  shorttitle = {{Le bruissement de la langue}},
  author = {Barthes, Roland},
  year = {1984},
  publisher = {{Seuil}},
  address = {{Paris}},
  isbn = {978-2-02-006931-1},
  langid = {french}
}

@book{barthes_sz_1977,
  title = {S-{{Z}}},
  author = {Barthes, Roland},
  year = {1977},
  month = may,
  publisher = {{Hill \& Wang}},
  address = {{New York}},
  abstract = {In his first book, French critic Roland Barthes defines the complex nature of writing, as well as the social, historical, political, and personal forces responsible for the formal changes in writing from the classical period to recent times.},
  isbn = {978-0-8090-1384-5},
  langid = {english}
}

@inproceedings{barton_critical_1963,
  title = {A Critical Review of the State of the Programming Art},
  booktitle = {Proceedings of the {{May}} 21-23, 1963, Spring Joint Computer Conference on - {{AFIPS}} '63 ({{Spring}})},
  author = {Barton, R. S.},
  year = {1963},
  pages = {169},
  publisher = {{ACM Press}},
  address = {{Detroit, Michigan}},
  doi = {10.1145/1461551.1461574},
  urldate = {2021-11-10},
  langid = {english}
}

@book{bassett_craftsman_2008,
  title = {The {{Craftsman Revealed}}: {{Adriaen}} de {{Vries}}},
  shorttitle = {The {{Craftsman Revealed}}},
  author = {Bassett, Associate Conservator Department of Decorative Arts {and} Sculpture Conservation Jane and Bassett, Jane L. and Fogelman, Peggy and Scott, David A. and Calif.), Getty Conservation Institute (Los Angeles and Schmidtling, Ronald C.},
  year = {2008},
  publisher = {{Getty Publications}},
  abstract = {The sculptor Adriaen de Vries (1556-1626) spent much of his life working for the most discerning royal courts of the age, including that of Holy Roman Emperor Rudolf II in Prague. A master of composition and technique, De Vries was relatively unknown until the J. Paul Getty Museum's groundbreaking 1999 exhibition Adriaen de Vries: Imperial Sculptor, which firmly established the artist's reputation and afforded a rare opportunity to study in depth a large group of bronzes. This heavily illustrated volume presents the results of the technical study of twenty-five bronzes from the exhibition. Introductory chapters provide background on the artist and technical methodologies. Subsequent chapters present case studies of individual statues, revealing the methods and materials used in their creation. The book will be of great interest to conservators, conservation scientists, art historians, curators, and sculptors.},
  googlebooks = {E8oxCwAAQBAJ},
  isbn = {978-0-89236-919-5},
  langid = {english},
  keywords = {Art / Individual Artists / General,Art / Reference,Art / Sculpture \& Installation}
}

@article{beardsley_aesthetic_1970,
  title = {The {{Aesthetic Point}} of {{View}}*},
  author = {Beardsley, Monroe C.},
  year = {1970},
  journal = {Metaphilosophy},
  volume = {1},
  number = {1},
  pages = {39--58},
  issn = {1467-9973},
  doi = {10.1111/j.1467-9973.1970.tb00784.x},
  urldate = {2021-03-28},
  langid = {english},
  file = {/home/pierre/Zotero/storage/FCU9FDN9/j.1467-9973.1970.tb00784.html}
}

@book{berleant_aesthetics_2007,
  title = {The {{Aesthetics}} of {{Human Environments}}},
  author = {Berleant, Arnold and Carlson, Allen},
  year = {2007},
  publisher = {{Broadview Press}},
  file = {/home/pierre/Zotero/storage/QADIEGLS/BERTAO-15.html}
}

@book{berry_philosophy_2011,
  title = {The {{Philosophy}} of {{Software}}: {{Code}} and {{Mediation}} in the {{Digital Age}}},
  shorttitle = {The {{Philosophy}} of {{Software}}},
  author = {Berry, David M.},
  year = {2011},
  publisher = {{Palgrave-Macmillan}}
}

@book{berry_philosophy_2011a,
  title = {The {{Philosophy}} of {{Software}}: {{Code}} and {{Mediation}} in the {{Digital Age}}},
  shorttitle = {The {{Philosophy}} of {{Software}}},
  author = {Berry, David M.},
  year = {2011},
  publisher = {{Palgrave-Macmillan}}
}

@book{bertram_code_2012,
  title = {Code \{poems\}},
  author = {Bertram, Ishac},
  year = {2012},
  publisher = {{Impremta Badia}},
  address = {{Barcelona}},
  urldate = {2022-04-29},
  abstract = {A compilation of poetry written with code. \_\_\_ Code can speak literature, logic, maths. It contains different layers of abstraction and it links...},
  file = {/home/pierre/Zotero/storage/JVUA6PG4/code-poems.html}
}

@article{black_art_2002,
  title = {The Art of Code},
  author = {Black, Maurice Joseph},
  year = {2002},
  month = jan,
  journal = {Dissertations available from ProQuest},
  pages = {1--228},
  file = {/home/pierre/Zotero/storage/Z6742SW7/AAI3072974.html}
}

@book{black_guilds_1984,
  title = {Guilds and {{Civil Society}} in {{European Political Thought}} from the {{Twelfth Century}} to the {{Present}}},
  author = {Black, Antony},
  year = {1984},
  publisher = {{Methuen}},
  googlebooks = {oQMOAAAAQAAJ},
  isbn = {978-0-416-73360-0},
  langid = {english},
  keywords = {Political Science / General}
}

@article{black_metaphor_1955,
  title = {Metaphor},
  author = {Black, Max},
  year = {1955},
  month = jun,
  journal = {Proceedings of the Aristotelian Society},
  volume = {55},
  number = {1},
  pages = {273--294},
  issn = {0066-7374},
  doi = {10.1093/aristotelian/55.1.273},
  urldate = {2023-03-03},
  file = {/home/pierre/Zotero/storage/IDKTNUND/Black - 1955 - XII.â€”Metaphor.pdf;/home/pierre/Zotero/storage/UCTLSZNS/1802110.html}
}

@article{blocker_nonwestern_2001,
  title = {Non-{{Western Aesthetics}} as a {{Colonial Invention}}},
  author = {Blocker, H. Gene},
  year = {2001},
  journal = {Journal of Aesthetic Education},
  volume = {35},
  number = {4},
  eprint = {3333782},
  eprinttype = {jstor},
  pages = {3--13},
  issn = {0021-8510},
  doi = {10.2307/3333782},
  urldate = {2021-10-14}
}

@incollection{bogost_rhetoric_2008,
  title = {The {{Rhetoric}} of {{Video Games}}},
  booktitle = {The {{Ecology}} of {{Games}}: {{Connecting Youth}}, {{Games}} and {{Learning}}},
  author = {Bogost, Ian},
  editor = {Salen, Katie},
  year = {2008},
  publisher = {{The MIT Press}},
  address = {{Cambridge, MA}},
  urldate = {2021-03-25},
  abstract = {Animal Crossing is an ``animal village simulator'' for the Nintendo GameCube and DS video game consoles.1 As the game begins, the player has just left home to move to the game's small village. There he meets a host of cartoonish animal residents and settles into a new life. The player is penniless upon arrival, and the game quickly thrusts him into the reality of making ends meet. The village's resident real estate tycoon and shopkeeper, Tom Nook, helps the player out, offering him a small shack to live in and a job of planting trees, delivering goods, and creating marketing materials on the town notice board (see figure 1). After completing these chores, Nook releases the player to explore the town on his own. He may then work, trade, and personalize his environment. The game offers a series of innocuous, even mundane activities like bug catching, gardening, and wallpaper designing. One of the more challenging projects in the game is paying off the mortgage on one's house. Animal Crossing allows players to upgrade their homes, but doing so requires paying off a large note the player must take out to start the game in the first place. The player must then pay down renovation mortgages for even larger sums.2 While the game omits some of the more punitive intricacies of long-term debt, such as compounding interest, improving one's home does require consistent work in the game world. Catching fish, hunting for fossils, finding insects, and doing jobs for other townsfolk all produce income that can be used to pay off mortgage debt or to buy carpets, furniture, and objects to decorate one's house. When my then five-year-old began playing the game seriously, he quickly recognized the dilemma he faced. On the one hand, he wanted to spend the money he had earned from collecting fruit and bugs on new furniture, carpets, and shirts. On the other hand, he wanted to pay off his house so he could get a bigger one like mine. Once he managed to amass enough savings to pay off his mortgage, Tom Nook offered to expand his house. While it is possible to refrain from upgrading, the unassuming raccoon continues to offer renovations as frequently as the player visits his store. My son began to realize the dilemma facing him: the more material possessions he took on, the more space he needed, and the more debt he had to assume to provide that space. And the additional space just fueled more material acquisitions, continuing the loop. This link between debt and acquisition gives form to a routine that many mortgage holders fail to recognize: buying more living space not only creates more debt, it also drives the impulse to acquire more goods. More goods demand even more space, creating a vicious cycle.},
  langid = {english},
  file = {/home/pierre/Zotero/storage/V6R46DTC/58b92904ce0d37ab1726e40db881f02529039bd7.html}
}

@book{bootz_problem_2005,
  title = {The {{Problem}} of {{Form Transitoire Observable}}, {{A Laboratory For Emergent Programmed Art}}},
  author = {Bootz, Philippe},
  year = {2005},
  urldate = {2019-07-04}
}

@book{bouchardon_valeur_2014,
  title = {{La valeur heuristique de la litt\'erature num\'erique}},
  author = {Bouchardon, Serge},
  year = {2014},
  month = jan,
  series = {{Cultures num\'eriques}},
  publisher = {{Editions Hermann}},
  urldate = {2023-03-08},
  abstract = {La cr\'eation litt\'eraire avec et pour l'ordinateur existe depuis plus d'un demi-si\`ecle. Cette litt\'erature s'inscrit dans des lignes g\'en\'ealogiques connues~: \'ecriture combinatoire et \'ecriture \`a contraintes, \'ecriture fragmentaire, \'ecriture sonore et visuelle. Qu'il s'agisse de fictions hypertextuelles, de po\`emes anim\'es, d'oeuvres faisant appel \`a la g\'en\'eration automatique de textes ou encore d'oeuvres participatives, la cr\'eation litt\'eraire num\'erique est actuellement florissante, notamment en ligne.  Parce qu'elle est au croisement d'enjeux litt\'eraires, communicationnels, \'epist\'emologiques, p\'edagogiques, la litt\'erature num\'erique est un objet particuli\`erement f\'econd. La valeur heuristique de la litt\'erature num\'erique, c'est celle qui permet de faire retour sur certaines notions (le texte, le r\'ecit, la mat\'erialit\'e, la figure, la m\'emoire...), mais aussi celle qui donne \`a voir et ouvre des pistes en mati\`ere d'\'ecriture num\'erique.},
  isbn = {978-2-7056-8802-8},
  langid = {french},
  file = {/home/pierre/Zotero/storage/DBMBDDI9/9782705688028.html}
}

@book{bourque_swebok_2014,
  title = {{{SWEBOK}}: {{Guide}} to the {{Software Engineering Body}} of {{Knowledge}}},
  editor = {Bourque, Pierre and Fairley, Richard E.},
  year = {2014},
  edition = {Version 3.0},
  publisher = {{IEEE Computer Society}},
  address = {{Los Alamitos, CA}},
  abstract = {The purpose of the Guide to the Software Engineering Body of Knowledge is to provide a validated classification of the bounds of the software engineering discipline and topical access that will support this discipline. The Body of Knowledge is subdivided into a set of software engineering Knowledge Areas (KA) that differentiate among the various important concepts, allowing readers to find their way quickly to subjects of interest. Upon finding a subject, readers are referred to key papers or book chapters. SWEBOK Guide V3.0 builds upon SWEBOK 2004 to refresh and add new reviewed content. Emphases on engineering practice lead the Guide toward a strong relationship with the normative literature. The normative literature is validated by consensus formed among practitioners and is concentrated in standards and related documents. The two major standards bodies for software engineering (IEEE Computer Society Software and Systems Engineering Standards Committee and ISO/IEC JTC1/SC7) are represented in the project. The Guide is oriented toward a variety of audiences, all over the world. It aims to serve public and private organizations in need of a consistent view of software engineering for defining education and training requirements, classifying jobs, developing performance evaluation policies or specifying software development tasks. It also addresses practicing, or managing, software engineers and the officials responsible for making public policy regarding licensing and professional guidelines. In addition, professional societies and educators defining the certification rules, accreditation policies for university curricula, and guidelines for professional practice will benefit from the SWEBOK Guide, as well as the students learning the software engineering profession and educators and trainers engaged in defining curricula and course content. It is hoped that readers will find this book useful in guiding them toward the knowledge and resources they need in their lifelong career development as software engineering professionals.},
  isbn = {978-0-7695-5166-1},
  keywords = {01841 103 ieee book software engineering guide}
}

@misc{bowles_mathematical_2020,
  title = {The Mathematical {{Ideal}} and {{Softmax}} in {{Julia}}},
  author = {Bowles, Joshua},
  year = {2020},
  month = jan,
  journal = {Nextjournal},
  urldate = {2022-08-24},
  abstract = {Walking an elegant equation or proof backwards is an unraveling. It's hard to see how the equation got so refined, so simple\ldots{} and it's usually an aggregate over many years of small refined edits. Rarely does math come out Ideal. It's messy and gross and gets refined over time. Students are rarely told this, and you'd hardly guess how messy math is looking through books.},
  howpublished = {https://nextjournal.com/jbowles/the-mathematical-ideal-and-softmax-in-julia}
}

@article{brady_environmental_2020,
  title = {Environmental Aesthetics: {{A}} Synthetic Review},
  shorttitle = {Environmental Aesthetics},
  author = {Brady, Emily and Prior, Jonathan},
  year = {2020},
  journal = {People and Nature},
  volume = {2},
  number = {2},
  pages = {254--266},
  issn = {2575-8314},
  doi = {10.1002/pan3.10089},
  urldate = {2021-11-09},
  abstract = {The main aim of the article is to provide up-to-date knowledge of environmental aesthetics for an interdisciplinary audience, and to signal the importance of research in this area for studying people\textendash nature relationships. Environmental aesthetics has emerged in the last 50 years from the philosophical fields of aesthetics and environmental philosophy. Other disciplinary perspectives have also shaped environmental aesthetics, including landscape architecture, human geography, restoration ecology and empirical studies on landscape preferences in developmental and environmental psychology. This review and synthesis mainly addresses the theoretical approaches and concepts that provide a framework to the key debates in the field, but also considers how empirical approaches have shaped recent developments, and how conceptual issues arise with respect to empirical cases. We outline the background and context of environmental aesthetics, its key concepts, and provide a critical review of contemporary theories in the field. We then consider how aesthetics features in issues pertaining to the conservation, preservation, and restoration of nature. Finally, we identify some new directions for environmental aesthetics scholarship that can productively contribute to ongoing debates regarding various relationships between people and nature. A free Plain Language Summary can be found within the Supporting Information of this article.},
  langid = {english},
  keywords = {aesthetic value,aesthetics,environmental conservation,environmental philosophy,environmental values,landscape,nature,senses},
  file = {/home/pierre/Zotero/storage/HI5MUX37/Brady and Prior - 2020 - Environmental aesthetics A synthetic review.pdf}
}

@book{brand_code_2019,
  title = {Code::Art::0},
  shorttitle = {Code},
  editor = {Brand, Sy},
  year = {2019},
  publisher = {{code::art}},
  urldate = {2023-03-08},
  file = {/home/pierre/Zotero/storage/DLPL5P24/code-art-1.html}
}

@book{bringsjord_what_2013,
  title = {What {{Robots Can}} and {{Can}}'t {{Be}}},
  author = {Bringsjord, Selmer},
  year = {2013},
  month = mar,
  publisher = {{Springer Science \& Business Media}},
  abstract = {ments be thrown to the wind - in light of the fact that careful, precise, step-by-step deductive arguments will be presented below for each and every proposition that might be cavalierly regarded prima facie implausible. Key Theses So, to put it colloquially, I think we're headed toward real izing Blade Runner, a classic sci fi movie in which only an elaborate pupil-scanner (which detects the usual physiolog ical correlate to an emotional response to provocative ques tions) enables one to distinguish androids from humans. And Blade Runner turned real, it seems to me, will be the Age of The Philosopher. Qualia Scanner Pupils undilated! Why? Well, to start, this will be an era within which the so-called "problem of other minds" will be especially pointed, because the sort of question frequently posed by in structors in introductory philosophy courses, namely How do you know, really know, that the person next to you isn't just a robot, that underneath her "skull" hums a complicated silicon device instead of a flesh-and-blood human brain? WHAT ROBOTS CANANDCAN'TBE 4 will be a deadly serious one.},
  googlebooks = {yT3wCAAAQBAJ},
  isbn = {978-94-011-2464-5},
  langid = {english},
  keywords = {Computers / Artificial Intelligence / General,Philosophy / General,Philosophy / Logic,Philosophy / Mind \& Body}
}

@article{brock_fizzbuzz_2016,
  title = {The `{{FizzBuzz}}'{{Programming Test}}: {{A Case-Based Exploration}} of {{Rhetorical Style}} in {{Code}}},
  shorttitle = {The `{{FizzBuzz}}'{{Programming Test}}},
  author = {Brock, Kevin},
  year = {2016},
  journal = {Computational Culture},
  number = {5}
}

@book{brock_rhetorical_2019,
  title = {Rhetorical {{Code Studies}}: {{Discovering Arguments}} in and around {{Code}}},
  shorttitle = {Rhetorical {{Code Studies}}},
  author = {Brock, Kevin},
  year = {2019},
  month = jan,
  publisher = {{Open Research Library}},
  doi = {10.3998/mpub.10019291},
  urldate = {2022-04-07},
  abstract = {Winner of the 2017 Sweetland Digital Rhetoric Collaborative Book Prize Software developers work rhetorically to make meaning through the code they write. In some ways, writing code is like any other form of communication; in others, it proves to be new, exciting, and unique. In Rhetorical Code Studies, Kevin Brock explores how software code serves as meaningful communication through which software developers construct arguments that are made up of logical procedures and express both implicit and explicit claims as to how a given program operates. Building on current scholarly work in digital rhetoric, software studies, and technical communication, Brock connects and continues ongoing conversations among rhetoricians, technical communicators, software studies scholars, and programming practitioners to demonstrate how software code and its surrounding discourse are highly rhetorical forms of communication. He considers examples ranging from large, well-known projects like Mozilla Firefox to small-scale programs like the ``FizzBuzz'' test common in many programming job interviews. Undertaking specific examinations of code texts as well as the contexts surrounding their composition, Brock illuminates the variety and depth of rhetorical activity taking place in and around code, from individual differences in style to changes in large-scale organizational and community norms. Rhetorical Code Studies holds significant implications for digital communication, multimodal composition, and the cultural analysis of software and its creation. It will interest academics and students of writing, rhetoric, and software engineering as well as technical communicators and developers of all types of software.},
  isbn = {978-0-472-90104-3},
  langid = {english},
  file = {/home/pierre/Zotero/storage/WP94IGMK/Brock - 2019 - Rhetorical Code Studies Discovering Arguments in .pdf}
}

@article{broeckmann_software_2007,
  title = {Software {{Art Aesthetics}}},
  author = {Broeckmann, Andreas},
  year = {2007},
  month = jul,
  journal = {Mono},
  volume = {1},
  number = {1},
  pages = {158--167},
  file = {/home/pierre/Zotero/storage/XMWI92B4/Broeckmann_Software_Art_Aesthetics_2007.pdf}
}

@misc{brooks_finally_2019,
  title = {Finally, a Historical Marker That Talks about Something Important - {{Granite Geek}}},
  author = {Brooks, David},
  year = {2019},
  month = jun,
  urldate = {2022-06-06},
  howpublished = {https://web.archive.org/web/20190611180750/https://granitegeek.concordmonitor.com/2019/06/11/finally-a-historical-marker-that-talks-about-something-important/},
  file = {/home/pierre/Zotero/storage/RSFZI3AA/finally-a-historical-marker-that-talks-about-something-important.html}
}

@book{brooks_mythical_1975,
  title = {The {{Mythical Man-month}}: {{Essays}} on {{Software Engineering}}},
  shorttitle = {The {{Mythical Man-month}}},
  author = {Brooks, Frederick Phillips and Jr, Frederick P. Brooks},
  year = {1975},
  publisher = {{Addison-Wesley Publishing Company}},
  abstract = {The tar pit. The mythical man-month. The surgical team; Aristocracy, democracy, and system design. The second-system effect. Passing the word. Why did the tower of babel fail? Calling the shot. Ten pounds in a five-pound sack. The documentary hypothesis. Plan to throw one away. Sharp tools. The whole and parts. Hatching a catastrophe. The other face.},
  isbn = {978-0-201-00650-6},
  langid = {english}
}

@article{brooks_studying_1980,
  title = {Studying Programmer Behavior Experimentally: The Problems of Proper Methodology},
  shorttitle = {Studying Programmer Behavior Experimentally},
  author = {Brooks, Ruven E.},
  year = {1980},
  month = apr,
  journal = {Communications of the ACM},
  volume = {23},
  number = {4},
  pages = {207--213},
  issn = {0001-0782},
  doi = {10.1145/358841.358847},
  urldate = {2022-11-18},
  abstract = {The application of behavioral or psychological techniques to the evaluation of programming languages and techniques is an approach which has found increased applicability over the past decade. In order to use this approach successfully, investigators must pay close attention to methodological issues, both in order to insure the generalizability of their findings and to defend the quality of their work to researchers in other fields. Three major areas of methodological concern, the selection of subjects, materials, and measures, are reviewed. The first two of these areas continue to present major difficulties for this type of research.},
  keywords = {psychology of programming,software psychology},
  file = {/home/pierre/Zotero/storage/9MEZJGCV/Brooks - 1980 - Studying programmer behavior experimentally the p.pdf}
}

@article{brooks_theory_1983,
  title = {Towards a Theory of the Comprehension of Computer Programs},
  author = {Brooks, Ruven},
  year = {1983},
  month = jun,
  journal = {International Journal of Man-Machine Studies},
  volume = {18},
  number = {6},
  pages = {543--554},
  issn = {0020-7373},
  doi = {10.1016/S0020-7373(83)80031-5},
  urldate = {2022-12-06},
  abstract = {A sufficiency theory is presented of the process by which a computer programmer attempts to comprehend a program. The theory is intended to explain four sources of variation in behavior on this task: the kind of computation the program performs, the intrinsic properties of the program text, such as language and documentation, the reason for which the documentation is needed, and differences among the individuals performing the task. The starting point for the theory is an analysis of the structure of the knowledge required when a program is comprehended which views the knowledge as being organized into distinct domains which bridge between the original problem and the final program. The program comprehension process is one of reconstructing knowledge about these domains and the relationship among them. This reconstruction process is theorized to be a top-down, hypothesis driven one in which an initially vague and general hypothesis is refined and elaborated based on inf ormation extracted from the program text and other documentation.},
  langid = {english},
  file = {/home/pierre/Zotero/storage/ILQ3PQKY/S0020737383800315.html}
}

@incollection{brus_beauty_2013,
  title = {Beauty and {{Code}}},
  booktitle = {The {{Beauty}} of {{Functional Code}}: {{Essays Dedicated}} to {{Rinus Plasmeijer}} on the {{Occasion}} of {{His}} 61st {{Birthday}}},
  author = {Brus, Tom},
  editor = {Achten, Peter and Koopman, Pieter},
  year = {2013},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {8--17},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-40355-2_2},
  urldate = {2021-11-11},
  abstract = {Let me take you on an expedition in search of the beauty in code. Although not everybody links code and beauty, it has always been a natural link for me. Apparently I am not the only one, considering the hefty battles that show up regularly regarding syntax, coding practices, and how things should be written down. I have some strong feelings in this area myself and fought some battles in the past. But syntax and the appearance of code on screen or paper is not the only beauty axis that can be identified, there is more which I also hope to illustrate below.},
  isbn = {978-3-642-40355-2},
  langid = {english},
  keywords = {Code Size,Declarative Programming,Functional Language,Natural Link,Sheer Luck}
}

@misc{bryant_beautiful_2022,
  title = {Beautiful {{Software}}},
  author = {Bryant, Greg},
  year = {2022},
  journal = {Building Beauty},
  urldate = {2023-03-21},
  howpublished = {https://www.buildingbeauty.org/beautiful-software},
  langid = {american},
  file = {/home/pierre/Zotero/storage/27UJXVMS/beautiful-software.html}
}

@misc{bush_15_2015,
  title = {15 {{Ways}} to {{Write Beautiful Code}} - {{DZone DevOps}}},
  author = {Bush, Dave},
  year = {2015},
  month = jan,
  journal = {dzone.com},
  urldate = {2022-06-03},
  howpublished = {https://dzone.com/articles/15-ways-to-write-beautiful-code},
  langid = {english},
  file = {/home/pierre/Zotero/storage/PIJUFGPQ/15-ways-to-write-beautiful-code.html}
}

@misc{byrd_william_2017,
  title = {William {{Byrd}} on {{The Most Beautiful Program Ever Written}}},
  author = {Byrd, Willam},
  year = {2017},
  month = may,
  journal = {Papers We Love},
  urldate = {2022-04-14},
  abstract = {William Byrd on The Most Beautiful Program Ever Written},
  file = {/home/pierre/Zotero/storage/CWLICR9W/will-byrd-most-beautiful-program.html}
}

@book{campbell-kelly_airline_2003,
  title = {From Airline Reservations to {{Sonic}} the {{Hedgehog}} : A History of the Software Industry},
  shorttitle = {From Airline Reservations to {{Sonic}} the {{Hedgehog}}},
  author = {{Campbell-Kelly}, Martin},
  year = {2003},
  publisher = {{Cambridge, Mass. : MIT Press}},
  urldate = {2021-11-10},
  abstract = {Includes bibliographical references (p. [349]-359) and index},
  isbn = {978-0-262-03303-9},
  langid = {english},
  keywords = {Computing and Information Technology}
}

@article{cant_conceptual_1995,
  title = {A Conceptual Model of Cognitive Complexity of Elements of the Programming Process},
  author = {Cant, {\relax SN} and Jeffery, {\relax DR} and {Henderson-Sellers}, B},
  year = {1995},
  month = jan,
  journal = {Information and Software Technology},
  volume = {37},
  number = {7},
  pages = {351--362},
  issn = {0950-5849},
  doi = {10.1016/0950-5849(95)91491-H},
  urldate = {2022-12-13},
  abstract = {A new approach to complexity metrics is described based not on empirical analysis of the final product, viz. the code, but on an understanding of the cognitive processes of the analyst or programmer as they approach and undertake the challenges of program development, modification and debugging. The resulting metric, the Cognitive Complexity Model, involves quantification of a number of cognitive processes, focused on descriptions of comprehension resulting from the twin processes of `chunking' and `tracing' used by software developers in an attempt to reach a cognition of a software system at the code level. A conceptual framework is given as well as some illustrative indicators of likely component measures together with areas needing further research.},
  langid = {english},
  keywords = {chunking,cognitive complexity,complexity,measurement,software,tracing},
  file = {/home/pierre/Zotero/storage/SEYGEWKZ/Cant et al. - 1995 - A conceptual model of cognitive complexity of elem.pdf;/home/pierre/Zotero/storage/FVY87DDJ/095058499591491H.html}
}

@misc{cantwell-smith_aos_2016,
  title = {{{AoS V1}}{$\cdot$}{{C0}}: {{Introduction}}},
  shorttitle = {{{AoS V1}}{$\cdot$}{{C0}}},
  author = {{Cantwell-Smith}, Brian},
  year = {2016},
  month = aug,
  journal = {Internet Archive},
  urldate = {2023-04-28},
  howpublished = {https://web.archive.org/web/20160826234606/http://ageofsignificance.org/aos/en/aos-v1c0.html},
  file = {/home/pierre/Zotero/storage/QD7Y3DBY/aos-v1c0.html}
}

@article{carroll_aesthetic_2002,
  title = {Aesthetic {{Experience Revisited}}},
  author = {Carroll, No{\"e}l},
  year = {2002},
  month = apr,
  journal = {The British Journal of Aesthetics},
  volume = {42},
  number = {2},
  pages = {145--168},
  issn = {0007-0904},
  doi = {10.1093/bjaesthetics/42.2.145},
  urldate = {2021-02-11},
  abstract = {In this article I divide theories of aesthetic experience into three sorts: the affectoriented approach, the axiologically oriented approach, and the content-oriented approach. I then go on to defend a version of the content-oriented approach.}
}

@misc{cayley_code_2012,
  title = {The {{Code}} Is Not the {{Text}} ({{Unless It Is}} the {{Text}}) \guilsinglright{} Electronic Book Review},
  author = {Cayley, John},
  year = {2012},
  month = jan,
  urldate = {2022-05-06},
  abstract = {Digital utopianism is still with us. It is with us despite having been tempered by network logistics and an all-too-reasonable demand for 'content.' Admittedly, New Media has aged. It has acquired a history or at least some genuine engagement with the reality principle, now that the Net is accepted as a material and cultural given},
  langid = {american},
  file = {/home/pierre/Zotero/storage/XEN9I39X/the-code-is-not-the-text-unless-it-is-the-text.html}
}

@article{cellucci_mathematical_2015,
  title = {Mathematical {{Beauty}}, {{Understanding}}, and {{Discovery}}},
  author = {Cellucci, Carlo},
  year = {2015},
  journal = {Foundations of Science},
  volume = {20},
  number = {4},
  pages = {339--355},
  publisher = {{Springer Netherlands}},
  doi = {10.1007/s10699-014-9378-7},
  file = {/home/pierre/Zotero/storage/GADGJRXN/CELMBU.html}
}

@book{cennini_craftsman_2012,
  title = {The {{Craftsman}}'s {{Handbook}}},
  author = {Cennini, Cennino},
  year = {2012},
  month = apr,
  publisher = {{Courier Corporation}},
  abstract = {This is D. V. Thompson\&\#39;s definitive English translation of Il Libro dell\&\#39;Arte, an intriguing guide to methods of painting, written in fifteenth-century Florence. Embodying the secrets and techniques of the great masters, it served as an art student\&\#39;s introduction to the ways of his craft.Anyone who has ever looked at a medieval painting and marveled at the brilliance of color and quality of surface that have endured for 500 years should find this fascinating reading. It describes such lost arts as gilding stone, making mosaics of crushed eggshell, fashioning saints\&\#39; diadems, coloring parchment, making goat glue, and regulating your life in the interests of decorum \textemdash{} which meant shunning women, the greatest cause of unsteady hands in artists. You are told how to make green drapery, black for monks\&\#39; robes, trees and plants, oils, beards in fresco, and the proper proportions of a man\&\#39;s body. (\&quot;I will not tell you about the irrational animals because you will never discover any system of proportion in them.\&quot;) So practical are the details that readers might be tempted to experiment with the methods given here for their own amusement and curiosity.Today artists are no longer interested in specific directions on keeping miniver tails from becoming moth-eaten. The Craftsman\&\#39;s Handbook, in which these are ordinary parts of the artist\&\#39;s work, appears quaint and na\"ive to us. And that is much of its charm. But when we remember the magnificent mosaics, paintings, and frescoes these methods produced, the book takes on an even greater value as a touchstone to another age.\&quot;Recommended to the student of art.\&quot; \textemdash{} Craft Horizons.\&quot;Obviously of great merit.\&quot; \textemdash{} Art Material Trade News.\&quot;Delightful flavor.\&quot; \textemdash{} New York Herald Tribune.Recommended in Harvard List of Great Books on Art, Shaw\&\#39;s List of Books for College Libraries.},
  isbn = {978-0-486-13662-2},
  langid = {english},
  keywords = {Art / Techniques / Drawing,Art / Techniques / Oil Painting,Crafts \& Hobbies / Painting}
}

@book{certeau_invention_1990,
  title = {{L'invention du quotidien}},
  author = {de Certeau, Michel and Giard, Luce and Mayol, Pierre},
  year = {1990},
  publisher = {{Gallimard}},
  abstract = {La Raison technicienne croit savoir comment organiser au mieux les choses et les gens, assignant \`a chacun une place, un r\^ole, des produits \`a consommer. Mais l'homme ordinaire se soustrait en silence \`a cette conformation. Il invente le quotidien gr\^ace aux arts de faire, ruses subtiles, tactiques de r\'esistance par lesquelles il d\'etourne les objets et les codes, se r\'eapproprie l'espace et l'usage \`a sa fa\c{c}on. Tours et traverses, mani\`eres de faire des coups, astuces de chasseurs, mobilit\'es, mises en r\'ecit et trouvailles de mots, mille pratiques inventives prouvent, \`a qui sait les voir, que la foule sans qualit\'e n'est pas ob\'eissante et passive, mais pratique l'\'ecart dans l'usage des produits impos\'es, dans une libert\'e buissonni\`ere par laquelle chacun t\^ache de vivre au mieux l'ordre social et la violence des choses. Michel de Certeau, le premier, restitua les ruses anonymes des arts de faire, cet art de vivre la soci\'et\'e de consommation. Vite devenues classiques, ses analyses pionni\`eres ont inspir\'e historiens, philosophes et sociologues.},
  isbn = {978-2-07-032576-4},
  langid = {french},
  keywords = {Literary Criticism / General,Social Science / Anthropology / Cultural \& Social}
}

@book{ceruzzi_history_2003,
  title = {A {{History}} of {{Modern Computing}}},
  author = {Ceruzzi, Paul E.},
  editor = {Aspray, William and Misa, Thomas J.},
  year = {2003},
  month = apr,
  series = {History of {{Computing}}},
  edition = {Second},
  publisher = {{MIT Press}},
  address = {{Cambridge, MA, USA}},
  abstract = {From the first digital computer to the dot-com crash\textemdash a story of individuals, institutions, and the forces that led to a series of dramatic transformations.},
  isbn = {978-0-262-53203-7},
  langid = {english}
}

@book{chandra_geek_2014,
  title = {Geek {{Sublime}}: {{The Beauty}} of {{Code}}, the {{Code}} of {{Beauty}}},
  shorttitle = {Geek {{Sublime}}},
  author = {Chandra, Vikram},
  year = {2014},
  month = sep,
  publisher = {{Graywolf Press}},
  abstract = {The nonfiction debut from the author of the international bestseller Sacred Games about the surprising overlap between writing and computer codingVikram Chandra has been a computer programmer for almost as long as he has been a novelist. In this extraordinary new book, his first work of nonfiction, he searches for the connections between the worlds of art and technology. Coders are obsessed with elegance and style, just as writers are, but do the words mean the same thing to both? Can we ascribe beauty to the craft of writing code? Exploring such varied topics as logic gates and literary modernism, the machismo of tech geeks, the omnipresence of an "Indian Mafia" in Silicon Valley, and the writings of the eleventh-century Kashmiri thinker Abhinavagupta, Geek Sublime is both an idiosyncratic history of coding and a fascinating meditation on the writer's art. Part literary essay, part technology story, and part memoir, it is an engrossing, original, and heady book of sweeping ideas.},
  isbn = {978-1-55597-326-1},
  langid = {english},
  keywords = {Biography \& Autobiography / Literary Figures,Computers / History,Literary Collections / Essays,Literary Criticism / General}
}

@article{chatterjee_neuroscience_2016,
  title = {Neuroscience of Aesthetics},
  author = {Chatterjee, Anjan and Vartanian, Oshin},
  year = {2016},
  journal = {Annals of the New York Academy of Sciences},
  volume = {1369},
  number = {1},
  pages = {172--194},
  issn = {1749-6632},
  doi = {10.1111/nyas.13035},
  urldate = {2021-09-27},
  abstract = {Aesthetic evaluations are appraisals that influence choices in important domains of human activity, including mate selection, consumer behavior, art appreciation, and possibly even moral judgment. The nascent field of neuroaesthetics is advancing our understanding of the role of aesthetic evaluations by examining their biological bases. Here, we conduct a selective review of the literature on neuroaesthetics to demonstrate that aesthetic experiences likely emerge from the interaction between emotion\textendash valuation, sensory\textendash motor, and meaning\textendash knowledge neural systems. This tripartite model can in turn be evoked to explain phenomena central to aesthetics, such as context effects on preferences. Indeed, context-dependent appraisals that focus on objects rather than on outcomes could be an important factor distinguishing aesthetic experiences from other kinds of evaluations.},
  langid = {english},
  keywords = {aesthetics,art,beauty,context,preference}
}

@misc{chelaru-centea_supervised_2019,
  title = {Supervised Discretization of Continuous Variables},
  author = {{Chelaru-Centea}, Nancy},
  year = {2019},
  month = aug,
  journal = {Nextjournal},
  urldate = {2022-08-24},
  howpublished = {https://nextjournal.com/eda/discretize-cont-var},
  file = {/home/pierre/Zotero/storage/L9CRUXHF/discretize-cont-var.html}
}

@misc{chewxy_gorgonia_2022,
  title = {Gorgonia/Gorgonia},
  author = {{Chewxy}},
  year = {2022},
  month = aug,
  urldate = {2022-08-24},
  abstract = {Gorgonia is a library that helps facilitate machine learning in Go.},
  copyright = {Apache-2.0},
  howpublished = {Gorgonia}
}

@book{chomsky_aspects_1965,
  title = {Aspects of the Theory of Syntax},
  author = {Chomsky, Noam},
  year = {1965},
  publisher = {{Cambridge, M.I.T. Press}},
  urldate = {2021-03-29},
  abstract = {Bibliography: p. 237-245},
  isbn = {978-0-262-53007-1},
  langid = {english},
  keywords = {Comparative and general,Grammar}
}

@article{chun_software_2005,
  title = {On {{Software}}, or the {{Persistence}} of {{Visual Knowledge}}},
  author = {Chun, Wendy Hui Kyong},
  year = {2005},
  month = jan,
  journal = {Grey Room},
  volume = {18},
  pages = {26--51},
  issn = {1526-3819},
  doi = {10.1162/1526381043320741},
  urldate = {2021-01-28},
  file = {/home/pierre/Zotero/storage/E3FXA6IT/Chun - 2005 - On Software, or the Persistence of Visual Knowledg.pdf}
}

@article{chun_sourcery_2008,
  title = {On "{{Sourcery}}," or {{Code}} as {{Fetish}}},
  author = {Chun, Wendy Hui Kyong},
  year = {2008},
  journal = {Configurations},
  volume = {16},
  number = {3},
  pages = {299--324},
  issn = {1080-6520},
  doi = {10.1353/con.0.0064},
  urldate = {2021-10-08},
  abstract = {This essay offers a sympathetic interrogation of the move within new media studies toward "software studies." Arguing against theoretical conceptions of programming languages as the ultimate performative utterance, it contends that source code is never simply the source of any action; rather, source code is only source code after the fact: its effectiveness depends on a whole imagined network of machines and humans. This does not mean that source code does nothing, but rather that it serves as a kind of fetish, and that the notion of the user as super agent, buttressed by real-time computation, is the obverse, not the opposite of this "sourcery."},
  file = {/home/pierre/Zotero/storage/NX46TQDZ/Chun - 2008 - On Sourcery, or Code as Fetish.pdf}
}

@article{coburn_buildings_2017,
  title = {Buildings, {{Beauty}}, and the {{Brain}}: {{A Neuroscience}} of {{Architectural Experience}}},
  shorttitle = {Buildings, {{Beauty}}, and the {{Brain}}},
  author = {Coburn, Alex and Vartanian, Oshin and Chatterjee, Anjan},
  year = {2017},
  month = sep,
  journal = {Journal of Cognitive Neuroscience},
  volume = {29},
  number = {9},
  pages = {1521--1531},
  doi = {10.1162/jocn_a_01146},
  file = {/home/pierre/Zotero/storage/J6JKHG49/Coburn et al. - 2017 - Buildings, Beauty, and the Brain A Neuroscience o.pdf}
}

@inproceedings{cohendet_organisational_2001,
  title = {Organisational {{Innovation}}, {{Communities}} of {{Practice}} and {{Epistemic Communities}}: The {{Case}} of {{Linux}}},
  shorttitle = {Organisational {{Innovation}}, {{Communities}} of {{Practice}} and {{Epistemic Communities}}},
  author = {Cohendet, P. and Cr{\'e}plet, Fr{\'e}d{\'e}ric and Dupou{\"e}t, Olivier},
  year = {2001},
  doi = {10.1007/978-3-642-56472-7_19},
  abstract = {A growing number of works in the literature consider the process of production and circulation of knowledge within the firm as is the key determinant of the capability of the organisation to innovate Nonaka and Takeuchi, 1995; Leonard-Barton, 1995; von Krogh, Roos and Kleine, 1998, etc\ldots ). It is widely agreed that the ``cognitive architecture'' of knowledge within the firm (the way knowledge is produced, stored, exchanged, transmitted, retrieved) strongly influences the process of organisational learning, and in turn the innovative process. As Nonaka and Takeuchi (1995) emphasised, the process of creation of knowledge within firms relies on two main dimensions; the first one is the ``epistemological dimension'': the critical assumption is that human knowledge is created and expanded through social interaction between tacit knowledge and explicit knowledge (``knowledge conversion''); the second one is the ``ontological dimension'' which is concerned with the levels of knowledge creating entities (individual, group, organisational and inter-organisational). In line with the assumptions initially made by Argyris and Schon (1978), the organisation supports creative individuals or provides contexts for them to create knowledge.``Organizational knowledge creation therefore should be understood as a process that organizationally amplifies the knowledge created by individuals and crystallizes it as a part of the knowledge network of the organization. This process takes place within an ''expanding community of interaction`` which crosses intra and inter-organizational levels and boundaries''Nonaka and Takeuchi, 1995. emphasised, the process of creation of knowledge within f1rms relies on two main dimensions; the first one is the ``epistemological dimension'': the critical assumption is that human knowledge is created and expanded through social interaction between tacit knowledge and explicit knowledge (``knowledge conversion''); the second one is the ``ontological dimension'' which is concerned with the levels of knowledge creating entities (individual, group, organisational and inter-organisational). In line with the assumptions initially made by Argyris and Schon (1978), the organisation supports creative individuals or provides contexts for them to create knowledge.``Organizational knowledge creation, therefore, should be understood as a process that organizationally amplifies the knowledge created by individuals and crystallizes it as a part ofthe knowledge network of the organization. This process takes place within an ''expanding community of}
}

@book{colburn_philosophy_2000,
  title = {Philosophy and {{Computer Science}}},
  author = {Colburn, Timothy R.},
  year = {2000},
  publisher = {{M.E. Sharpe}},
  abstract = {Colburn (computer science, U. of Minnesota-Duluth) has a doctorate in philosophy and an advanced degree in computer science; he's worked as a philosophy professor, a computer programmer, and a research scientist in artificial intelligence. Here he discusses the philosophical foundations of artificial intelligence; the new encounter of science and philosophy (logic, models of the mind and of reasoning, epistemology); and the philosophy of computer science (touching on math, abstraction, software, and ontology).},
  googlebooks = {luF4ElMxqg4C},
  isbn = {978-1-56324-990-7},
  langid = {english},
  keywords = {Computers / Computer Science,Philosophy / History \& Surveys / Modern}
}

@article{coleman_aesthetics_2018,
  title = {Aesthetics {{Versus Readability}} of {{Source Code}}},
  author = {Coleman, Ron},
  year = {2018},
  journal = {International Journal of Advanced Computer Science and Applications},
  volume = {9},
  number = {9},
  doi = {10.14569/IJACSA.2018.090902}
}

@book{coleman_coding_2012,
  title = {Coding {{Freedom}}: {{The Ethics}} and {{Aesthetics}} of {{Hacking}}},
  shorttitle = {Coding {{Freedom}}},
  author = {Coleman, E. Gabriella},
  year = {2012},
  month = dec,
  publisher = {{Princeton University Press}},
  address = {{Princeton}},
  isbn = {978-0-691-14461-0},
  langid = {english}
}

@book{collins_tacit_2010,
  title = {Tacit and {{Explicit Knowledge}}},
  author = {Collins, Harry},
  year = {2010},
  month = jun,
  publisher = {{University of Chicago Press}},
  abstract = {Much of what humans know we cannot say. And much of what we do we cannot describe. For example, how do we know how to ride a bike when we can't explain how we do it? Abilities like this were called ``tacit knowledge'' by physical chemist and philosopher Michael Polanyi, but here Harry Collins analyzes the term, and the behavior, in much greater detail, often departing from Polanyi's treatment. In Tacit and Explicit Knowledge, Collins develops a common conceptual language to bridge the concept's disparate domains by explaining explicit knowledge and classifying tacit knowledge. Collins then teases apart the three very different meanings, which, until now, all fell under the umbrella of Polanyi's term: relational tacit knowledge (things we could describe in principle if someone put effort into describing them), somatic tacit knowledge (things our bodies can do but we cannot describe how, like balancing on a bike), and collective tacit knowledge (knowledge we draw that is the property of society, such as the rules for language). Thus, bicycle riding consists of some somatic tacit knowledge and some collective tacit knowledge, such as the knowledge that allows us to navigate in traffic. The intermixing of the three kinds of tacit knowledge has led to confusion in the past; Collins's book will at last unravel the complexities of the idea. Tacit knowledge drives everything from language, science, education, and management to sport, bicycle riding, art, and our interaction with technology. In Collins's able hands, it also functions at last as a framework for understanding human behavior in a range of disciplines.},
  isbn = {978-0-226-11382-1},
  langid = {english},
  keywords = {Science / Philosophy \& Social Aspects,Social Science / General,Social Science / Sociology / General}
}

@book{committee_disclosure_2010,
  title = {The {{Disclosure}} of {{Climate Data}} from the {{Climatic Research Unit}} at the {{University}} of {{East Anglia}}: {{Eighth Report}} of {{Session}} 2009-10, {{Vol}}. 2: {{Oral}} and {{Written Evidence}}},
  shorttitle = {The {{Disclosure}} of {{Climate Data}} from the {{Climatic Research Unit}} at the {{University}} of {{East Anglia}}},
  author = {Committee, Great Britain Parliament House of Commons Science {and} Technology},
  year = {2010},
  month = mar,
  publisher = {{The Stationery Office}},
  abstract = {disclosure of climate data from the Climatic Research Unit at the University of East Anglia : Eighth report of session 2009-10, Vol. 2: Oral and written Evidence},
  isbn = {978-0-215-55340-9},
  langid = {english}
}

@misc{confreaks_rails_2012,
  title = {Rails {{Conf}} 2012 {{Keynote}}: {{Simplicity Matters}} by {{Rich Hickey}}},
  shorttitle = {Rails {{Conf}} 2012 {{Keynote}}},
  author = {{Confreaks} and Hickey, Rich},
  year = {2012},
  month = may,
  urldate = {2023-04-28},
  abstract = {Rich Hickey, the author of Clojure and designer of Datomic, is a software developer with over 20 years of experience in various domains. Rich has worked on scheduling systems, broadcast automation, audio analysis and fingerprinting, database design, yield management, exit poll systems, and machine listening, in a variety of languages.}
}

@article{contini_nelson_2019,
  title = {Nelson {{Goodman}} and {{Project Zero}}: Art, Cognition, and Education},
  shorttitle = {Nelson {{Goodman}} and {{Project Zero}}},
  author = {Contini, Annamaria},
  year = {2019},
  month = jun,
  journal = {Studi di estetica},
  volume = {0},
  number = {13},
  issn = {1825-8646},
  urldate = {2021-02-18},
  abstract = {In 1967, Nelson Goodman founded Project Zero, a program of basic research into art education, which, even today, is an international reference point. This article reviews the relationships between the theses set out in Languages of art and the most original results obtained by Project Zero between 1967 and 1971, when Goodman was the director. Thus emerges the role of general symbol theory in developing an educational approach that attempts to over-come the dichotomy between art and science, between the emotive and the cognitive. The article also analyzes the effects of Goodman's participation in Project Zero on his aesthetic-philosophical reflections, using it to interpret both the exemplar function taken on by art in Ways of worldmaking, and the emergence of new concepts such as that of ``implementation''.},
  langid = {english},
  keywords = {Art education,Symbol systems,Understanding},
  file = {/home/pierre/Zotero/storage/J4DX3K8L/Contini - 2019 - Nelson Goodman and Project Zero art, cognition, a.pdf}
}

@misc{coplien_patterns_2009,
  title = {Patterns {{Are Not The Lesser Of Two Evils}}},
  author = {Coplien, Jim},
  year = {2009},
  month = jan,
  journal = {WikiWikiWeb},
  urldate = {2023-03-17},
  howpublished = {https://wiki.c2.com/?PatternsAreNotTheLesserOfTwoEvils},
  file = {/home/pierre/Zotero/storage/DRI4A8K7/wiki.c2.com.html}
}

@article{cortada_information_2012,
  title = {Information {{Technologies}} in the {{German Democratic Republic}} ({{GDR}}), 1949\textendash 1989},
  author = {Cortada, James W.},
  year = {2012},
  month = feb,
  journal = {IEEE Annals of the History of Computing},
  volume = {34},
  number = {2},
  pages = {34--48},
  issn = {1058-6180},
  doi = {10.1109/MAHC.2012.27},
  urldate = {2021-11-10}
}

@book{cox_aesthetic_2020,
  title = {Aesthetic {{Programming}}: {{A Handbook}} of {{Software Studies}}},
  author = {Cox, Geoff and Soon, Winnie},
  year = {2020},
  publisher = {{Open Humanities Press}},
  isbn = {978-1-78542-093-1}
}

@inproceedings{cox_programming_2009,
  title = {Programming {{Style}}: {{Influences}}, {{Factors}}, and {{Elements}}},
  shorttitle = {Programming {{Style}}},
  booktitle = {2009 {{Second International Conferences}} on {{Advances}} in {{Computer-Human Interactions}}},
  author = {Cox, A. and Fisher, M.},
  year = {2009},
  month = feb,
  pages = {82--89},
  doi = {10.1109/ACHI.2009.48},
  abstract = {As a consequence of various situational and personal factors, programmers use a variety of styles when performing software development and maintenance tasks. In this paper, we develop a contextual framework that links situational, task-oriented, and individual factors to a set of traits. These traits are expressed as behavioural modifiers, and thus, influence one's performance of tasks such as computer programming, as well as influencing the skills upon which programming is based (e.g., problem solving, planning). To demonstrate the use of the framework, we examine how risk-tolerance is influenced by contextual factors and show how this trait influences programming style. We also document some preliminary components of programming style.},
  keywords = {computer programming,Cultural differences,Management information systems,Navigation,Problem-solving,Program processors,Programmer Behaviour,programming,Programming,Programming profession,Programming Strategy,programming style,Programming Style,Psychology,software development,software maintenance,Software maintenance,software maintenance tasks,Switches,Testing},
  file = {/home/pierre/Zotero/storage/99T84HR9/4782496.html}
}

@book{cox_speaking_2013,
  title = {Speaking {{Code}}: {{Coding}} as {{Aesthetic}} and {{Political Expression}}},
  shorttitle = {Speaking {{Code}}},
  author = {Cox, Geoff and McLean, Christopher Alex},
  year = {2013},
  publisher = {{MIT Press}},
  abstract = {The aesthetic and political implications of working with code as procedure, expression, and action.Speaking Code begins by invoking the "Hello World" convention used by programmers when learning a new language, helping to establish the interplay of text and code that runs through the book. Interweaving the voice of critical writing from the humanities with the tradition of computing and software development, in Speaking Code Geoff Cox formulates an argument that aims to undermine the distinctions between criticism and practice and to emphasize the aesthetic and political implications of software studies.Not reducible to its functional aspects, program code mirrors the instability inherent in the relationship of speech to language; it is only interpretable in the context of its distribution and network of operations. Code is understood as both script and performance, Cox argues, and is in this sense like spoken language\textendash always ready for action.Speaking Code examines the expressive and performative aspects of programming; alternatives to mainstream development, from performances of the live-coding scene to the organizational forms of peer production; the democratic promise of social media and their actual role in suppressing political expression; and the market's emptying out of possibilities for free expression in the public realm. Cox defends language against its invasion by economics, arguing that speech continues to underscore the human condition, however paradoxical this may seem in an era of pervasive computing.},
  isbn = {978-0-262-01836-4},
  langid = {english},
  keywords = {Computers / Programming / General,Computers / Programming Languages / General,Social Science / Media Studies}
}

@book{cramer_exe_2019,
  title = {{Exe.cut(up)able statements: Poetische Kalk\"ule und Phantasmen des selbstausf\"uhrenden Texts}},
  shorttitle = {{Exe.cut(up)able statements}},
  author = {Cramer, Florian},
  year = {2019},
  month = dec,
  publisher = {{Wilhelm Fink}},
  urldate = {2021-03-23},
  abstract = {"Exe.cut(up)able statements" published on 09 Dec 2019 by Wilhelm Fink.},
  isbn = {978-3-8467-4499-4},
  langid = {ngerman},
  file = {/home/pierre/Zotero/storage/IZ3B8JWI/41001.html}
}

@misc{cramer_florian_2002,
  title = {Florian {{Cramer}}: {{Concepts}}, {{Notations}}, {{Software}}, {{Art}}},
  author = {Cramer, Florian},
  year = {2002},
  month = mar,
  journal = {Netzliteratur.net},
  urldate = {2022-04-28},
  howpublished = {https://www.netzliteratur.net/cramer/concepts\_notations\_software\_art.html},
  file = {/home/pierre/Zotero/storage/PV3XA5RW/concepts_notations_software_art.html}
}

@book{cramer_words_2003,
  title = {Words {{Made Flesh}}},
  author = {Cramer, Florian},
  year = {2003},
  publisher = {{Piet Zwart Institute}}
}

@book{crowthers_colossal_1977,
  title = {Colossal {{Cave Adventure}}},
  author = {Crowthers, Will},
  year = {1977}
}

@article{davies_models_1993,
  title = {Models and Theories of Programming Strategy},
  author = {Davies, Simon P.},
  year = {1993},
  month = aug,
  journal = {International Journal of Man-Machine Studies},
  volume = {39},
  number = {2},
  pages = {237--267},
  issn = {0020-7373},
  doi = {10.1006/imms.1993.1061},
  urldate = {2021-01-27},
  abstract = {Much of the literature concerned with understanding the nature of programming skill has focused explicitly upon the declarative aspects of programmers' knowledge. This literature has sought to describe the nature of stereotypical programming knowledge structures and their organization. However, one major limitation of many of these knowledge-based theories is that they often fail to consider the way in which knowledge is used or applied. Another strand of literature is less well represented. This literature deals with the strategic elements of programming skill and is directed towards an analysis of the strategies commonly employed by programmers in the generation and the comprehension of programs. In this paper an attempt is made to unify various analyses of programming strategy. This paper presents a review of the literature in this area, highlighting common themes and concerns, and proposes a model of strategy development which attempts to encompass the central findings of previous research in this area. It is suggested that many studies of programming strategy are descriptive and fail to explain why strategies take the form they do or to explain the typical strategy shifts which are observed during the transitions between different levels of skill. This paper suggests that what is needed is an explanation of programming skill that integrates ideas about knowledge representation with a strategic model, enabling one to make predictions about how changes in knowledge representation might give rise to particular strategies and to the strategy changes associated with developing expertise. This paper concludes by making a number of brief suggestions about the possible nature of this model and its implications for theories of programming expertise.},
  langid = {english},
  file = {/home/pierre/Zotero/storage/A9BTDAEE/S0020737383710618.html}
}

@article{dedieuleveult_artistes_2002,
  title = {{Les artistes de l'\'el\'egance chez Marcel Proust et Vladimir Nabokov}},
  author = {{de Dieuleveult}, Juliette},
  year = {2002},
  journal = {Revue de litt\'erature compar\'ee},
  volume = {n o 303},
  number = {3},
  pages = {301--321},
  doi = {10.3917/rlc.303.0301},
  abstract = {Le propos de cet article est de montrer l'existence chez Marcel Proust et Vladimir Nabokov d'\guillemotleft{} artistes de l'\'el\'egance \guillemotright{} qui sont les porte-parole de la po\'etique des deux auteurs. Dans la Recherche comme dans certains romans de Nabokov (Le Don, Lolita, Ada ou Regarde regarde les arlequins !), la femme \'el\'egante est pr\'esent\'ee non seulement comme une \oe uvre d'art mais aussi comme une artiste \`a part enti\`ere. Surtout, l'\'el\'egance, \`a travers les images paradigmatiques de la robe, du fil ou du tissu permet \`a la fois d'\'enoncer m\'etaphoriquement le projet d'\'ecriture et de dire la v\'erit\'e de l'art.},
  langid = {french}
}

@book{defensetechnicalinformationcenter_dtic_1970,
  title = {{{DTIC AD0715513}}: {{An Empirical Study}} of {{Fortran Programs}}},
  shorttitle = {{{DTIC AD0715513}}},
  author = {{Defense Technical Information Center}},
  year = {1970},
  month = jan,
  urldate = {2022-04-14},
  abstract = {A sample of programs, written in FORTRAN by a wide variety of people for a wide variety of applications, was chosen 'at random' in an attempt to discover quantitatively 'what programmers really do.' Statistical results of this survey are presented here, together with some of their apparent implications for future work in compiler design. The principal conclusion which may be drawn is the importance of a program 'profile,' namely a table of frequency counts which record how often each statement is performed in a typical run; there are strong indications that profile-keeping should become a standard practice in all computer systems, for casual users as well as system programmers. The paper is the report of a three month study undertaken by the author and about a dozen students and representatives of the software industry during the summer 1970. It is hoped that a reader who studies the report will obtain a fairly clear conception of how FORTRAN is being used, and what compilers can do about it.},
  langid = {english},
  keywords = {*COMPILERS,*COMPUTER PROGRAMMING,ARTIFICIAL INTELLIGENCE,CYBERNETICS,DATA PROCESSING,Donald E,DTIC Archive,EFFICIENCY,JOB ANALYSIS,Knuth,PROGRAMMING LANGUAGES,STANFORD UNIV CA DEPT OF COMPUTER SCIENCE,STATISTICAL ANALYSIS}
}

@article{depaz_craft_2021,
  title = {The {{Craft}} of {{Code}}: {{Practice}} and {{Knowledge}} in the {{Production}} of {{Software}}},
  author = {Depaz, Pierre},
  year = {2021},
  journal = {Kuckuck},
  volume = {1},
  langid = {english}
}

@incollection{depaz_stylistique_2023,
  title = {Stylistique de La Recherche Linguistique En {{IA}}: De {{LISP}} \`a {{GPT-3}}},
  booktitle = {Cr\'eativit\'es Artificielles \textendash{} {{La}} Litt\'erature et l'art \`a l'heure de l'intelligence Artificielle},
  author = {Depaz, Pierre},
  editor = {Gefen, Alexandre},
  year = {2023},
  publisher = {{Les Presses du R\'eel}},
  isbn = {978-2-37896-262-3}
}

@book{desaint-exupery_terre_1972,
  title = {{Terre des Hommes}},
  author = {{de Saint-Exup{\'e}ry}, Antoine},
  year = {1972},
  month = jan,
  publisher = {{Gallimard}},
  isbn = {978-2-07-036021-5},
  langid = {french}
}

@book{detienne_software_2012,
  title = {Software {{Design}} \textendash{} {{Cognitive Aspect}}},
  author = {Detienne, Francoise},
  year = {2012},
  month = dec,
  publisher = {{Springer Science \& Business Media}},
  abstract = {Software Design - Cognitive Aspects covers a variety of areas including software analysis, design, coding and maintenance. It details the history of the research that has been conducted since the 1970s in this fast-developing field before defining a computer program from a computing and cognitive psychology viewpoint. Detailed treatment is given to the two essential sides of programming; software production and software understanding and throughout the book parallels are drawn between studies on processing texts written in natural language and processing computer programs.This book will be of particular interest to researchers, practitioners and graduate students in Computer Science, Cognitive Psychology, and Cognitive Ergonomics.},
  isbn = {978-1-4471-0111-6},
  langid = {english},
  keywords = {Computers / Information Technology,Computers / Programming / General,Computers / Programming Languages / General,Computers / Software Development \& Engineering / General}
}

@article{dexter_embodied_2011,
  title = {On the {{Embodied Aesthetics}} of {{Code}}},
  shorttitle = {Vol. 12 {{The Digital Humanities}}},
  author = {Dexter, Scott and Dolese, Melissa and Seidel, Angelika and Kozbelt, Aaron},
  year = {2011},
  month = jan,
  journal = {Culture Machine},
  volume = {12},
  number = {1},
  urldate = {2021-11-05},
  langid = {british},
  file = {/home/pierre/Zotero/storage/9KML2JWG/the-digital-humanities-beyond-computing.html}
}

@incollection{dexter_esthetic_2012,
  title = {The {{Esthetic}} of {{Hidden Things}}},
  booktitle = {Understanding {{Digital Humanities}}},
  author = {Dexter, Scott},
  year = {2012},
  publisher = {{Palgrave Macmillan UK}},
  address = {{London, UNITED KINGDOM}},
  urldate = {2021-11-08},
  isbn = {978-0-230-37193-4},
  keywords = {Computer science},
  file = {/home/pierre/Zotero/storage/5G58Q9E7/reader.html}
}

@inproceedings{dijk_strategies_1983,
  title = {Strategies of Discourse Comprehension},
  author = {Dijk, T. A. and Kintsch, W.},
  year = {1983},
  doi = {10.2307/415483},
  abstract = {rhetorical schemata to be discussed in what follows. Finally, schemata are descriptions, not definitions. The `bus' schema contains information that is nor-},
  file = {/home/pierre/Zotero/storage/HTDFKW22/Dijk and Kintsch - 1983 - Strategies of discourse comprehension.pdf}
}

@inproceedings{dijk_strategies_1983a,
  title = {Strategies of Discourse Comprehension},
  author = {Dijk, V. and Kintsch, W.},
  year = {1983},
  doi = {10.2307/415483},
  abstract = {rhetorical schemata to be discussed in what follows. Finally, schemata are descriptions, not definitions. The `bus' schema contains information that is nor-}
}

@misc{dijkstra_beautiful_1978,
  title = {Some Beautiful Arguments Using Mathematical Induction},
  author = {Dijkstra, Edsger W.},
  year = {1978},
  month = dec,
  urldate = {2022-07-14},
  annotation = {EWD 697},
  file = {/home/pierre/Zotero/storage/3V6VB979/EWD697.html}
}

@incollection{dijkstra_chapter_1972,
  title = {Chapter {{I}}: {{Notes}} on Structured Programming},
  booktitle = {Structured Programming},
  author = {Dijkstra, Edsger W.},
  year = {1972},
  pages = {1--82},
  publisher = {{Academic Press Ltd.}},
  isbn = {0-12-200550-3}
}

@incollection{dijkstra_craftsman_1982,
  title = {``{{Craftsman}} or {{Scientist}}?''},
  shorttitle = {``{{Craftsman}} or {{Scientist}}?},
  booktitle = {Selected {{Writings}} on {{Computing}}: {{A}} Personal {{Perspective}}},
  author = {Dijkstra, Edsger W.},
  editor = {Dijkstra, Edsger W.},
  year = {1982},
  series = {Texts and {{Monographs}} in {{Computer Science}}},
  pages = {104--109},
  publisher = {{Springer}},
  address = {{New York, NY}},
  doi = {10.1007/978-1-4612-5695-3_19},
  urldate = {2021-01-26},
  abstract = {My somewhat elliptic title refers, of course, to the programmer; so much you may have guessed. What, in all probability, you could not have guessed is that I have chosen to use the words ``craftsman'' and ``scientist'' in a very specific meaning: they have been chosen to characterize the results of two extreme techniques of education, and this luncheon speech will be devoted to a (be it short) discussion of their role in the education of programmers, in the teaching of programming. For the transmission of knowledge and skills both techniques have been used side by side since many centuries.},
  isbn = {978-1-4612-5695-3},
  langid = {english}
}

@article{dijkstra_design_1963,
  title = {On the Design of Machine Independent Programming Languages},
  author = {Dijkstra, E.W.},
  year = {1963},
  journal = {Annual Review in Automatic Programming},
  volume = {3},
  pages = {27--42},
  issn = {0066-4138},
  doi = {10.1016/S0066-4138(63)80003-8},
  abstract = {No abstract.},
  file = {/home/pierre/Zotero/storage/BX9ELHC6/Dijkstra - 1963 - On the design of machine independent programming l.pdf}
}

@incollection{dijkstra_humble_2007,
  title = {The Humble Programmer},
  booktitle = {{{ACM Turing}} Award Lectures},
  author = {Dijkstra, Edsger W.},
  year = {2007},
  month = jan,
  pages = {1972},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  urldate = {2021-11-17},
  isbn = {978-1-4503-1049-9},
  keywords = {ALGOL 60,EDSAC,FORTRAN,PL/I},
  file = {/home/pierre/Zotero/storage/24K7BSTF/Dijkstra - 2007 - The humble programmer.pdf}
}

@inproceedings{dijkstrae.w._programming_1977,
  title = {Programming : From Craft to Scientific Discipline},
  shorttitle = {Programming},
  booktitle = {Proceedings 5th {{International Computing Symposium}} ({{Li\`ege}}, {{Belgium}}, {{April}} 4-7, 1977)},
  author = {{Dijkstra, E.W.} and {Morlet, E.} and {Ribbens, D.} and {Mathematics and Computer Science} and {Research 1957-1990}},
  year = {1977},
  pages = {23--30},
  publisher = {{North-Holland Publishing Company}},
  urldate = {2021-11-17},
  isbn = {978-0-7204-0741-9},
  langid = {english}
}

@misc{dilascia_end_2019,
  title = {\{ \vphantom\}{{End Bracket}} \vphantom\{\}: {{What Makes Good Code Good}}?},
  shorttitle = {\{ \vphantom\}{{End Bracket}} \vphantom\{\}},
  author = {DiLascia, Paul},
  year = {2019},
  month = oct,
  journal = {\{ End Bracket \}},
  urldate = {2022-06-02},
  howpublished = {https://docs.microsoft.com/en-us/archive/msdn-magazine/2004/july/\%7b-end-bracket-\%7d-what-makes-good-code-good},
  langid = {american},
  file = {/home/pierre/Zotero/storage/FKU5ML4U/ -end-bracket- -what-makes-good-code-good.html}
}

@inproceedings{douce_spatial_1999,
  title = {Spatial Measures of Software Complexity},
  booktitle = {{{PPIG}}},
  author = {Douce, Christopher and Layzell, Paul J. and Buckley, Jim},
  year = {1999}
}

@misc{dourish_original_1988,
  title = {The {{Original Hacker}}'s {{Dictionary}}},
  author = {Dourish, Paul},
  year = {1988},
  journal = {The Original Hacker's Dictionary},
  urldate = {2021-11-19},
  file = {/home/pierre/Zotero/storage/JNHJUAQC/jargon.html}
}

@article{downton_knowledge_1998,
  title = {On {{Knowledge In Architecture}} and {{Science}}},
  author = {Downton, Peter},
  year = {1998}
}

@misc{duff_tom_1983,
  title = {Tom {{Duff}} on {{Duff}}'s {{Device}}},
  author = {Duff, Tom},
  year = {1983},
  month = oct,
  urldate = {2022-06-01},
  howpublished = {http://www.lysator.liu.se/c/duffs-device.html},
  file = {/home/pierre/Zotero/storage/82Q5N2JJ/duffs-device.html}
}

@book{dumaurier_rebecca_1938,
  title = {Rebecca},
  author = {Du Maurier, Daphne},
  year = {1938},
  edition = {[Book Club edition]},
  publisher = {{Doubleday \& Company}},
  address = {{Garden City, NY}},
  abstract = {At the great Cornwall estate of Manderley, Maxim de Winter and his frightened new wife try to live with the haunting legacy of Maxim's first wife, the beautiful and cold Rebecca, who died in a sailing accident. The heroine and narrator marries an English aristocrat, Maxim de Winter. They are deeply in love, but the memory of Max's first wife, Rebecca, lingers on. Little by little the mystery of Rebecca's life and death is revealed. - Publisher},
  isbn = {978-0-385-04380-9},
  langid = {english},
  keywords = {Conduct of life,Conduct of life Fiction,{Cornwall (Angleterre) Romans, nouvelles, etc},Cornwall (England : County) Fiction,Country homes,Country homes England Cornwall (County) Fiction,{De Winter, Maximilian (Fictitious character)},{De Winter, Maximilian (Fictitious character) Fiction},{De Winter, Mrs. (Fictitious character)},{De Winter, Mrs. (Fictitious character) Fiction},England Cornwall (County),English fiction 20th century,{Femmes mari\'ees Angleterre Cornwall Romans, nouvelles, etc},Fiction,Fictional Work,Gothic fiction,Married women,Married women England Cornwall (County) Fiction,{Meurtre Angleterre Cornwall Romans, nouvelles, etc},{Morale pratique Romans, nouvelles, etc},Murder,Murder England Cornwall (County) Fiction,Novels,{Personnes remari\'ees Romans, nouvelles, etc},Psychological fiction,Remarried people,Remarried people Fiction,Romance fiction,Romans,Romantic suspense fiction,Thrillers (Fiction)},
  annotation = {OCLC: 33984918}
}

@misc{eadicicco_startup_2014,
  title = {Startup {{God Paul Graham Reveals The Single Most Important Quality To Look For In A Company}}},
  author = {Eadicicco, Lisa},
  year = {2014},
  month = dec,
  urldate = {2022-06-01},
  howpublished = {https://finance.yahoo.com/news/startup-god-paul-graham-reveals-165445488.html?guccounter=1},
  file = {/home/pierre/Zotero/storage/QH8DZAMG/startup-god-paul-graham-reveals-165445488.html}
}

@misc{edwards_jonathanmedwards_2022,
  title = {{{JonathanMEdwards}}/Subtext10},
  author = {Edwards, Jonathan},
  year = {2022},
  month = nov,
  urldate = {2023-03-18}
}

@article{efatmaneshnik_definitions_2019,
  title = {On the {{Definitions}} of {{Sufficiency}} and {{Elegance}} in {{Systems Design}}},
  author = {Efatmaneshnik, Mahmoud and Ryan, Michael J.},
  year = {2019},
  month = sep,
  journal = {IEEE Systems Journal},
  volume = {13},
  number = {3},
  pages = {2077--2088},
  issn = {1937-9234},
  doi = {10.1109/JSYST.2018.2875152},
  abstract = {Despite elegance being universally recognized as a goal for system design, there is little guidance in the related research and literature that is relevant to the design, development, or evaluation of elegant systems. This paper begins by reviewing the rather loose usage of elegance as a property of a system and shows that there are both abstract and practical views. Further, from analysis of the practical views of elegance in systems, it is clear that most current definitions of elegance are focused on the sufficiency of the system as a solution to the stated problem, rather than on elegance, perse. This paper disambiguates the usage of sufficiency and elegance, offers a formal definition of the two terms, and then provides several simple examples by way of illustration. Elegance and sufficiency must be considered as separate properties of a system, if only because the essential act of validation is an examination of the sufficiency of a solution, not its elegance. Any system attribute desired by the customer must be included as part of the solution's sufficiency and designed into the solution, not be a serendipitous unintended outcome of that design. Sufficiency is shown to be binary-a solution is either sufficient or it is not-and there may be more than one sufficient solution. Elegance is then defined to be the least complex sufficient solution. Furthermore, an elegant solution must be sufficient, but a sufficient system does not have to be (and is not always desirable to be) elegant.},
  keywords = {Atmospheric measurements,Complexity measure,Complexity theory,elegance,elegant design,Indexes,problem complexity,Production,Silicon,solution complexity,System analysis and design,system design}
}

@article{elgin_making_2011,
  title = {Making {{Manifest}}: {{The Role}} of {{Exemplification}} in the {{Sciences}} and the {{Arts}}},
  shorttitle = {Making {{Manifest}}},
  author = {Elgin, Catherine Z.},
  year = {2011},
  journal = {Principia: An International Journal of Epistemology},
  volume = {15},
  number = {3},
  pages = {399--413},
  publisher = {{Universidade Federal de Santa Catarina}},
  doi = {10.5007/1808-1711.2011v15n3p399},
  file = {/home/pierre/Zotero/storage/PJEKBJ6R/Elgin - 2011 - Making Manifest The Role of Exemplification in th.pdf;/home/pierre/Zotero/storage/75M36JTY/ELGMMT-2.html}
}

@article{elgin_understanding_1993,
  title = {Understanding: {{Art}} and Science},
  shorttitle = {Understanding},
  author = {Elgin, Catherine Z.},
  year = {1993},
  month = apr,
  journal = {Synthese},
  volume = {95},
  number = {1},
  pages = {13--28},
  issn = {1573-0964},
  doi = {10.1007/BF01064665},
  urldate = {2023-03-02},
  abstract = {The arts and the sciences perform many of the same cognitive functions, both serving to advance understanding. This paper explores some of the ways exemplification operates in the two fields. Both scientific experiments and works of art highlight, underscore, display, or convey some of their own features. They thereby focus attention on them, and make them available for examination and projection. Thus, the Michelson-Morley experiment exemplifies the constancy of the speed of light. Jackson Pollock'sNumber One exemplifies the viscosity of paint. Despite their similarities, science and art might seem to differ in their attitude toward facts. Science is said to adhere to facts; art, to be indifferent to them. Such, I urge, is not the case. Science, like art, often scorns fact to advance understanding through fiction. Thought experiments, I contend, are scientific fictions; literary and pictorial fictions, aesthetic thought experiments.},
  langid = {english},
  keywords = {Advance Understanding,Cognitive Function,Scientific Experiment,Scientific Fiction,Thought Experiment}
}

@incollection{elgin_understanding_2020,
  title = {{Understanding Understanding Art}},
  booktitle = {{\'Epist\'emologie de l'esth\'etique: perspectives et d\'ebats}},
  author = {Elgin, Catherine Z.},
  editor = {Granata, Vincent and Pouivet, Roger and {Universit{\'e} de Lorraine}},
  year = {2020},
  series = {{Collection "Hors-s\'erie"}},
  publisher = {{Presses universitaires de Rennes}},
  address = {{Rennes}},
  isbn = {978-2-7535-7823-4},
  langid = {fre eng},
  lccn = {BH39 .E65 2020},
  keywords = {Aesthetics,Congresses,Methodology}
}

@incollection{elliott_imagination_1973,
  title = {Imagination in the {{Experience}} of {{Art}}},
  booktitle = {Philosophy and the {{Arts}}},
  author = {Elliott, R. K.},
  editor = {Vesey, Godfrey and Mitchell, Julian and Beardsmore, R. W. and Phillips, D. Z. and Casey, John and Elliott, R. K. and Harrison, Andrew and Urmson, J. O. and Pole, David and Johnson, Oliver and Barrett, Cyril and Lyas, Colin and Dodsworth, Martin and Forge, Andrew and Hepburn, R. W.},
  year = {1973},
  series = {Royal {{Institute}} of {{Philosophy Lectures}}},
  pages = {88--105},
  publisher = {{Macmillan Education UK}},
  address = {{London}},
  doi = {10.1007/978-1-349-01342-5_5},
  urldate = {2021-02-11},
  abstract = {In this paper I shall not be concerned with the imagination as insight, but only with certain aspects of `magical' imagination, that division of the concept which centres upon the notion of an image. In the Philosophical Investigations (ii xi) Wittgenstein makes the extremely interesting remark that when a printed triangle is seen, for instance, as a mountain, it is as if an image came into contact, and for a time remained in contact, with the visual impression (i.e. with the object as seen by me). He goes on to say that in a picture a triangular figure may have some such aspect permanently \textemdash{} in the pictorial context we would read the figure at once as a mountain \textemdash{} but that we can make a distinction between `regarding' and `seeing' the figure as the thing meant. I take him to be contrasting those common experiences in which we see a figure in a picture as depicting a person, or as a `picture-person', with those rarer experiences, referred to by art-critics when they talk of `presence', in which it seems as if the person depicted in the picture is there before us `in the flesh', and I assume that, like Sartre, Wittgenstein would suppose that imagination plays a part in experiences of this latter kind. In this paper I shall be concerned not with this sense of the presence of the object depicted, but chiefly with types of imaginal experience in which the image which seems to come into contact with what is perceived is an image of something which is not depicted or described in the work, but which nevertheless achieves a certain strength of presence.},
  isbn = {978-1-349-01342-5},
  langid = {english}
}

@book{ensmenger_computer_2012,
  title = {The {{Computer Boys Take Over}}: {{Computers}}, {{Programmers}}, and the {{Politics}} of {{Technical Expertise}}},
  shorttitle = {The {{Computer Boys Take Over}}},
  author = {Ensmenger, Nathan L.},
  editor = {Aspray, William},
  year = {2012},
  month = aug,
  publisher = {{The MIT Press}},
  address = {{Cambridge, Mass.}},
  abstract = {This is a book about the computer revolution of the mid-twentieth century and the people who made it possible. Unlike most histories of computing, it is not a book about machines, inventors, or entrepreneurs. Instead, it tells the story of the vast but largely anonymous legions of computer specialists\textendash programmers, systems analysts, and other software developers\textendash who transformed the electronic computer from a scientific curiosity into the defining technology of the modern era. As the systems that they built became increasingly powerful and ubiquitous, these specialists became the focus of a series of critiques of the social and organizational impact of electronic computing. To many of their contemporaries, it seemed the "computer boys" were taking over, not just in the corporate setting, but also in government, politics, and society in general. In The Computer Boys Take Over, Nathan Ensmenger traces the rise to power of the computer expert in modern American society. His rich},
  isbn = {978-0-262-51796-6},
  langid = {english}
}

@book{erickson_hacking_2008,
  title = {Hacking, 2nd {{Edition}}},
  author = {Erickson, John},
  year = {2008},
  month = feb,
  publisher = {{No Starch Press}},
  urldate = {2021-04-02},
  abstract = {Hacking is the art of creative problem solving, whether that means finding an unconventional solution to a difficult problem or exploiting holes in sloppy programming. Many people call themselves hackers, but few have the strong technical foundation needed to really push the envelope. Rather than merely showing how to run existing exploits, author Jon Erickson explains how arcane hacking techniques actually work. To share the art and science of hacking in a way that is accessible to everyone, Hacking: The Art of Exploitation, 2nd Edition introduces the fundamentals of C programming from a hacker\&\#39;s perspective. The included LiveCD provides a complete Linux programming and debugging environment-all without modifying your current operating system. Use it to follow along with the book\&\#39;s examples as you fill gaps in your knowledge and explore hacking techniques on your own. Get your hands dirty debugging code, overflowing buffers, hijacking network communications, bypassing protections, exploiting cryptographic weaknesses, and perhaps even inventing new exploits. This book will teach you how to:* Program computers using C, assembly language, and shell scripts * Corrupt system memory to run arbitrary code using buffer overflows and format strings Inspect processor registers and system memory with a debugger to gain a real understanding of what is happening * Outsmart common security measures like nonexecutable stacks and intrusion detection systems * Gain access to a remote server using port-binding or connect-back shellcode, and alter a server\&\#39;s logging behavior to hide your presence * Redirect network traffic, conceal open ports, and hijack TCP connections * Crack encrypted wireless traffic using the FMS attack, and speed up brute-force attacks using a password probability matrix Hackers are always pushing the boundaries, investigating the unknown, and evolving their art. Even if you don\&\#39;t already know how to program, Hacking: The Art of Exploitation, 2nd Edition will give you a complete picture of programming, machine architecture, network communications, and existing hacking techniques. Combine this knowledge with the included Linux environment, and all you need is your own creativity.},
  file = {/home/pierre/Zotero/storage/YKLE5S4R/books.html}
}

@inproceedings{fakhoury_improving_2019,
  title = {Improving Source Code Readability: Theory and Practice},
  shorttitle = {Improving Source Code Readability},
  booktitle = {Proceedings of the 27th {{International Conference}} on {{Program Comprehension}}},
  author = {Fakhoury, Sarah and Roy, Devjeet and Hassan, Sk. Adnan and Arnaoudova, Venera},
  year = {2019},
  month = may,
  series = {{{ICPC}} '19},
  pages = {2--12},
  publisher = {{IEEE Press}},
  address = {{Montreal, Quebec, Canada}},
  doi = {10.1109/ICPC.2019.00014},
  urldate = {2021-10-15},
  abstract = {There are several widely accepted metrics to measure code quality that are currently being used in both research and practice to detect code smells and to find opportunities for code improvement. Although these metrics have been proposed as a proxy of code quality, recent research suggests that more often than not, state-of-the-art code quality metrics do not successfully capture quality improvements in the source code as perceived by developers. More specifically, results show that there may be inconsistencies between, on the one hand, the results from metrics for cohesion, coupling, complexity, and readability, and, on the other hand, the interpretation of these metrics in practice. As code improvement tools rely on these metrics, there is a clear need to identify and resolve the aforementioned inconsistencies. This will allow for the creation of tools that are more aligned with developers' perception of quality, and can more effectively help source code improvement efforts. In this study, we investigate 548 instances of source code readability improvements, as explicitly stated by internal developers in practice, from 63 engineered software projects. We show that current readability models fail to capture readability improvements. We also show that tools to calculate additional metrics, to detect refactorings, and to detect style problems are able to capture characteristics that are specific to readability changes and thus should be considered by future readability models.},
  keywords = {code quality metrics,developers'perception,readability}
}

@book{fauconnier_mental_1994,
  title = {Mental {{Spaces}}: {{Aspects}} of {{Meaning Construction}} in {{Natural Language}}},
  shorttitle = {Mental {{Spaces}}},
  author = {Fauconnier, Gilles},
  year = {1994},
  publisher = {{Cambridge University Press}},
  address = {{Cambridge}},
  doi = {10.1017/CBO9780511624582},
  urldate = {2023-03-10},
  abstract = {Mental Spaces is the classic introduction to the study of mental spaces and conceptual projection, as revealed through the structure and use of language. It examines in detail the dynamic construction of connected domains as discourse unfolds. The discovery of mental space organization has modified our conception of language and thought: powerful and uniform accounts of superficially disparate phenomena have become available in the areas of reference, presupposition projection, counterfactual and analogical reasoning, metaphor and metonymy, and time and aspect in discourse.The present work lays the foundation for this research. It uncovers simple and general principles that lie behind the awesome complexity of everyday logic.},
  isbn = {978-0-521-44949-6},
  file = {/home/pierre/Zotero/storage/WYG7BUG3/990994C4CD82B3F34DAB8504E1999E10.html}
}

@article{fedorenko_language_2019,
  title = {The {{Language}} of {{Programming}}: {{A Cognitive Perspective}}},
  shorttitle = {The {{Language}} of {{Programming}}},
  author = {Fedorenko, Evelina and Ivanova, Anna and Dhamala, Riva and Bers, Marina Umaschi},
  year = {2019},
  month = jul,
  journal = {Trends in Cognitive Sciences},
  volume = {23},
  number = {7},
  pages = {525--528},
  issn = {13646613},
  doi = {10.1016/j.tics.2019.04.010},
  urldate = {2021-09-24},
  langid = {english}
}

@book{feijen_beauty_1990,
  title = {Beauty {{Is Our Business}}: {{A Birthday Salute}} to {{Edsger W}}. {{Dijkstra}}},
  editor = {Feijen, W.H.J. and Gasteren, A.J.M. and Gries, David and Misra, J.},
  year = {1990},
  publisher = {{Springer}},
  urldate = {2022-07-14},
  langid = {english},
  file = {/home/pierre/Zotero/storage/QE85G4XF/978-1-4612-4476-9.html}
}

@article{feitelson_how_2022,
  title = {How {{Developers Choose Names}}},
  author = {Feitelson, Dror G. and Mizrahi, Ayelet and Noy, Nofar and Shabat, Aviad Ben and Eliyahu, Or and Sheffer, Roy},
  year = {2022},
  month = jan,
  journal = {IEEE Transactions on Software Engineering},
  volume = {48},
  number = {1},
  eprint = {2103.07487},
  primaryclass = {cs},
  pages = {37--52},
  issn = {0098-5589, 1939-3520, 2326-3881},
  doi = {10.1109/TSE.2020.2976920},
  urldate = {2022-12-16},
  abstract = {The names of variables and functions serve as implicit documentation and are instrumental for program comprehension. But choosing good meaningful names is hard. We perform a sequence of experiments in which a total of 334 subjects are required to choose names in given programming scenarios. The first experiment shows that the probability that two developers would select the same name is low: in the 47 instances in our experiments the median probability was only 6.9\%. At the same time, given that a specific name is chosen, it is usually understood by the majority of developers. Analysis of the names given in the experiment suggests a model where naming is a (not necessarily cognizant or serial) three-step process: (1) selecting the concepts to include in the name, (2) choosing the words to represent each concept, and (3) constructing a name using these words. A followup experiment, using the same experimental setup, then checked whether using this model explicitly can improve the quality of names. The results were that names selected by subjects using the model were judged by two independent judges to be superior to names chosen in the original experiment by a ratio of two-to-one. Using the model appears to encourage the use of more concepts and longer names.},
  archiveprefix = {arxiv},
  keywords = {Computer Science - Software Engineering,D.2.3},
  file = {/home/pierre/Zotero/storage/ZHJMMGCL/Feitelson et al. - 2022 - How Developers Choose Names.pdf;/home/pierre/Zotero/storage/KMK8QDR9/2103.html}
}

@inproceedings{fishwick_aesthetic_2000,
  title = {Aesthetic {{Programming}}},
  author = {Fishwick, P.},
  year = {2000},
  urldate = {2023-03-19},
  abstract = {By marrying traditional methods for computer programming with an artistic temperament, we give birth to a new phenomenon: the aesthetic program. Our work builds on visual approaches in programming as well as modeling for software, where I envision a gradual evolution from program to model. The need for the aesthetic model is strengthened with the importance of personalized, individually-tailored, models. I, and my students, have formulated the rube Project methodology around the use of 3D web-based virtual world construction of models. Initial results suggest that these models are artistic, while containing sufficient symbolism and concise metaphoric mapping as to be executable on a computer.}
}

@book{fishwick_aesthetic_2006a,
  title = {Aesthetic {{Computing}}},
  editor = {Fishwick, Paul A.},
  year = {2006},
  month = mar,
  publisher = {{The MIT Press}},
  doi = {10.7551/mitpress/1135.001.0001},
  urldate = {2023-03-19},
  abstract = {In Aesthetic Computing, key scholars and practitioners from art, design, computer science, and mathematics lay the foundations for a discipline that applies the theory and practice of art to computing. Aesthetic computing explores the way art and aesthetics can play a role in different areas of computer science. One of its goals is to modify computer science by the application of the wide range of definitions and categories normally associated with making art. For example, structures in computing might be represented using the style of Gaudi or the Bauhaus school. This goes beyond the usual definition of aesthetics in computing, which most often refers to the formal, abstract qualities of such structures\textemdash a beautiful proof, or an elegant diagram. The contributors to this book discuss the broader spectrum of aesthetics\textemdash from abstract qualities of symmetry and form to ideas of creative expression and pleasure\textemdash in the context of computer science. The assumption behind aesthetic computing is that the field of computing will be enriched if it embraces all of aesthetics. Human-computer interaction will benefit\textemdash "usability," for example, could refer to improving a user's emotional state\textemdash and new models of learning will emerge.Aesthetic Computing approaches its subject from a variety of perspectives. After defining the field and placing it in its historical context, the book looks at art and design, mathematics and computing, and interface and interaction. Contributions range from essays on the art of visualization and "the poesy of programming" to discussions of the aesthetics of mathematics throughout history and transparency and reflectivity in interface design.Contributors James Alty, Olav W. Bertelsen, Jay David Bolter, Donna Cox, Stephan Diehl, Mark d'Inverno, Michele Emmer, Paul Fishwick, Monica Fleischmann, Ben Fry, Carsten G\"org, Susanne Grabowski, Diane Gromala, Kenneth A. Huff, John Lee, Frederic Fol Leymarie, Michael Leyton, Jonas L\"owgren, Roger F. Malina, Laurent Mignonneau, Frieder Nake, Ray Paton, Jane Prophet, Aaron Quigley, Casey Reas, Christa Sommerer, Wolfgang Strauss, Noam Tractinksy, Paul Vickers, Dror Zmiri},
  isbn = {978-0-262-27273-5}
}

@book{flach1994simply,
  title = {Simply {{Logical}}: {{Intelligent Reasoning}} by {{Example}}},
  author = {Flach, Peter},
  year = {1994},
  publisher = {{John Wiley}}
}

@book{flusser_doubt_2014,
  title = {On {{Doubt}}},
  author = {FLUSSER, {\relax VIL{\'E}M} and Novaes, Rodrigo Maltez},
  editor = {Zielinski, Siegfried},
  year = {2014},
  eprint = {10.5749/j.ctt16d698p},
  eprinttype = {jstor},
  publisher = {{University of Minnesota Press}},
  urldate = {2021-03-24},
  abstract = {In \emph{On Doubt} , Vil\'em Flusser refines Martin Heidegger's famous declaration that "language is the dwelling of Being." For Flusser, "the word is the dwelling of being," because in fact, in the beginning, there was the word. \emph{On Doubt} is a treatise on the human intellect, its relation to language, and the reality-forming discourses that subsequently emerge. For Flusser, the faith that the modern age places in Cartesian doubt plays a role similar to the one that faith in God played in previous eras-a faith that needs to be challenged. Descartes doubts the world through his proposition \emph{cogito ergo sum} , but leaves doubt itself untouched as indubitable and imperious. His \emph{cogito ergo sum} may have proved to the Western intellect that thoughts exist, but it did not prove the existence of that which thinks: one can eliminate thinking and yet continue being. Therefore, should we not doubt doubt itself? Should we not try to go beyond this last step of Cartesian doubt and look for a new faith? The twentieth century has seen many attempts to defeat Cartesian doubt, however, this doubt of doubt has instead generated a complete loss of faith, which the West experiences as existential nihilism. Hence, the emergent emptying of values that results from such extreme doubt. Everything loses its meaning. Can this climate be overcome? Will the West survive the modern age?},
  isbn = {978-1-937561-24-6}
}

@misc{foote_big_1997,
  title = {Big {{Ball}} of {{Mud}}},
  author = {Foote, Brian and Yoder, Joseph},
  year = {1997},
  journal = {Laputan.org},
  urldate = {2022-06-03},
  howpublished = {http://www.laputan.org/mud/mud.html\#BigBallOfMud},
  file = {/home/pierre/Zotero/storage/7PJGINBW/mud.html}
}

@incollection{forsythe_cathedrals_1986,
  title = {Cathedrals in the {{Mind}}: {{The Architecture}} of {{Metaphor}} in {{Understanding Learning}}},
  shorttitle = {Cathedrals in the {{Mind}}},
  booktitle = {Cybernetics and {{Systems}} '86: {{Proceedings}} of the {{Eighth European Meeting}} on {{Cybernetics}} and {{Systems Research}}, Organized by the {{Austrian Society}} for {{Cybernetic Studies}}, Held at the {{University}} of {{Vienna}}, {{Austria}}, 1\textendash 4 {{April}} 1986},
  author = {Forsythe, Kathleen},
  editor = {Trappl, Robert},
  year = {1986},
  pages = {285--292},
  publisher = {{Springer Netherlands}},
  address = {{Dordrecht}},
  doi = {10.1007/978-94-009-4634-7_37},
  urldate = {2021-03-29},
  abstract = {The pervasiveness of metaphor in our conceptual system suggests a central and basic role in the underlying architecture of thought. Metaphor represents the ability to understand one thing in terms of another as we ascribe an understood pattern to an unknown phenomena and perceive their structural integrity within the environment of our experience. We can then begin to perceive the environment of learning as one in which analogical thinking serves as architecture, analytical thinking serves as engineering and the imagination ensures that the interactions which create life and meaning are always being realized anew. The implications for this approach to applied epistemology provides insight into the design and development of learning systems that support the creative nature of learning.},
  isbn = {978-94-009-4634-7},
  langid = {english},
  keywords = {Conceptual System,Conscious Architect,Conversation Theory,Pattern Language,Unknown Phenomenon}
}

@book{fowler_refactoring_1999,
  title = {Refactoring: {{Improving}} the {{Design}} of {{Existing Code}}},
  shorttitle = {Refactoring},
  author = {Fowler, Martin and Beck, Kent and Brant, John and Opdyke, William and Roberts, Don and Gamma, Erich},
  year = {1999},
  month = jul,
  edition = {1st edition},
  publisher = {{Addison-Wesley Professional}},
  address = {{Reading, MA}},
  abstract = {As the application of object technology\textendash particularly the Java programming language\textendash has become commonplace, a new problem has emerged to confront the software development community. Significant numbers of poorly designed programs have been created by less-experienced developers, resulting in applications that are inefficient and hard to maintain and extend. Increasingly, software system professionals are discovering just how difficult it is to work with these inherited, non-optimal applications. For several years, expert-level object programmers have employed a growing collection of techniques to improve the structural integrity and performance of such existing software programs. Referred to as refactoring, these practices have remained in the domain of experts because no attempt has been made to transcribe the lore into a form that all developers could use. . .until now. In Refactoring: Improving the Design of Existing Software, renowned object technology mentor Martin Fowler breaks new ground, demystifying these master practices and demonstrating how software practitioners can realize the significant benefits of this new process. With proper training a skilled system designe},
  isbn = {978-0-201-48567-7},
  langid = {english}
}

@article{fraenkel_written_2006,
  title = {Written {{Acts}} and {{Speech Acts}}: {{Performativity}} and {{Writing Practices}}},
  author = {Fraenkel, B{\'e}atrice},
  year = {2006},
  journal = {\'Etudes de communication},
  volume = {29},
  number = {1},
  pages = {69--93},
  abstract = {The notion of performativity is alive and well in research on the information and communication sciences, but also in closely related disciplines. Social science researchers have placed at the center of the questioning not only the language part of action, but also the pragmatic nature of language, that is the language acts themselves. \'Etudes de Communication opens the debate on this multidisciplinary idea of performativity to establish a panorama of the ways it is used. How is this notion mobilized? What place does it hold in the research objectives to which it is\textemdash or could be\textemdash associated: organizational communication, scientific practice, links between language and work, writing practices, the artistic world, media discourse, market economy, interactions represented in the media . . . ?},
  langid = {english}
}

@book{frasca_simulation_2013,
  title = {Simulation versus {{Narrative}} : {{Introduction}} to {{Ludology}}},
  shorttitle = {Simulation versus {{Narrative}}},
  author = {Frasca, Gonzalo},
  year = {2013},
  month = oct,
  journal = {The Video Game Theory Reader},
  pages = {221--235},
  publisher = {{Routledge}},
  doi = {10.4324/9780203700457-11},
  urldate = {2022-07-12},
  abstract = {Academic video game studies have known an incredible development during the last couple of years. Slowly, academic interest has shifted from the early do-games-induce-violent-behaviors studies toward analyses that acknowledge the relevance of this new medium. Several international conferences on game studies took place in 2001, plus the publication of Game Studies, the first peer-reviewed online journal on the field.1 In 2002 and 2003, the number of conferences and workshops kept growing steadily. After an early start as a subset of digital text studies, video game studies is finding its own academic space. Probably the most promising change comes from a new generation of researchers who grew up with computer games and now are bringing to this new field both their passion and expertise on this form of entertainment.},
  isbn = {978-0-203-70045-7},
  langid = {english},
  file = {/home/pierre/Zotero/storage/FWCLRTG8/simulation-versus-narrative-gonzalo-frasca.html}
}

@inproceedings{fraser_future_2015,
  title = {The {{Future}} of {{Programming Languages}} and {{Programmers}}},
  booktitle = {Companion {{Proceedings}} of the 2015 {{ACM SIGPLAN International Conference}} on {{Systems}}, {{Programming}}, {{Languages}} and {{Applications}}: {{Software}} for {{Humanity}}},
  author = {Fraser, Steven D. and Bak, Lars and DeLine, Rob and Feamster, Nick and Kuper, Lindsey and Lopes, Cristina V. and Wu, Peng},
  year = {2015},
  month = oct,
  series = {{{SPLASH Companion}} 2015},
  pages = {63--66},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2814189.2818719},
  urldate = {2021-11-08},
  abstract = {In the beginning ``programs'' were patterns of bits that commanded the execution of individual machines. As machines evolved in complexity \textendash{} languages evolved, starting with a variety of assembly languages and growing to encompass higher levels of abstraction. Over the years \textendash{} somewhat surprisingly \textendash{} programmers evolved from engineers at the pinnacle of their profession with many years of experience to individuals not yet 10 years old giving evidence that programming does not necessarily require a formal education. This panel will bring together a diverse set of industry and academic professionals to discuss the future of programming languages and programmers.},
  isbn = {978-1-4503-3722-9},
  keywords = {Programmers,Programming Languages},
  file = {/home/pierre/Zotero/storage/4YP473BE/Fraser et al. - 2015 - The Future of Programming Languages and Programmer.pdf}
}

@article{fuller_developing_2007,
  title = {Developing a Computer Science-Specific Learning Taxonomy},
  author = {Fuller, Ursula and Johnson, Colin G. and Ahoniemi, Tuukka and Cukierman, Diana and {Hern{\'a}n-Losada}, Isidoro and Jackova, Jana and Lahtinen, Essi and Lewis, Tracy L. and Thompson, Donna McGee and Riedesel, Charles and Thompson, Errol},
  year = {2007},
  month = dec,
  journal = {ACM SIGCSE Bulletin},
  volume = {39},
  number = {4},
  pages = {152--170},
  issn = {0097-8418},
  doi = {10.1145/1345375.1345438},
  urldate = {2022-12-05},
  abstract = {Bloom's taxonomy of the cognitive domain and the SOLO taxonomy are being increasingly widely used in the design and assessment of courses, but there are some drawbacks to their use in computer science. This paper reviews the literature on educational taxonomies and their use in computer science education, identifies some of the problems that arise, proposes a new taxonomy and discusses how this can be used in application-oriented courses such as programming.},
  keywords = {assessment,benchmarking,computer science education,credit transfer,curricula,taxonomies of learning},
  file = {/home/pierre/Zotero/storage/KTH4ZPSX/Fuller et al. - 2007 - Developing a computer science-specific learning ta.pdf}
}

@book{fuller_software_2008,
  title = {Software {{Studies}}: {{A Lexicon}}},
  shorttitle = {Software {{Studies}}},
  editor = {Fuller, Matthew},
  year = {2008},
  month = apr,
  publisher = {{The MIT Press}},
  address = {{Cambridge, Mass}},
  abstract = {A cultural field guide to software: artists, computer scientists, designers, cultural theorists, programmers, and others define a new field of study and practice.This collection of short expository, critical, and speculative texts offers a field guide to the cultural, political, social, and aesthetic impact of software. Computing and digital media are essential to the way we work and live, and much has been said about their influence. But the very material of software has often been left invisible. In Software Studies, computer scientists, artists, designers, cultural theorists, programmers, and others from a range of disciplines each take on a key topic in the understanding of software and the work that surrounds it. These include algorithms; logical structures; ways of thinking and doing that leak out of the domain of logic and into everyday life; the value and aesthetic judgments built into computing; programming's own subcultures; and the tightly formulated building blocks that work to make, name, multiply, control, and interweave reality. The growing importance of software requires a new kind of cultural theory that can understand the politics of pixels or the poetry of a loop and engage in the microanalysis of everyday digital objects. The contributors to Software Studies are both literate in computing (and involved in some way in the production of software) and active in making and theorizing culture. Software Studies offers not only studies of software but proposes an agenda for a discipline that sees software as an object of study from new perspectives. ContributorsAlison Adam, Wilfried Hou Je Bek, Morten Breinbjerg, Ted Byfield, Wendy Hui Kyong Chun, Geoff Cox, Florian Cramer, Cecile Crutzen, Marco Deseriis, Ron Eglash, Matthew Fuller, Andrew Goffey, Steve Goodman, Olga Goriunova, Graham Harwood, Friedrich Kittler, Erna Kotkamp, Joasia Krysa, Adrian Mackenzie, Lev Manovich, Michael Mateas, Nick Montfort, Michael Murtaugh, Jussi Parikka, S\o ren Pold, Derek Robinson, Warren Sack, Grzesiek Sedek, Alexei Shulgin, Matti Tedre, Adrian Ward, Richard Wright, Simon Yuill},
  isbn = {978-0-262-06274-9},
  langid = {english}
}

@book{gabriel_mob_2001,
  title = {Mob {{Software}}: {{The Erotic Life}} of {{Code}}},
  author = {Gabriel, Richard P. and Goldman, Ron},
  year = {2001},
  urldate = {2021-01-28},
  file = {/home/pierre/Zotero/storage/YU922USJ/MobSoftware.html}
}

@book{gabriel_patterns_1998,
  title = {Patterns of {{Software}}: {{Tales}} from the {{Software Community}}},
  shorttitle = {Patterns of {{Software}}},
  author = {Gabriel, Richard P.},
  year = {1998},
  publisher = {{Oxford University Press}},
  abstract = {In our homes, our schools, and our businesses, computers play an ever-increasing role. But while most of us today can work a computer\textendash albeit with the help of the ever-present computer software manual\textendash we know little about what goes on inside the box and virtually nothing about software design or the world of computer programming. In Patterns of Software, the respected software pioneer and computer scientist, Richard Gabriel, gives us an informative inside look at the world of software design and computer programming and the business that surrounds them. In this wide-ranging volume, Gabriel discusses such topics as what makes a successful programming language, how the rest of the world looks at and responds to the work of computer scientists, how he first became involved in computer programming and software development, what makes a successful software business, and why his own company, Lucid, failed in 1994, ten years after its inception. Perhaps the most interesting and enlightening section of the book is Gabriel's detailed look at what he believes are the lessons that can be learned from architect Christopher Alexander, whose books\textendash including the seminal A Pattern Language\textendash have had a profound influence on the computer programming community. Gabriel illuminates some of Alexander's key insights\textendash "the quality without a name," pattern languages, habitability, piecemeal growth\textendash and reveals how these influential architectural ideas apply equally well to the construction of a computer program. Gabriel explains the concept of habitability, for example, by comparing a program to a New England farmhouse and the surrounding structures which slowly grow and are modified according to the needs and desires of the people who live and work on the farm. "Programs live and grow, and their inhabitants\textendash the programmers\textendash need to work with that program the way the farmer works with the homestead." Although computer scientists and software entrepreneurs will get much out of this book, the essays are accessible to everyone and will intrigue anyone curious about Silicon Valley, computer programming, or the world of high technology.},
  isbn = {978-0-19-512123-0},
  langid = {english},
  keywords = {Computers / Software Development \& Engineering / General}
}

@article{gabriel_search_2019,
  title = {A {{Search}} for {{Beauty}}/{{A Struggle}} with {{Complexity}}: {{Christopher Alexander}}},
  shorttitle = {A {{Search}} for {{Beauty}}/{{A Struggle}} with {{Complexity}}},
  author = {Gabriel, Richard P. and Quillien, Jenny},
  year = {2019},
  month = jun,
  journal = {Urban Science},
  volume = {3},
  number = {2},
  pages = {64},
  doi = {10.3390/urbansci3020064},
  urldate = {2021-02-02},
  abstract = {Beauty. Christopher Alexander's prolific journey in building, writing, and teaching was fueled by a relentless search for Beauty and its meaning. While all around him the world was intent on figuring out how to simplify, Alexander came to embrace complexity as the only path to his goal. The Beauty and life of that which he encountered and appreciated\textemdash an Indian village, a city, a subway network, an old Turkish carpet, or a campus\textemdash lay in its well-ordered complexity. As a designer and maker he found that simplicity came from choosing\textemdash at every step\textemdash the simplest way to add the necessary complexity. The failure of so much of our modern world, in Alexander's eyes, was oversimplification, wantonly bulldozing context, misunderstanding the relationships of part and whole, ignoring the required role of time in the shaping of shapes, and ultimately dismissing, like Esau, our birthright of Value in favor of a lentil pottage of mere Fact. Ever elusive, Beauty demands of her suitors a constant return of attention to see what might be newly revealed, and Alexander duly returned again and again in pursuit of the mystery. In this essay\textemdash essentially biographical and descriptive of one man's endeavors\textemdash we examine the full arc of his work from dissertation to most recent memoir. We don't shy away from his failures, and we don't simplify his journey. We leave work done by other scholars for another day. We reach no conclusion, rather, we invite readers to reflect on what Alexander's lifelong effort suggests to them about their own path, their own sense of aesthetics and order, innate cognitive shortfalls, and professional blind alleys.},
  copyright = {http://creativecommons.org/licenses/by/3.0/},
  langid = {english},
  keywords = {beauty,Christopher Alexander,complexity,well-being},
  file = {/home/pierre/Zotero/storage/NDU8FUZT/Gabriel and Quillien - 2019 - A Search for BeautyA Struggle with Complexity Ch.pdf}
}

@book{galloway_interface_2012,
  title = {The {{Interface Effect}}},
  author = {Galloway, Alexander R.},
  year = {2012},
  month = sep,
  edition = {1st edition},
  publisher = {{Polity}},
  address = {{Cambridge, UK ; Malden, MA}},
  abstract = {Interfaces are back, or perhaps they never left. The familiar Socratic conceit from the Phaedrus, of communication as the process of writing directly on the soul of the other, has returned to center stage in today's discussions of culture and media. Indeed Western thought has long construed media as a grand choice between two kinds of interfaces. Following the optimistic path, media seamlessly interface self and other in a transparent and immediate connection. But, following the pessimistic path, media are the obstacles to direct communion, disintegrating self and other into misunderstanding and contradiction. In other words, media interfaces are either clear or complicated, either beautiful or deceptive, either already known or endlessly interpretable. Recognizing the limits of either path, Galloway charts an alternative course by considering the interface as an autonomous zone of aesthetic activity, guided by its own logic and its own ends: the interface effect. Rather than praising user-friendly interfaces that work well, or castigating those that work poorly, this book considers the unworkable nature of all interfaces, from windows and doors to screens and keyboards. Considered allegorically, such thresholds do not so much tell the story of their own operations but beckon outward into the realm of social and political life, and in so doing ask a question to which the political interpretation of interfaces is the only coherent answer. Grounded in philosophy and cultural theory and driven by close readings of video games, software, television, painting, and other images, Galloway seeks to explain the logic of digital culture through an analysis of its most emblematic and ubiquitous manifestation \textendash{} the interface.},
  isbn = {978-0-7456-6253-4},
  langid = {english}
}

@article{galloway_language_2006,
  title = {Language, {{Life}}, {{Code}}},
  author = {Galloway, Alexander R. and Thacker, Eugene},
  year = {2006},
  journal = {Architectural Design},
  volume = {76},
  number = {5},
  pages = {26--29},
  issn = {1554-2769},
  doi = {10.1002/ad.317},
  urldate = {2021-02-04},
  abstract = {Software increasingly determines what can be designed, constructed and even how design occurs. Here, Alexander R Galloway and Eugene Thacker present a series of investigations with the collaborative Radical Software Group (RSG). Their practice examines the nature of software code as a form of language. Addressing theoretical issues regarding meaning and representation, they argue for thinking more abstractly and generatively about language, and propose a new, or liberated, computer language in which the representational determinations implicit to any software are geared towards innovation in communication and design. By rewriting the software that allows for the transmission and translation of knowledge across previously discrete fields of production, programming allows for new and productive cross-pollination. Indeed, programming becomes a new site of design that enfolds disciplines not traditionally seen as part of the creative processes of innovation. Copyright \textcopyright{} 2006 John Wiley \& Sons, Ltd.},
  copyright = {Copyright \textcopyright{} 2006 John Wiley \& Sons, Ltd.},
  langid = {english},
  keywords = {`fork bomb',`grammars of actions',`structuralist wave',`Vivre et Parler',Ada Lovelace,Al-Khwarazmi,Bernoulli numbers,Charles Babbage's Analytical Machine,Claude L\'evi-Strauss,Dawkins,DNA,Fran\c{c}ois Jacob,Friedrich Kittler,Herman Hollerith,James Beniger,Jean-Joseph Goux,Joseph-Marie Jacquard,Larry Wall,Nietzsche,Perl,Philip Agre,Philippe L'H\'eritier,Roman Jakobson,Shannon and Weaver,Thomas Levin},
  file = {/home/pierre/Zotero/storage/XYZJ942E/ad.html}
}

@book{gamma_design_1994,
  title = {Design {{Patterns}}: {{Elements}} of {{Reusable Object-Oriented Software}}},
  shorttitle = {Design {{Patterns}}},
  author = {Gamma, Erich and Helm, Richard and Johnson, Ralph and Vlissides, John and Booch, Grady},
  year = {1994},
  month = nov,
  edition = {1st edition},
  publisher = {{Addison-Wesley Professional}},
  address = {{Reading, Mass}},
  abstract = {Capturing a wealth of experience about the design of object-oriented software, four top-notch designers present a catalog of simple and succinct solutions to commonly occurring design problems. Previously undocumented, these 23 patterns allow designers to create more flexible, elegant, and ultimately reusable designs without having to rediscover the design solutions themselves. The authors begin by describing what patterns are and how they can help you design object-oriented software. They then go on to systematically name, explain, evaluate, and catalog recurring designs in object-oriented systems. With Design Patterns as your guide, you will learn how these important patterns fit into the software development process, and how you can leverage them to solve your own design problems most efficiently. Each pattern describes the circumstances in which it is applicable, when it can be applied in view of other design constraints, and the consequences and trade-offs of using the pattern within a larger design. All patterns are compiled from real systems and are based on real-world examples. Each pattern also includes code that demonstrates how it may be implemented in object-oriented programming languages like C++ or Smalltalk.},
  isbn = {978-0-201-63361-0},
  langid = {english}
}

@incollection{garland_software_2000,
  title = {Software {{Architecture}}: {{A Roadmap}}},
  booktitle = {The {{Future}} of {{Software Engineering}}},
  author = {Garland, David},
  year = {2000},
  edition = {Anthony Finkelstein (Ed.)},
  publisher = {{ACM Press}},
  isbn = {1-58113-253-0}
}

@book{gay_doing_2013,
  title = {Doing {{Cultural Studies}}: {{The Story}} of the {{Sony Walkman}}},
  shorttitle = {Doing {{Cultural Studies}}},
  author = {du Gay, Paul and Hall, Stuart and Janes, Linda and Madsen, Anders Koed and Mackay, Hugh and Negus, Keith},
  year = {2013},
  month = jun,
  edition = {Second edition},
  publisher = {{SAGE Publications Ltd}},
  address = {{Los Angeles, CA}},
  abstract = {"Arguably the most famous book in its field... In theoretical terms, the legacy of Doing Cultural Studies confirms that this classic read is not just about the Walkman itself, but represents a series of clear observations about the symbolic meanings of culture." - LSE Review of Books Why think about the Walkman in the 21st century? Can the Walkman help us understand today's media and cultural practices? Through the notion of the {${'}$}circuit of culture{${'}$}, this book teaches students to critically examine what culture means, and how and why it is enmeshed with the media texts and objects in their lives. Students will: Unpack the key concepts of contemporary culture, such as mobility, materiality, consumption and identity Learn to think about some of the cultural conundrums of the present and their relation to the past, such as branding culture Look with fresh eyes at today{${'}$}s media world and the cultural practices it gives rise to Gain practical experience with the historical comparative method Practice their critical skills with up-to-date exercises and activities This book takes students on a journey between past and present, giving them the skills do to cultural analysis along the way. It remains the perfect {${'}$}how to{${'}$} for students in media studies, cultural studies, design and sociology.},
  isbn = {978-1-84920-550-4},
  langid = {english}
}

@article{gefen_extension_2019,
  title = {Extension Du Domaine de La Litt\'erature {{Extension}} Du Domaine de La Litt\'erature},
  author = {Gefen, Alexandre and Perez, Claude Pierre},
  year = {2019},
  month = sep,
  journal = {Elfe XX-XXI \'Etudes de la litt\'erature fran\c{c}aise des XXe et XXIe si\`ecles}
}

@book{gelernter_machine_1998,
  title = {Machine Beauty : Elegance and the Heart of Technology},
  shorttitle = {Machine Beauty},
  author = {Gelernter, David Hillel},
  year = {1998},
  publisher = {{New York : Basic Books}},
  urldate = {2021-10-21},
  abstract = {Includes bibliographical references (p. 145-155) and index; Deep Beuty \textendash{} The paradox of beauty \textendash{} The Aesthetics of computer science \textendash{} Rise of the desktop \textendash{} Beyond the desktop \textendash{} Computer ugliness \textendash{} Unseen Beauty},
  isbn = {978-0-465-04516-7},
  langid = {english},
  keywords = {Human-computer interaction}
}

@book{genette_fiction_1993,
  title = {Fiction \& {{Diction}}},
  author = {Genette, G{\'e}rard},
  year = {1993},
  publisher = {{Cornell University Press}},
  abstract = {Litteraturens aspekter beskrevet ud fra forskellige indfaldsvinkler med udgangspunkt i bl. a. Roman Jakobson's definitioner},
  isbn = {978-0-8014-8086-7},
  langid = {english},
  keywords = {Literary Criticism / Semiotics \& Theory}
}

@article{gentner_antimac_1996,
  title = {The {{Anti-Mac}} Interface},
  author = {Gentner, Don and Nielsen, Jakob},
  year = {1996},
  month = aug,
  journal = {Communications of the ACM},
  volume = {39},
  number = {8},
  pages = {70--82},
  issn = {0001-0782, 1557-7317},
  doi = {10.1145/232014.232032},
  urldate = {2022-12-18},
  abstract = {By exploring alternative interfaces that transcend the principles behind conventional graphical interfaces, a human-computer interface emerges that is based on language, a richer representation of objects, expert users, and shared control.},
  langid = {english}
}

@article{gibbons_beauty_2012,
  title = {The Beauty of Simplicity},
  author = {Gibbons, Jeremy},
  year = {2012},
  month = apr,
  journal = {Communications of the ACM},
  volume = {55},
  number = {4},
  pages = {6--7},
  issn = {0001-0782},
  doi = {10.1145/2133806.2133808},
  urldate = {2022-06-01},
  file = {/home/pierre/Zotero/storage/GWFCQILP/CACM Staff - 2012 - The beauty of simplicity.pdf}
}

@book{gibbons_how_2015,
  title = {How {{Poems Think}}},
  author = {Gibbons, Reginald},
  year = {2015},
  publisher = {{University of Chicago Press}},
  address = {{Chicago}},
  urldate = {2021-10-16},
  abstract = {To write or read a poem is often to think in distinctively poetic ways\textemdash guided by metaphors, sound, rhythms, associative movement, and more. Poetry's stance toward language creates a particular intelligence of thought and feeling, a compressed articulation that expands inner experience, imagining with words what cannot always be imagined without them. Through translation, poetry has diversified poetic traditions, and some of poetry's ways of thinking begin in the ancient world and remain potent even now. In How Poems Think, Reginald Gibbons presents a rich gallery of poetic inventiveness and continuity drawn from a wide range of poets\textemdash Sappho, Pindar, Shakespeare, Keats, William Carlos Williams, Marina Tsvetaeva, Gwendolyn Brooks, and many others. Gibbons explores poetic temperament, rhyme, metonymy, etymology, and other elements of poetry as modes of thinking and feeling. In celebration and homage, Gibbons attunes us to the possibilities of poetic thinking.},
  langid = {english}
}

@book{gibson_ecological_1986,
  title = {The {{Ecological Approach}} to {{Visual Perception}}},
  author = {Gibson, James Jerome},
  year = {1986},
  publisher = {{Psychology Press}},
  abstract = {This is a book about how we see: the environment around us (its surfaces, their layout, and their colors and textures); where we are in the environment; whether or not we are moving and, if we are, where we are going; what things are good for; how to do things (to thread a needle or drive an automobile); or why things look as they do. The basic assumption is that vision depends on the eye which is connected to the brain. The author suggests that natural vision depends on the eyes in the head on a body supported by the ground, the brain being only the central organ of a complete visual system. When no constraints are put on the visual system, people look around, walk up to something interesting and move around it so as to see it from all sides, and go from one vista to another. That is natural vision \textendash{} and what this book is about.},
  isbn = {978-0-89859-959-6},
  langid = {english},
  keywords = {Psychology / Experimental Psychology}
}

@book{goodliffe_code_2007,
  title = {Code {{Craft}}: {{The Practice}} of {{Writing Excellent Code}}},
  shorttitle = {Code {{Craft}}},
  author = {Goodliffe, Pete},
  year = {2007},
  publisher = {{No Starch Press}},
  abstract = {You know how to write code that works, but what about code that\&\#39;s well written and easy to understand? And robust and bug-free? If other programmers looked at your handiwork, would they be able to figure out the code\&\#39;s logic and purpose? Exceptional programmers have more than just technical know-how; they adopt the right approach and attitude to development.Code Craft will help take your programming beyond writing correct code to writing great code, thus turning you into a true programming professional or enhancing your existing professional skills.With language-agnostic advice that\&\#39;s relevant to all developers, Code Craft covers code-writing concerns such as presentation style, variable naming, error handling, and security. And it tackles broader, real-world programming issues like effective teamwork, development processes, and documentation. Each chapter ends with a Q\&amp;A section that reviews key concepts to get you thinking like an expert, making it an especially great reference for newer programmers who want to work professionally and efficiently as part of a team.This survival guide for the software factory will show you how to:* Write good code when the world\&\#39;s not helping you* Avoid disasters and distractions in the workplace* Assess your abilities accurately and determine ways to improve* Adopt productive attitudes and follow best practicesThere\&\#39;s little more valuable than the advice of a true, programming professional. You\&\#39;ll find Code Craft to be clear, practical, and entertaining throughout, and a great way to take your code (and your career) to the next level.},
  isbn = {978-1-59327-119-0},
  langid = {english},
  keywords = {Computers / Programming / General,Computers / Programming Languages / General,Computers / Software Development \& Engineering / General}
}

@article{goodman_basic_1972,
  title = {Basic {{Abilities Required}} for {{Understanding}} and {{Creation}} in the {{Arts}}. {{Final Report}}},
  author = {Goodman, Nelson and Others, And},
  year = {1972},
  month = sep,
  urldate = {2021-04-06},
  abstract = {Aimed at advancement of the arts through improvement of education for both understanding and production, this long range basic research program dealt primarily with the study of the varieties and interaction of human abilities, the nature of the tasks involved in the several arts, and the available means for inculcating or fostering the abilities required to perform such tasks. Methods applied range from the initial clearing away of prevalent misconceptions and the clarification of concepts, through psychological experimentation and the study of clinical work on the brain, to actual field work in educational institutions and the arts. The underlying assumption was that work in the arts, like much human activity, involves the processing of symbols. First, a grounded organization of symbol systems and functions was developed. Then questions and hypotheses concerning the abilities required for the implications of this for the arts were framed and investigated. Throughout the study, however, any question or evidence that promised to further the objective was considered. Rather than offering art educators recommendations and conclusions, the report offers materials that may be of use in their thinking and practice. (Author)},
  langid = {english},
  keywords = {Ability Identification,Art,Art Education,Cognitive Ability,Concept Formation,Creativity,Learning Processes,Music,Research,Symbolic Learning,Visual Learning,Visual Perception},
  file = {/home/pierre/Zotero/storage/PTSWCSKA/Goodman and And Others - 1972 - Basic Abilities Required for Understanding and Cre.pdf;/home/pierre/Zotero/storage/87KN93UX/eric.ed.gov.html}
}

@book{goodman_languages_1976,
  title = {Languages of {{Art}}},
  author = {Goodman, Nelson},
  year = {1976},
  month = jun,
  edition = {2nd edition},
  publisher = {{Hackett Publishing Company, Inc.}},
  address = {{Indianapolis, Ind.}},
  abstract = {"Like Dewey, he has revolted against the empiricist dogma and the Kantian dualisms which have compartmentalized philosophical thought. . . . Unlike Dewey, he has provided detailed incisive argumentation, and has shown just where the dogmas and dualisms break down." \textendash Richard Rorty, The Yale Review},
  isbn = {978-0-915144-34-1},
  langid = {english}
}

@article{goodman_scientific_1989,
  title = {Scientific {{Computing}} in the {{Soviet Union}}},
  author = {Goodman, Seymour E. and McHenry, William K. and Wolcott, Peter},
  year = {1989},
  month = jan,
  journal = {Computers in Physics},
  volume = {3},
  number = {1},
  pages = {39--45},
  issn = {0894-1866},
  doi = {10.1063/1.4822814},
  urldate = {2022-04-02},
  file = {/home/pierre/Zotero/storage/ADIJAAEJ/Goodman et al. - 1989 - Scientific Computing in the Soviet Union.pdf}
}

@book{goodman_structure_1966,
  title = {The Structure of Appearance},
  author = {Goodman, Nelson},
  year = {1966},
  publisher = {{Bobbs-Merrill}},
  address = {{Indianapolis, IN}},
  langid = {english},
  keywords = {Phenomenology.,Science -- Philosophy.,Structuralism.,System theory.},
  annotation = {Open Library ID: OL21175944M}
}

@book{goodman_ways_1978,
  title = {Ways {{Of Worldmaking}}},
  author = {Goodman, Nelson},
  year = {1978},
  urldate = {2021-10-14},
  abstract = {"In a way reminiscent of Einstein, Goodman leads us to the very edge of relativism, only then to step back and to suggest certain criteria of fairness and rightness. More so than any other commentator, he has provided a workable notion of the kinds of skills and capacities that are central for anyone who works in the arts." \textendash{} Howard Gardner, Harvard University},
  copyright = {http://creativecommons.org/publicdomain/mark/1.0/},
  langid = {english},
  keywords = {philosophy}
}

@book{goody_domestication_1977,
  title = {The {{Domestication}} of the {{Savage Mind}}},
  author = {Goody, Jack},
  year = {1977},
  publisher = {{Cambridge University Press}},
  abstract = {Current theories and views on the differences in the 'mind' of human societies depend very much on a dichotomy between 'advanced' and 'primitive', or between 'open' and 'closed', or between 'domesticated' and 'savage', that is to say, between one of a whole variety of 'we-they' distinctions. Professor Goody argues that such an approach prevents any serious discussion of the mechanisms leading to long-term changes in the cognitive processes of human cultures or any adequate explanation of the changes in 'traditional' societies that are taking place in the world around us. In this book he attempts to provide the framework for a more satisfactory explanation by relating certain broad differences in 'mentalities' to the changes in the means of communication, and specifically to the series of shifts involved in the development of writing. The argument is based upon theoretical considerations, as well as empirical evidence derived from recent fieldwork in West Africa and the study of a wide range of source material on the ancient societies of the Near East.},
  isbn = {978-0-521-21726-2},
  langid = {english},
  keywords = {Social Science / Anthropology / General}
}

@book{goody_logic_1986,
  title = {The {{Logic}} of {{Writing}} and the {{Organization}} of {{Society}}},
  author = {Goody, Jack},
  year = {1986},
  series = {Studies in {{Literacy}}, the {{Family}}, {{Culture}} and the {{State}}},
  publisher = {{Cambridge University Press}},
  doi = {10.1017/CBO9780511621598}
}

@inproceedings{gopstein_understanding_2017,
  title = {Understanding Misunderstandings in Source Code},
  booktitle = {Proceedings of the 2017 11th {{Joint Meeting}} on {{Foundations}} of {{Software Engineering}}},
  author = {Gopstein, Dan and Iannacone, Jake and Yan, Yu and DeLong, Lois and Zhuang, Yanyan and Yeh, Martin K.-C. and Cappos, Justin},
  year = {2017},
  month = aug,
  series = {{{ESEC}}/{{FSE}} 2017},
  pages = {129--139},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3106237.3106264},
  urldate = {2021-10-16},
  abstract = {Humans often mistake the meaning of source code, and so misjudge a program's true behavior. These mistakes can be caused by extremely small, isolated patterns in code, which can lead to significant runtime errors. These patterns are used in large, popular software projects and even recommended in style guides. To identify code patterns that may confuse programmers we extracted a preliminary set of `atoms of confusion' from known confusing code. We show empirically in an experiment with 73 participants that these code patterns can lead to a significantly increased rate of misunderstanding versus equivalent code without the patterns. We then go on to take larger confusing programs and measure (in an experiment with 43 participants) the impact, in terms of programmer confusion, of removing these confusing patterns. All of our instruments, analysis code, and data are publicly available online for replication, experimentation, and feedback.},
  isbn = {978-1-4503-5105-8},
  keywords = {Program Understanding,Programming Languages},
  file = {/home/pierre/Zotero/storage/NBCJC5FW/Gopstein et al. - 2017 - Understanding misunderstandings in source code.pdf}
}

@article{gordon_who_1988,
  title = {Who {{Turned}} the {{Mechanical Ideal}} into {{Mechanical Reality}}?},
  author = {Gordon, Robert B.},
  year = {1988},
  journal = {Technology and Culture},
  volume = {29},
  number = {4},
  eprint = {3105044},
  eprinttype = {jstor},
  pages = {744--778},
  issn = {0040-165X},
  doi = {10.2307/3105044},
  urldate = {2021-01-28}
}

@book{goriunova_read_2005,
  title = {Read {{Me}}: {{Software Art}} \& {{Cultures}}},
  author = {Goriunova, Olga and Shulgin, Alexei},
  year = {2005},
  month = dec,
  edition = {2004th edition},
  publisher = {{Aarhus University Press}},
  address = {{Aarhus}},
  abstract = {Software art is a practice that regards software as a cultural phenomenon that defines one of the principal domains of our existence today. Thus, software is not regarded as an invisible layer, but rather as a decisive level and a language working at reproduction of certain orders, whether aesthetic, cultural, social or political. Software art creatively questions and redefines software and its ways of functioning.},
  isbn = {978-87-988440-4-4},
  langid = {english}
}

@article{graf_dualprocess_2015,
  title = {A Dual-Process Perspective on Fluency-Based Aesthetics: The Pleasure-Interest Model of Aesthetic Liking},
  shorttitle = {A Dual-Process Perspective on Fluency-Based Aesthetics},
  author = {Graf, Laura K. M. and Landwehr, Jan R.},
  year = {2015},
  month = nov,
  journal = {Personality and Social Psychology Review: An Official Journal of the Society for Personality and Social Psychology, Inc},
  volume = {19},
  number = {4},
  pages = {395--410},
  issn = {1532-7957},
  doi = {10.1177/1088868315574978},
  abstract = {In this article, we develop an account of how aesthetic preferences can be formed as a result of two hierarchical, fluency-based processes. Our model suggests that processing performed immediately upon encountering an aesthetic object is stimulus driven, and aesthetic preferences that accrue from this processing reflect aesthetic evaluations of pleasure or displeasure. When sufficient processing motivation is provided by a perceiver's need for cognitive enrichment and/or the stimulus' processing affordance, elaborate perceiver-driven processing can emerge, which gives rise to fluency-based aesthetic evaluations of interest, boredom, or confusion. Because the positive outcomes in our model are pleasure and interest, we call it the Pleasure-Interest Model of Aesthetic Liking (PIA Model). Theoretically, this model integrates a dual-process perspective and ideas from lay epistemology into processing fluency theory, and it provides a parsimonious framework to embed and unite a wealth of aesthetic phenomena, including contradictory preference patterns for easy versus difficult-to-process aesthetic stimuli.},
  langid = {english},
  pmid = {25742990},
  keywords = {boredom,Cognition,confusion,dual-process theories,empirical aesthetics,epistemic motivation,Esthetics,Humans,interest,{Models, Psychological},Motivation,need for cognitive enrichment,pleasure,Pleasure,processing fluency}
}

@misc{graham_hackers_2003,
  title = {Hackers and {{Painters}}},
  author = {Graham, Paul},
  year = {2003},
  month = may,
  journal = {Paulgraham.com},
  urldate = {2022-06-01},
  howpublished = {http://www.paulgraham.com/hp.html},
  file = {/home/pierre/Zotero/storage/GNWILTN9/hp.html}
}

@book{granger_essai_1988,
  title = {{Essai d'une philosophie du style}},
  author = {Granger, Gilles-Gaston},
  year = {1988},
  month = jan,
  edition = {\'edition revue et corrig\'ee},
  publisher = {{Odile Jacob / Seuil}},
  address = {{Paris}},
  abstract = {Cet ouvrage propose la d\'efinition d'un concept g\'en\'eralis\'e du style, consid\'er\'e non plus seulement comme cat\'egorie esth\'etique, mais comme applicable \`a tout travail humain. L'auteur applique ce concept de style \`a des exemples d'oeuvres math\'ematiques, puis au cas plus familier des oeuvres de langage, avant d'esquisser le projet d'une stylistique des sciences de l'homme, compl\'ementaire d'une histoire des connaissances et d'une \'epist\'emologie des structures. Gilles-Gaston Granger, sp\'ecialiste d'\'epist\'emologie, est professeur honoraire au Coll\`ege de France.},
  isbn = {978-2-7381-0022-1},
  langid = {french}
}

@misc{green_how_2006,
  title = {How {{To Write Unmaintainable Code}}},
  author = {Green, Roedy},
  year = {2006},
  month = aug,
  journal = {archive.ph},
  urldate = {2022-06-03},
  abstract = {To},
  howpublished = {https://archive.ph/Pn5hH},
  file = {/home/pierre/Zotero/storage/WEIC6GRX/Pn5hH.html}
}

@misc{greenberg_multics_1996,
  title = {Multics {{Emacs History}}/{{Design}}/{{Implementation}}},
  author = {Greenberg, Bernard S.},
  year = {1996},
  month = aug,
  journal = {Multics Emacs: The History, Design and Implementation},
  urldate = {2022-12-18},
  howpublished = {https://www.multicians.org/mepap.html\#secviii},
  file = {/home/pierre/Zotero/storage/MQEPAL7X/mepap.html}
}

@book{grossberg_marxism_1988,
  title = {Marxism and the {{Interpretation}} of {{Culture}}},
  author = {Grossberg, Lawrence and Lefebvre, Henri and Mouffe, Chantal and MacKinnon, Catharine A. and Balibar, Etienne and Petrovic, Gajo and Frith, Simon and Eagleton, Terry and Franco, Jean},
  editor = {Nelson, Cary},
  year = {1988},
  month = oct,
  edition = {Reprint edition},
  publisher = {{University of Illinois Press}},
  address = {{Urbana}},
  isbn = {978-0-252-01401-7},
  langid = {english}
}

@article{grudin_tool_2016,
  title = {From {{Tool}} to {{Partner}}: {{The Evolution}} of {{Human-Computer Interaction}}},
  shorttitle = {From {{Tool}} to {{Partner}}},
  author = {Grudin, Jonathan},
  year = {2016},
  month = dec,
  journal = {Synthesis Lectures on Human-Centered Informatics},
  volume = {10},
  number = {1},
  pages = {i--183},
  issn = {1946-7680},
  doi = {10.2200/S00745ED1V01Y201612HCI035},
  urldate = {2021-01-28},
  file = {/home/pierre/Zotero/storage/9LH37LNZ/Grudin - 2016 - From Tool to Partner The Evolution of Human-Compu.pdf;/home/pierre/Zotero/storage/KB5TG9NM/S00745ED1V01Y201612HCI035.html}
}

@misc{guerra_plop_2022,
  title = {{{PLoP}} 2022 - 29th {{Conference}} on {{Pattern Languages}} of {{Programs}} (Online)},
  author = {Guerra, Eduardo and Manns, Mary Lynn},
  year = {2022},
  urldate = {2023-03-20},
  abstract = {Pattern Languages of Programs (PLoP) events are opportunities for pattern authors to have their pattern languages critically reviewed by fellow authors. PLoP conferences focus on writing groups to better improve patterns through group exposure. Each conference offers advanced topics for the more adept pattern writers. Participants have the opportunity to refine and extend their patterns with help from knowledgeable and sympathetic patterns enthusiasts.},
  howpublished = {https://hillside.net/plop/2022/index.php?nav=ploppaperscfp},
  langid = {english},
  file = {/home/pierre/Zotero/storage/6PNUQXA5/index.html}
}

@inproceedings{guerrouj_normalizing_2013,
  title = {Normalizing Source Code Vocabulary to Support Program Comprehension and Software Quality},
  booktitle = {Proceedings of the 2013 {{International Conference}} on {{Software Engineering}}},
  author = {Guerrouj, Latifa},
  year = {2013},
  month = may,
  series = {{{ICSE}} '13},
  pages = {1385--1388},
  publisher = {{IEEE Press}},
  address = {{San Francisco, CA, USA}},
  urldate = {2021-10-15},
  abstract = {The literature reports that source code lexicon plays a paramount role in program comprehension, especially when software documentation is scarce, outdated or simply not available. In source code, a significant proportion of vocabulary can be either acronyms and-or abbreviations or concatenation of terms that can not be identified using consistent mechanisms such as naming conventions. It is, therefore, essential to disambiguate concepts conveyed by identifiers to support program comprehension and reap the full benefit of Information Retrieval-based techniques (e.g., feature location and traceability) whose linguistic information (i.e., source code identifiers and comments) used across all software artifacts (e.g., requirements, design, change requests, tests, and source code) must be consistent. To this aim, we propose source code vocabulary normalization approaches that exploit contextual information to align the vocabulary found in the source code with that found in other software artifacts. We were inspired in the choice of context levels by prior works and by our findings. Normalization consists of two tasks: splitting and expansion of source code identifiers. We also investigate the effect of source code vocabulary normalization approaches on software maintenance tasks. Results of our evaluation show that our contextual-aware techniques are accurate and efficient in terms of computation time than state of the art alternatives. In addition, our findings reveal that feature location techniques can benefit from vocabulary normalization approaches when no dynamic information is available.},
  isbn = {978-1-4673-3076-3}
}

@inproceedings{hannay_how_2009,
  title = {How Do Scientists Develop and Use Scientific Software?},
  booktitle = {2009 {{ICSE Workshop}} on {{Software Engineering}} for {{Computational Science}} and {{Engineering}}},
  author = {Hannay, Jo Erskine and MacLeod, Carolyn and Singer, Janice and Langtangen, Hans Petter and Pfahl, Dietmar and Wilson, Greg},
  year = {2009},
  month = may,
  pages = {1--8},
  doi = {10.1109/SECSE.2009.5069155},
  abstract = {New knowledge in science and engineering relies increasingly on results produced by scientific software. Therefore, knowing how scientists develop and use software in their research is critical to assessing the necessity for improving current development practices and to making decisions about the future allocation of resources. To that end, this paper presents the results of a survey conducted online in October-December 2008 which received almost 2000 responses. Our main conclusions are that (1) the knowledge required to develop and use scientific software is primarily acquired from peers and through self-study, rather than from formal education and training; (2) the number of scientists using supercomputers is small compared to the number using desktop or intermediate computers; (3) most scientists rely primarily on software with a large user base; (4) while many scientists believe that software testing is important, a smaller number believe they have sufficient understanding about testing concepts; and (5) that there is a tendency for scientists to rank standard software engineering concepts higher if they work in large software development projects and teams, but that there is no uniform trend of association between rank of importance of software engineering concepts and project/team size.},
  keywords = {Automatic testing,Computer science education,Knowledge engineering,Peer to peer computing,Resource management,Software engineering,Software standards,Software testing,Standards development,Supercomputers},
  file = {/home/pierre/Zotero/storage/4RDTINP2/Hannay et al. - 2009 - How do scientists develop and use scientific softw.pdf;/home/pierre/Zotero/storage/CEBZAUPB/5069155.html}
}

@book{hansen_bodies_2006,
  title = {Bodies in {{Code}}: {{Interfaces}} with {{Digital Media}}},
  shorttitle = {Bodies in {{Code}}},
  author = {Hansen, Mark B. N.},
  year = {2006},
  month = sep,
  publisher = {{Routledge}},
  address = {{New York}},
  doi = {10.4324/9780203942390},
  abstract = {Bodies in Code explores how our bodies experience and adapt to digital environments. Cyberculture theorists have tended to overlook biological reality when talking about virtual reality, and Mark B. N. Hansen's book shows what they've been missing. Cyberspace is anchored in the body, he argues, and it's the body\textendash not high-tech computer graphics\textendash that allows a person to feel like they are really "moving" through virtual reality. Of course these virtual experiences are also profoundly affecting our very understanding of what it means to live as embodied beings. Hansen draws upon recent work in visual culture, cognitive science, and new media studies, as well as examples of computer graphics, websites, and new media art, to show how our bodies are in some ways already becoming virtual.},
  isbn = {978-0-203-94239-0}
}

@inproceedings{hansen_crafting_2014,
  title = {Crafting {{Code}} at the {{Demo-Scene}}},
  booktitle = {Proceedings of the 2014 {{Conference}} on {{Designing Interactive Systems}}},
  author = {Hansen, Nicolai Brodersen and N{\o}rg{\aa}rd, Rikke Toft and Halskov, Kim},
  year = {2014},
  series = {{{DIS}} '14},
  pages = {35--38},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2598510.2598526},
  abstract = {This paper introduces the idea of craftsmanship as a way of understanding the shaping and re-shaping of code as a material crafting practice. We build our analysis on a qualitative study of a coder engaged in creative and expressive programming on an old hardware platform. The contribution of the paper is a set of conceptual categories: craft engagement, craftsmanship rhythm and craftsmanship expressivity, that conceptualizes coding as crafting.},
  isbn = {978-1-4503-2902-6},
  keywords = {code,craftsmanship,design materials,materials}
}

@book{hardy_mathematician_2012,
  title = {A {{Mathematician}}'s {{Apology}}},
  author = {Hardy, G. H.},
  year = {2012},
  series = {Canto {{Classics}}},
  publisher = {{Cambridge University Press}},
  address = {{Cambridge}},
  doi = {10.1017/CBO9781107295599},
  urldate = {2023-03-23},
  abstract = {G. H. Hardy was one of this century's finest mathematical thinkers, renowned among his contemporaries as a 'real mathematician \ldots{} the purest of the pure'. He was also, as C. P. Snow recounts in his Foreword, 'unorthodox, eccentric, radical, ready to talk about anything'. This 'apology', written in 1940, offers a brilliant and engaging account of mathematics as very much more than a science; when it was first published, Graham Greene hailed it alongside Henry James's notebooks as 'the best account of what it was like to be a creative artist'. C. P. Snow's Foreword gives sympathetic and witty insights into Hardy's life, with its rich store of anecdotes concerning his collaboration with the brilliant Indian mathematician Ramanujan, his idiosyncrasies and his passion for cricket. This is a unique account of the fascination of mathematics and of one of its most compelling exponents in modern times.},
  isbn = {978-1-107-60463-6},
  file = {/home/pierre/Zotero/storage/BC3643GR/B90D81A8E28674119781863988A3E11B.html}
}

@article{harlow_computer_1965,
  title = {Computer {{Experiments}} in {{Fluid Dynamics}}},
  author = {Harlow, F. and Fromm, J.},
  year = {1965},
  doi = {10.1038/SCIENTIFICAMERICAN0365-104},
  abstract = {Semantic Scholar extracted view of "Computer Experiments in Fluid Dynamics" by F. Harlow et al.}
}

@inproceedings{harman_why_2010,
  title = {Why {{Source Code Analysis}} and {{Manipulation Will Always}} Be {{Important}}},
  booktitle = {2010 10th {{IEEE Working Conference}} on {{Source Code Analysis}} and {{Manipulation}}},
  author = {Harman, Mark},
  year = {2010},
  month = sep,
  pages = {7--19},
  doi = {10.1109/SCAM.2010.28},
  abstract = {This paper makes a case for Source Code Analysis and Manipulation. The paper argues that it will not only remain important, but that its importance will continue to grow. This argument is partly based on the 'law' of tendency to executability, which the paper introduces. The paper also makes a case for Source Code Analysis purely for the sake of analysis. Analysis for its own sake may not be merely indulgent introspection. The paper argues that it may ultimately prove to be hugely important as source code gradually gathers together all aspects of human socioeconomic and governmental processes and systems.},
  keywords = {Automation,Complexity theory,Computers,Engines,Humans,slicing,Software,source code analysis,transformation,Unified modeling language},
  file = {/home/pierre/Zotero/storage/DRIP6ETT/5601835.html}
}

@misc{harpo_answer_2008,
  title = {Answer to "{{Most}} Efficient Way to Convert an {{HTMLCollection}} to an {{Array}}"},
  author = {{harpo}},
  year = {2008},
  month = oct,
  journal = {Stack Overflow},
  urldate = {2022-09-14},
  file = {/home/pierre/Zotero/storage/W9XIUA7N/most-efficient-way-to-convert-an-htmlcollection-to-an-array.html}
}

@misc{hassett_impact_2012,
  title = {Impact of {{Apple}} vs. {{Franklin Decision}}:},
  shorttitle = {Impact of {{Apple}} vs. {{Franklin Decision}}},
  author = {Hassett, Rob},
  year = {2012},
  month = dec,
  journal = {InternetLegal.com},
  urldate = {2023-02-13},
  abstract = {This article first appeared in the December 5, 1983 issue of Computer World and addressed the decision of the U.S. Court of Appeals for the Third Circuit regarding the Apple Computer v. Franklin Computer Corporation lawsuit. This was a very important case both to copyright law in general and to the evolution of the computer industry. (3 Pages)},
  chapter = {Intellectual Property},
  langid = {american},
  file = {/home/pierre/Zotero/storage/SL4WLE2I/impact-of-apple-vs-franklin-decision.html}
}

@article{hatton_how_1994,
  title = {How Accurate Is Scientific Software?},
  author = {Hatton, L. and Roberts, A.},
  year = {1994},
  month = oct,
  journal = {IEEE Transactions on Software Engineering},
  volume = {20},
  number = {10},
  pages = {785--797},
  issn = {1939-3520},
  doi = {10.1109/32.328993},
  abstract = {This paper describes some results of what, to the authors' knowledge, is the largest N-version programming experiment ever performed. The object of this ongoing four-year study is to attempt to determine just how consistent the results of scientific computation really are, and, from this, to estimate accuracy. The experiment is being carried out in a branch of the earth sciences known as seismic data processing, where 15 or so independently developed large commercial packages that implement mathematical algorithms from the same or similar published specifications in the same programming language (Fortran) have been developed over the last 20 years. The results of processing the same input dataset, using the same user-specified parameters, for nine of these packages is reported in this paper. Finally, feedback of obvious flaws was attempted to reduce the overall disagreement. The results are deeply disturbing. Whereas scientists like to think that their code is accurate to the precision of the arithmetic used, in this study, numerical disagreement grows at around the rate of 1\% in average absolute difference per 4000 fines of implemented code, and, even worse, the nature of the disagreement is nonrandom. Furthermore, the seismic data processing industry has better than average quality standards for its software development with both identifiable quality assurance functions and substantial test datasets.\textbackslash textless\textbackslash textgreater},
  keywords = {Arithmetic,Computer industry,Computer languages,Data processing,Feedback,Geoscience,Packaging,Programming,Software standards,Standards development},
  file = {/home/pierre/Zotero/storage/L8LSVTB2/328993.html}
}

@book{hayes_cultures_2017,
  title = {Cultures of {{Code}}},
  author = {Hayes, Brian},
  year = {2017},
  month = feb,
  urldate = {2021-01-28},
  abstract = {Three communities in the world of computation are bound together by common interests but set apart by distinctly different aims and agendas.},
  langid = {english},
  file = {/home/pierre/Zotero/storage/Y2ALHPAB/cultures-of-code.html}
}

@book{hayles_my_2010,
  title = {My {{Mother Was}} a {{Computer}}: {{Digital Subjects}} and {{Literary Texts}}},
  shorttitle = {My {{Mother Was}} a {{Computer}}},
  author = {Hayles, N. Katherine},
  year = {2010},
  month = mar,
  publisher = {{University of Chicago Press}},
  abstract = {We live in a world, according to N. Katherine Hayles, where new languages are constantly emerging, proliferating, and fading into obsolescence. These are languages of our own making: the programming languages written in code for the intelligent machines we call computers. Hayles's latest exploration provides an exciting new way of understanding the relations between code and language and considers how their interactions have affected creative, technological, and artistic practices. My Mother Was a Computer explores how the impact of code on everyday life has become comparable to that of speech and writing: language and code have grown more entangled, the lines that once separated humans from machines, analog from digital, and old technologies from new ones have become blurred. My Mother Was a Computer gives us the tools necessary to make sense of these complex relationships. Hayles argues that we live in an age of intermediation that challenges our ideas about language, subjectivity, literary objects, and textuality. This process of intermediation takes place where digital media interact with cultural practices associated with older media, and here Hayles sharply portrays such interactions: how code differs from speech; how electronic text differs from print; the effects of digital media on the idea of the self; the effects of digitality on printed books; our conceptions of computers as living beings; the possibility that human consciousness itself might be computational; and the subjective cosmology wherein humans see the universe through the lens of their own digital age. We are the children of computers in more than one sense, and no critic has done more than N. Katherine Hayles to explain how these technologies define us and our culture. Heady and provocative, My Mother Was a Computer will be judged as her best work yet.},
  isbn = {978-0-226-32149-3},
  langid = {english},
  keywords = {Computers / Cybernetics,Literary Criticism / American / General,Literary Criticism / General}
}

@article{hayles_print_2004,
  title = {Print {{Is Flat}}, {{Code Is Deep}}: {{The Importance}} of {{Media-Specific Analysis}}},
  shorttitle = {Print {{Is Flat}}, {{Code Is Deep}}},
  author = {Hayles, N. Katherine},
  year = {2004},
  month = mar,
  journal = {Poetics Today},
  volume = {25},
  number = {1},
  pages = {67--90},
  issn = {0333-5372},
  doi = {10.1215/03335372-25-1-67},
  urldate = {2021-10-21},
  abstract = {Lulled into somnolence by five hundred years of print, literary analysis should awaken to the importance of media-specific analysis, a mode of critical attention which recognizes that all texts are instantiated and that the nature of the medium in which they are instantiated matters. Central to repositioning critical inquiry, so it can attend to the specificity of the medium, is a more robust notion of materiality. Materiality is reconceptualized as the interplay between a text's physical characteristics and its signifying strategies, a move that entwines instantiation and signification at the outset. This definition opens the possibility of considering texts as embodied entities while still maintaining a central focus on interpretation. It makes materiality an emergent property, so that it cannot be specified in advance,as if it were a pregiven entity. Rather, materiality is open to debate and interpretation, ensuring that discussions about the text's``meaning'' will also take into account its physical specificity as well.Following the emphasis on media-specific analysis, nine points can be made about the specificities of electronic hypertext: they are dynamic images; they include both analogue resemblance and digital coding; they are generated through fragmentation and recombination; they have depth and operate in three dimensions; they are written in code as well as natural language; they are mutable and transformable; they are spaces to navigate; they are written and read in distributed cognitive environments; and they initiate and demand cyborg reading practices.},
  file = {/home/pierre/Zotero/storage/4CVXRFPY/Print-Is-Flat-Code-Is-Deep-The-Importance-of-Media.html}
}

@incollection{heidegger_building_1975,
  title = {Building, {{Dwelling}}, {{Thinking}}},
  booktitle = {Poetry, Language, Thought},
  author = {Heidegger, Martin and Hofstadter, Albert},
  year = {1975},
  series = {Harper Colophon Books},
  edition = {1st Harper Colophone ed},
  publisher = {{Harper \& Row}},
  address = {{New York}},
  isbn = {978-0-06-090430-2},
  langid = {english},
  keywords = {Langage et langues Philosophie,Language and languages Philosophy,Po\'esie,poetry,Poetry,Poetry as Topic,Thought and thinking},
  annotation = {OCLC: 29663193}
}

@article{heinzmann_poincare_1998,
  title = {{Poincar\'e on understanding mathematics}},
  author = {Heinzmann, Gerhard},
  year = {1998},
  journal = {Philosophia Scientiae},
  volume = {3},
  number = {2},
  pages = {43--60},
  urldate = {2022-07-14},
  langid = {french},
  file = {/home/pierre/Zotero/storage/Q2QNWUEJ/Heinzmann - 1998 - PoincarÃ© on understanding mathematics.pdf;/home/pierre/Zotero/storage/MWBCUE4V/item.html}
}

@book{hendrickson_software_2002,
  title = {Software {{Craftsmanship}}: {{The New Imperative}}},
  shorttitle = {Software {{Craftsmanship}}},
  author = {Hendrickson, Mike and McBreen, Pete},
  year = {2002},
  publisher = {{Addison-Wesley Professional}},
  abstract = {By recognizing that software development is not a mechanical task, you can create better applications. Today's software development projects are often based on the traditional software engineering model, which was created to develop large-scale defense projects. Projects that use this antiquated industrial model tend to take longer, promise more, and deliver less. As the demand for software has exploded, the software engineering establishment has attempted to adapt to the changing times with short training programs that teach the syntax of coding languages. But writing code is no longer the hard part of development; the hard part is figuring out what to write. This kind of know-how demands a skilled craftsman, not someone who knows only how to pass a certification course. Software Craftsmanship presents an alternative\textendash a craft model that focuses on the people involved in commercial software development. This book illustrates that it is imperative to turn from the technology-for-its-own-sake model to one that is grounded in delivering value to customers. The author, Pete McBreen, presents a method to nurture mastery in the programmer, develop creative collaboration in small developer teams, and enhance communications with the customer. The end result\textendash skilled developers who can create, extend, and enhance robust applications. This book addresses the following topics, among others: Understanding customer requirements Identifying when a project may go off track Selecting software craftsmen for a particular project Designing goals for application development Managing software craftsmen Software Craftsmanship is written for programmers who want to become exceptional at their craft and for the project manager who wants to hire them. 0201733862B07242001},
  isbn = {978-0-201-73386-0},
  langid = {english},
  keywords = {Computers / Software Development \& Engineering / General}
}

@incollection{henningsen_joys_2020,
  title = {The {{Joys}} of {{Wiki Work}}: {{Craftsmanship}}, {{Flow}} and {{Self-externalization}} in a {{Digital Environment}}},
  shorttitle = {The {{Joys}} of {{Wiki Work}}},
  booktitle = {Libraries, {{Archives}} and {{Museums}} as {{Democratic Spaces}} in a {{Digital Age}}},
  author = {Henningsen, Erik and Larsen, H{\aa}kon},
  editor = {Audunson, Ragnar and Andresen, Herbjorn and Fagerlid, Cicilie},
  year = {2020},
  month = sep,
  pages = {345--362},
  publisher = {{De Gruyter Saur}},
  doi = {10.1515/9783110636628-017},
  abstract = {Public discussions on digital technology and the Internet tend generally to be framed in epochalist terms and to be rife with utopian and dystopian projections of our imminent digital futures (Du Gay 2003; Henningsen and Larsen, this volume). As many observers have noted, in recent years a shift in the tone of such discussions has occurred, as the optimism that accrued to the Web 2.0 and social media 10\textendash 15 years ago has waned, with darker visions being brought to the fore. Today, a probing of the role of social media as vehicles of misinformation, commoditization, andmass surveillance looms large in popular and scholarly discussions alike (Fuchs et al. 2012; Van Dijck 2013). However, there is one notable exception to this trend in the current flora of social media: since the turn of the century,Wikipedia and platforms based on the wiki-technology have been a constant source of positive wonder among commentators. This relates to the democratic nature of the Wikipedia organization, to the deliberative aspect of content production, and to the platforms' persistent avoidance of commercialism (Firer- Blaes and Fuchs 2014; Van Dijck 2013; Wright 2010).},
  isbn = {978-3-11-063662-8},
  file = {/home/pierre/Zotero/storage/TWWFQM46/Henningsen and Larsen - 2020 - 7 The Joys of Wiki Work Craftsmanship, Flow and S.pdf}
}

@misc{hill_what_2016,
  title = {What {{Makes}} a {{Program Elegant}}?},
  author = {Hill, Robin K.},
  year = {2016},
  month = nov,
  urldate = {2022-06-13},
  abstract = {Most programmers would agree that some programs are elegant, and that elegant programs are better than others.},
  howpublished = {https://cacm.acm.org/blogs/blog-cacm/208547-what-makes-a-program-elegant/fulltext},
  langid = {english},
  file = {/home/pierre/Zotero/storage/32QBPCGZ/fulltext.html}
}

@inproceedings{hoare_algebra_1993,
  title = {Algebra and Models},
  booktitle = {Proceedings of the 1st {{ACM SIGSOFT}} Symposium on {{Foundations}} of Software Engineering - {{SIGSOFT}} '93},
  author = {Hoare, C. A. R.},
  year = {1993},
  pages = {1--8},
  publisher = {{ACM Press}},
  address = {{Los Angeles, California, United States}},
  doi = {10.1145/256428.167053},
  urldate = {2021-02-05},
  isbn = {978-0-89791-625-7},
  langid = {english},
  file = {/home/pierre/Zotero/storage/ICPTZWNA/algebra-and-models-NNts7uZykb.html}
}

@incollection{hoare_chapter_1972,
  title = {Chapter {{II}}: {{Notes}} on Data Structuring},
  shorttitle = {Chapter {{II}}},
  booktitle = {Structured Programming},
  author = {Hoare, C. A. R.},
  year = {1972},
  month = jan,
  pages = {83--174},
  publisher = {{Academic Press Ltd.}},
  address = {{GBR}},
  urldate = {2021-11-18},
  isbn = {978-0-12-200550-3},
  file = {/home/pierre/Zotero/storage/ELEGVKTV/Hoare - 1972 - Chapter II Notes on data structuring.pdf}
}

@inproceedings{hoare_how_1996,
  title = {How Did Software Get so Reliable without Proof?},
  booktitle = {{{FME}}'96: {{Industrial Benefit}} and {{Advances}} in {{Formal Methods}}},
  author = {Hoare, C. A. R.},
  editor = {Gaudel, Marie-Claude and Woodcock, James},
  year = {1996},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {1--17},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-60973-3_77},
  abstract = {By surveying current software engineering practice, this paper reveals that the techniques employed to achieve reliability are little different from those which have proved effective in all other branches of modern engineering: rigorous management of procedures for design inspection and review; quality assurance based on a wide range of targeted tests; continuous evolution by removal of errors from products already in widespread use; and defensive programming, among other forms of deliberate over-engineering. Formal methods and proof play a small direct role in large scale programming; but they do provide a conceptual framework and basic understanding to promote the best of current practice, and point directions for future improvement.},
  isbn = {978-3-540-49749-3},
  langid = {english},
  keywords = {Formal Method,Legacy Code,Model Check,Mutual Exclusion Protocol,Proof Rule},
  file = {/home/pierre/Zotero/storage/PUAY8FIS/Hoare - 1996 - How did software get so reliable without proof.pdf}
}

@book{holden_code_2016,
  title = {./Code --Poetry},
  author = {Holden, Mr Daniel and Kerr, Mr Chris},
  year = {2016},
  month = sep,
  edition = {1.0 edition},
  publisher = {{CreateSpace Independent Publishing Platform}},
  address = {{S.L}},
  isbn = {978-1-5390-0523-0},
  langid = {english}
}

@book{hoover_apprenticeship_2009,
  title = {Apprenticeship {{Patterns}}: {{Guidance}} for the {{Aspiring Software Craftsman}}},
  shorttitle = {Apprenticeship {{Patterns}}},
  author = {Hoover, Dave and Oshineye, Adewale},
  year = {2009},
  month = oct,
  publisher = {{"O'Reilly Media, Inc."}},
  abstract = {Are you doing all you can to further your career as a software developer? With today's rapidly changing and ever-expanding technologies, being successful requires more than technical expertise. To grow professionally, you also need soft skills and effective learning techniques. Honing those skills is what this book is all about. Authors Dave Hoover and Adewale Oshineye have cataloged dozens of behavior patterns to help you perfect essential aspects of your craft.Compiled from years of research, many interviews, and feedback from O'Reilly's online forum, these patterns address difficult situations that programmers, administrators, and DBAs face every day. And it's not just about financial success. Apprenticeship Patterns also approaches software development as a means to personal fulfillment. Discover how this book can help you make the best of both your life and your career. Solutions to some common obstacles that this book explores in-depth include: Burned out at work? "Nurture Your Passion" by finding a pet project to rediscover the joy of problem solving.Feeling overwhelmed by new information? Re-explore familiar territory by building something you've built before, then use "Retreat into Competence" to move forward again.Stuck in your learning? Seek a team of experienced and talented developers with whom you can "Be the Worst" for a while."Brilliant stuff! Reading this book was like being in a time machine that pulled me back to those key learning moments in my career as a professional software developer and, instead of having to learn best practices the hard way, I had a guru sitting on my shoulder guiding me every step towards master craftsmanship. I'll certainly be recommending this book to clients. I wish I had this book 14 years ago!"-Russ Miles, CEO, OpenCredo},
  isbn = {978-1-4493-7940-7},
  langid = {english},
  keywords = {Computers / Programming Languages / General,Computers / Software Development \& Engineering / General}
}

@article{hopkins_camels_1992,
  title = {Camels and {{Needles}}: {{Computer Poetry Meets}} the {{Perl Programming Language}}},
  author = {Hopkins, Sharon},
  year = {1992},
  journal = {Usenix Technical Conference}
}

@book{hunt_pragmatic_1999,
  title = {The {{Pragmatic Programmer}}: {{From Journeyman}} to {{Master}}},
  shorttitle = {The {{Pragmatic Programmer}}},
  author = {Hunt, Andrew and Thomas, David},
  year = {1999},
  month = oct,
  edition = {1st edition},
  publisher = {{Addison-Wesley Professional}},
  address = {{Reading, Mass}},
  abstract = {Ward Cunningham Straight from the programming trenches, The Pragmatic Programmer cuts through the increasing specialization and technicalities of modern software development to examine the core process\textendash taking a requirement and producing working, maintainable code that delights its users. It covers topics ranging from personal responsibility and career development to architectural techniques for keeping your code flexible and easy to adapt and reuse. Read this book, and you'll learn how to Fight software rot; Avoid the trap of duplicating knowledge; Write flexible, dynamic, and adaptable code; Avoid programming by coincidence; Bullet-proof your code with contracts, assertions, and exceptions; Capture real requirements; Test ruthlessly and effectively; Delight your users; Build teams of pragmatic programmers; and Make your developments more precise with automation. Written as a series of self-contained sections and filled with entertaining anecdotes, thoughtful examples, and interesting analogies, The Pragmatic Programmer illustrates the best practices and major pitfalls of many different aspects of software development. Whether you're a new coder, an experienced program.},
  isbn = {978-0-201-61622-4},
  langid = {english}
}

@book{ifrah_universal_2001,
  title = {The Universal History of Computing : From the Abacus to the Quantum Computer},
  shorttitle = {The Universal History of Computing},
  author = {Ifrah, Georges},
  year = {2001},
  publisher = {{New York : John Wiley}},
  urldate = {2022-04-08},
  abstract = {410 pages : 24 cm; "In The Universal History of Computing, Ifrah continues his exhilarating exploration into the fascinating world of numbers. In this fun, engaging but no less learned book, he traces the development of computing from the invention of the abacus to the creation of the binary system three centuries ago to the incredible conceptual, scientific, and technical achievements that made the first modern computers possible. He shows us how various cultures, scientists, and industries across the world struggled to break free of the tedious labor of mental calculation and, as a result, he reveals the evolution of the human mind."\textendash Jacket; Includes bibliographical references (pages 378-394) and index; Historical summary of arithmetic, numerical notation, and writing systems \textendash{} From the particular to the general: arithmetic leads to algebra \textendash{} From calculation to calculus \textendash{} Binary arithmetic and other non-decimal systmes \textendash{} From clockwork calculator to computer: the history of automatic calculation \textendash{} What is a computer? \textendash{} Information, the new universal dimension \textendash{} Intelligence, science, and the future of mankind \textendash; Ch. 1. Historical Summary of Arithmetic, Numerical Notation, and Writing Systems \textendash{} Ch. 2. From the Particular to the General: Arithmetic Leads to Algebra \textendash{} Ch. 3. From Calculation to Calculus \textendash{} Ch. 4. Binary Arithmetic and Other Non-decimal Systems \textendash{} Ch. 5. From Clockwork Calculator to Computer: The History of Automatic Calculation \textendash{} 1. Human Calculation and Machine Calculation \textendash{} 2. Pre-Renaissance Obstacles to Mechanical Calculation and the Beginnings of the Breakthrough \textendash{} 3. The Calculating Machine \textendash{} 4. The Keyboard Comes on the Scene. From Adding Machine to Cash Register \textendash{} 5. From Mechanisation of Simple Arithmetic to Automatic Arithmetic on an Industrial Scale \textendash{} 6. Analogue Computation. Origins and Development \textendash{} 7. The Contribution of Automata \textendash{} 8. The Development of Punched-tape Solutions \textendash{} 9. Charles Babbage, his Analytical Engine, and his Followers \textendash{} 10. Developments in Electromechanical Calculating Machines \textendash{} 11. The Electronic Revolution \textendash{} 12. Fully Programmed Machines \textendash{} 13. On the Road to the Computer: Recapitulation \textendash{} 14. The Contribution of the Mathematical Logicians \textendash{} 15. The Advent of Set Theory \textendash{} 16. The Contribution of Alan Turing \textendash{} 17. Further Progress Towards the Computer with John von Neumann \textendash{} 18. The First Generation of True Computers \textendash{} 19. The Pocket Calculator \textendash{} Ch. 6. What is a Computer? \textendash{} Ch. 7. Information, the New Universal Dimension \textendash{} Conclusion: Intelligence, Science, and the Future of Mankind; committed to retain 20160630},
  isbn = {978-0-471-39671-0 978-0-471-44147-2},
  langid = {english},
  keywords = {Electronic data processing \textendash{} History}
}

@article{ingalls_back_1997,
  title = {Back to the Future: The Story of {{Squeak}}, a Practical {{Smalltalk}} Written in Itself},
  shorttitle = {Back to the Future},
  author = {Ingalls, Dan and Kaehler, Ted and Maloney, John and Wallace, Scott and Kay, Alan},
  year = {1997},
  month = oct,
  journal = {ACM SIGPLAN Notices},
  volume = {32},
  number = {10},
  pages = {318--326},
  issn = {0362-1340},
  doi = {10.1145/263700.263754},
  urldate = {2022-12-18},
  abstract = {Squeak is an open, highly-portable Smalltalk implementation whose virtual machine is written entirely in Smalltalk, making it easy to. debug, analyze, and change. To achieve practical performance, a translator produces an equivalent C program whose performance is comparable to commercial Smalltalks.Other noteworthy aspects of Squeak include: a compact object format that typically requires only a single word of overhead per object; a simple yet efficient incremental garbage collector for 32-bit direct pointers; efficient bulk-mutation of objects; extensions of BitBlt to handle color of any depth and anti-aliased image rotation and scaling; and real-time sound and music synthesis written entirely in Smalltalk.},
  file = {/home/pierre/Zotero/storage/NA3QAAA3/Ingalls et al. - 1997 - Back to the future the story of Squeak, a practic.pdf}
}

@article{inglis_beauty_2015,
  title = {Beauty Is {{Not Simplicity}}: {{An Analysis}} of {{Mathematicians}}' {{Proof Appraisals}}},
  shorttitle = {Beauty Is {{Not Simplicity}}},
  author = {Inglis, Matthew and Aberdein, Andrew},
  year = {2015},
  journal = {Philosophia Mathematica},
  volume = {23},
  number = {1},
  pages = {87--109},
  publisher = {{Oxford University Press}},
  doi = {10.1093/philmat/nku014},
  file = {/home/pierre/Zotero/storage/47FUI8TV/Inglis and Aberdein - 2015 - Beauty is Not Simplicity An Analysis of Mathemati.pdf;/home/pierre/Zotero/storage/RG6S34QA/INGBIN.html}
}

@misc{innes_nnlib_2022,
  title = {{{NNlib}}.Jl},
  author = {Innes, Mike},
  year = {2022},
  month = aug,
  urldate = {2022-08-24},
  abstract = {Neural Network primitives with multiple backends},
  howpublished = {FluxML}
}

@misc{interstar_quality_2017,
  type = {Forum Post},
  title = {Quality {{Without A Name}} ({{QWAN}}) Examples?},
  author = {{interstar}},
  year = {2017},
  month = jun,
  journal = {Stack Overflow},
  urldate = {2023-03-21},
  file = {/home/pierre/Zotero/storage/LGU6DIE8/quality-without-a-name-qwan-examples.html}
}

@article{irmak_software_2012,
  title = {Software Is an {{Abstract Artifact}}},
  author = {Irmak, Nurbay},
  year = {2012},
  journal = {Grazer Philosophische Studien},
  volume = {86},
  number = {1},
  pages = {55--72},
  doi = {10.1163/9789401209182_005},
  file = {/home/pierre/Zotero/storage/2PZPJNTJ/Irmak - 2012 - Software is an Abstract Artifact.pdf}
}

@article{ivanova_comprehension_2020,
  title = {Comprehension of Computer Code Relies Primarily on Domain-General Executive Brain Regions},
  author = {Ivanova, Anna A and Srikant, Shashank and Sueoka, Yotaro and Kean, Hope H and Dhamala, Riva and O'Reilly, Una-May and Bers, Marina U and Fedorenko, Evelina},
  editor = {Martin, Andrea E and Behrens, Timothy E and Matchin, William and {Bornkessel-Schlesewsky}, Ina},
  year = {2020},
  month = dec,
  journal = {eLife},
  volume = {9},
  pages = {e58906},
  issn = {2050-084X},
  doi = {10.7554/eLife.58906},
  urldate = {2021-09-24},
  abstract = {Computer programming is a novel cognitive tool that has transformed modern society. What cognitive and neural mechanisms support this skill? Here, we used functional magnetic resonance imaging to investigate two candidate brain systems: the multiple demand (MD) system, typically recruited during math, logic, problem solving, and executive tasks, and the language system, typically recruited during linguistic processing. We examined MD and language system responses to code written in Python, a text-based programming language (Experiment 1) and in ScratchJr, a graphical programming language (Experiment 2); for both, we contrasted responses to code problems with responses to content-matched sentence problems. We found that the MD system exhibited strong bilateral responses to code in both experiments, whereas the language system responded strongly to sentence problems, but weakly or not at all to code problems. Thus, the MD system supports the use of novel cognitive tools even when the input is structurally similar to natural language.},
  keywords = {computer code,fMRI,language,multiple demand,programming},
  file = {/home/pierre/Zotero/storage/GS7TPM8Y/Ivanova et al. - 2020 - Comprehension of computer code relies primarily on.pdf}
}

@inproceedings{jacques_understanding_2015,
  title = {Understanding the Effects of Code Presentation},
  booktitle = {Proceedings of the 6th {{Workshop}} on {{Evaluation}} and {{Usability}} of {{Programming Languages}} and {{Tools}}},
  author = {Jacques, Jason T. and Kristensson, Per Ola},
  year = {2015},
  month = oct,
  series = {{{PLATEAU}} 2015},
  pages = {27--30},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2846680.2846685},
  urldate = {2022-12-05},
  abstract = {The majority of software is still written using text-based programming languages. With today's large, high-resolution color displays, developers have devised their own "folk design" methodologies to exploit these advances. As software becomes more and more critical to everyday life, supporting developers in rapidly producing and revising code accurately should be a priority. We consider how layout, typefaces, anti-aliasing, syntax highlighting, and semantic highlighting might impact developer efficiency and accuracy.},
  isbn = {978-1-4503-3907-0},
  keywords = {programming,Software visualization,syntax highlighting},
  file = {/home/pierre/Zotero/storage/9TJ49LWM/Jacques and Kristensson - 2015 - Understanding the effects of code presentation.pdf}
}

@book{james_tao_1987,
  title = {The {{Tao}} of {{Programming}}},
  author = {James, Geoffrey},
  year = {1987},
  publisher = {{InfoBooks}},
  isbn = {978-0-931137-07-5},
  langid = {english},
  keywords = {Computers / Programming / General}
}

@misc{jargonfile4.4.7_hacker_2014,
  title = {Hacker},
  author = {Jargon File 4.4.7},
  year = {2014},
  urldate = {2021-11-18},
  howpublished = {http://www.catb.org/jargon/html/H/hacker.html},
  annotation = {Version 4.4.7},
  file = {/home/pierre/Zotero/storage/9IXILMSJ/hacker.html}
}

@article{jeantet_objets_1998,
  title = {{Les objets interm\'ediaires dans la conception. \'El\'ements pour une sociologie des processus de conception}},
  author = {Jeantet, Alain},
  year = {1998},
  journal = {Sociologie du travail},
  volume = {40},
  number = {3},
  pages = {291--316},
  publisher = {{Pers\'ee - Portail des revues scientifiques en SHS}},
  doi = {10.3406/sotra.1998.1333},
  urldate = {2022-12-19},
  abstract = {Cet article porte sur l'\'etude des processus de conception, et plus particuli\`erement sur le r\^ole des \guillemotleft objets interm\'ediaires \guillemotright{} -tous ces textes, graphes, mod\`eles informatiques, maquettes (etc.) qui accompagnent l'activit\'e des concepteurs. L'auteur constate d'abord que l'organisation du travail de conception est \'etroitement li\'ee au type d'objets retenus. Il s'attache alors \`a rendre compte des m\'ecanismes \`a l'\oe uvre, en montrant que ces objets jouent un triple r\^ole de \guillemotleft traduction \guillemotright, de \guillemotleft m\'ediation \guillemotright, et de \guillemotleft repr\'esentation \guillemotright{} des actions. L'auteur conclut sur la contribution possible des objets interm\'ediaires au d\'eveloppement d'\guillemotleft outils d'aide \`a la coop\'eration \guillemotright.},
  copyright = {free},
  langid = {fre}
}

@misc{jeiss_poetry_2002,
  title = {The {{Poetry}} of {{Programming}}},
  author = {Jeiss, J.},
  year = {2002},
  month = mar,
  journal = {Dreamsongs.org},
  urldate = {2022-06-01},
  howpublished = {https://www.dreamsongs.com/PoetryOfProgramming.html},
  file = {/home/pierre/Zotero/storage/VB6IWGA4/PoetryOfProgramming.html}
}

@book{jones_reckoning_2016,
  title = {Reckoning with {{Matter}}: {{Calculating Machines}}, {{Innovation}}, and {{Thinking}} about {{Thinking}} from {{Pascal}} to {{Babbage}}},
  shorttitle = {Reckoning with {{Matter}}},
  author = {Jones, Matthew L.},
  year = {2016},
  month = nov,
  edition = {1st edition},
  publisher = {{University of Chicago Press}},
  address = {{Chicago ; London}},
  abstract = {From Blaise Pascal in the 1600s to Charles Babbage in the first half of the nineteenth century, inventors struggled to create the first calculating machines. All failed\textemdash but that does not mean we cannot learn from the trail of ideas, correspondence, machines, and arguments they left behind. In Reckoning with Matter, Matthew L. Jones draws on the remarkably extensive and well-preserved records of the quest to explore the concrete processes involved in imagining, elaborating, testing, and building calculating machines. He explores the writings of philosophers, engineers, and craftspeople, showing how they thought about technical novelty, their distinctive areas of expertise, and ways they could coordinate their efforts. In doing so, Jones argues that the conceptions of creativity and making they exhibited are often more incisive\textemdash and more honest\textemdash than those that dominate our current legal, political, and aesthetic culture.},
  isbn = {978-0-226-41146-0},
  langid = {english}
}

@book{jordan_copying_2003,
  title = {Copying the {{Master}} and {{Stealing His Secrets}}: {{Talent}} and {{Training}} in {{Japanese Painting}}},
  shorttitle = {Copying the {{Master}} and {{Stealing His Secrets}}},
  author = {Jordan, Brenda G. and Weston, Victoria Louise},
  year = {2003},
  month = jan,
  publisher = {{University of Hawaii Press}},
  abstract = {Copying the Master examines the transmission of painting traditions in Japan from one generation to the next. The contributors emphasize the relationship between inborn abilities and those skills taught in the course of learning how to paint. They focus their discussion on a group of painting masters loosely associated with the prestigious Kano painting atelier, Japan\&\#39;s de facto painting academy throughout the Tokugawa period (1615-1868) and into the early modern era. By delving into why, how, and what these painters transmitted to students through their teaching, readers gain insight into artistic and aesthetic sensibilities active in Japanese painting and a fuller appreciation of extant paintings within their cultural and historical contexts.},
  isbn = {978-0-8248-2608-6},
  langid = {english},
  keywords = {Art / Asian / General,Art / Asian / Japanese,Art / Techniques / Painting}
}

@article{jullien_languages_2012,
  title = {From the {{Languages}} of {{Art}} to {{Mathematical Languages}}, and Back Again},
  author = {Jullien, Caroline},
  year = {2012},
  month = sep,
  journal = {Enrahonar, Quaderns de Filosofia},
  volume = {49},
  pages = {91--105},
  doi = {10.5565/rev/enrahonar/v49.89},
  abstract = {Mathematics stand in a privileged relationship with aesthetics: a relationship that follows two main directions. The first concerns the introduction of mathematical considerations into aesthetic discourse. For instance, it is common to mention the mathematical architecture of certain artistic productions. The second leads from aesthetics to mathematics. In this case, the question is that of the role and meaning that aesthetic considerations may assume in mathematics. It is indeed a widely held view among mathematicians, of whatever socio-historical context, not only to see their discipline as presenting a strong aesthetic dimension, but also to consider that this dimension plays a fundamental role in the process of developing and understanding mathematics. The main ambition of this paper is to show how Nelson Goodman's aesthetics can be used to justify this point of view and to propose a thesis concerning the aesthetic functioning of mathematics. This first result allows to resituate Goodman's aesthetics within a very classical tradition that will be described. Finally, the underlying ambition is to show the keys provided by Goodman's theory for the philosophy of mathematics.},
  file = {/home/pierre/Zotero/storage/YDIC7ZGJ/Jullien - 2012 - From the Languages of Art to Mathematical Language.pdf}
}

@misc{kamkar_myspace_2016,
  title = {{{MySpace Worm Explanation}}},
  author = {Kamkar, Samy},
  year = {2016},
  month = mar,
  journal = {Samy.pl},
  urldate = {2021-11-19},
  file = {/home/pierre/Zotero/storage/9EMCVCBP/tech.html}
}

@misc{kampf_how_2016,
  title = {How {{Do You Define}} ``{{Good Code}}'' ?},
  author = {Kampf, Eran},
  year = {2016},
  month = dec,
  journal = {Medium},
  urldate = {2022-06-02},
  abstract = {I was on a phone interview the other day where I was asked for my definition of ``Good Code''.},
  howpublished = {https://developerzen.com/how-do-you-define-good-code-c8a383c207a4},
  langid = {english},
  file = {/home/pierre/Zotero/storage/53RZW9A9/how-do-you-define-good-code-c8a383c207a4.html}
}

@misc{kanakarakis_international_2022,
  title = {The {{International Obfuscated C Code Contest}}},
  author = {Kanakarakis, Ivan},
  year = {2022},
  month = may,
  urldate = {2022-06-01},
  abstract = {IOCCC International Obfuscated C code contest entries}
}

@misc{kanakarakis_international_2022a,
  title = {The {{International Obfuscated C Code Contest}}},
  author = {Kanakarakis, Ivan},
  year = {2022},
  month = may,
  urldate = {2022-06-01},
  abstract = {IOCCC International Obfuscated C code contest entries}
}

@article{kara_landscape_2013,
  title = {Landscape {{Design}} and {{Cognitive Psychology}}},
  author = {Kara, Baris},
  year = {2013},
  month = jul,
  journal = {Procedia - Social and Behavioral Sciences},
  series = {World {{Conference}} on {{Psychology}} and {{Sociology}} 2012},
  volume = {82},
  pages = {288--291},
  issn = {1877-0428},
  doi = {10.1016/j.sbspro.2013.06.262},
  urldate = {2021-11-09},
  abstract = {Kevin Lynch's The Image of the City remains one of the most important books in environmental design research. Its approach relies upon behavioral observations and systematic surveys of environmental cognition. We can perceive only what we see; thus, sight is the most important sense in landscape design. The spaces and objects of landscape design are stored temporallyin the mind; they cannot be used by visitors. In this paper, the importance of cognitive psychology in landscape design is examined, and the concepts of imageability and mental maps are discussed.},
  langid = {english},
  keywords = {Cognition,Imageability,Landscape Architecture,Legibility,Mental Map},
  file = {/home/pierre/Zotero/storage/C3KHLYFS/Kara - 2013 - Landscape Design and Cognitive Psychology.pdf}
}

@inproceedings{karvonen_beauty_2000,
  title = {The Beauty of Simplicity},
  booktitle = {Proceedings on the 2000 Conference on {{Universal Usability}}},
  author = {Karvonen, Kristiina},
  year = {2000},
  month = nov,
  series = {{{CUU}} '00},
  pages = {85--90},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/355460.355478},
  urldate = {2022-06-01},
  abstract = {In this paper we show how discussion about design quality or even usability is often discussion about aesthetics. First, we introduce some definitions of beauty in aesthetics. Then, we introduce how the beauty of the Web design affects the feeling of online trust, and bring forth observations about this design quality as an aesthetic notion. As a result, we present how simplicity and beauty affect the user's experience and interpretation of the design, and contemplate on how this perception may vary according to cultural background, age, and the amount of user experience. We will also envision some future trends for the aesthetics of user interfaces.},
  isbn = {978-1-58113-314-1},
  keywords = {aesthetics,beautiful,cross-cultural HCI,design quality,pleasure,trust,user interface design,Web usability},
  file = {/home/pierre/Zotero/storage/CD6LSRTQ/Karvonen - 2000 - The beauty of simplicity.pdf}
}

@article{kay_conversation_2004,
  title = {A {{Conversation}} with {{Alan Kay}} - {{ACM Queue}}},
  author = {Kay, Alan},
  year = {2004},
  month = dec,
  journal = {ACM Queue},
  volume = {2},
  number = {9},
  urldate = {2022-04-14},
  file = {/home/pierre/Zotero/storage/596GVBJQ/detail.html}
}

@article{kay_early_1993,
  title = {The Early History of {{Smalltalk}}},
  author = {Kay, Alan C.},
  year = {1993},
  month = mar,
  journal = {ACM SIGPLAN Notices},
  volume = {28},
  number = {3},
  pages = {69--95},
  issn = {0362-1340},
  doi = {10.1145/155360.155364},
  urldate = {2023-02-18},
  abstract = {Most ideas come from previous ideas. The sixties, particularly in the ARPA community, gave rise to a host of notions about ``human-computer symbiosis'' through interactive time-shared computers, graphics screens and pointing devices. Advanced computer languages were invented to simulate complex systems such as oil refineries and semi-intelligent behavior. The soon to follow paradigm shift of modern personal computing, overlapping window interfaces, and object-oriented design came from seeing the work of the sixties as something more than a ``better old thing''. That is, more than a better way: to do mainframe computing; for end-users to invoke functionality; to make data structures more abstract. Instead the promise of exponential growth in computing/\$/volume demanded that the sixties be regarded as ``almost a new thing'' and to find out what the actual ``new things'' might be. For example, one would compute with a handheld ``Dynabook'' in a way that would not be possible on a shared mainframe; millions of potential users meant that the user interface would have to become a learning environment along the lines of Montessori and Bruner; and needs for large scope, reduction in complexity, and end-user literacy would require that data and control structures be done away with in favor of a more biological scheme of protected universal cells interacting only through messages that could mimic any desired behavior. Early Smalltalk was the first complete realization of these new points of view as parented by its many predecessors in hardware, language and user interface design. It became the exemplar of the new computing, in part, because we were actually trying for a qualitative shift in belief structures\textemdash a new Kuhnian paradigm in the same spirit as the invention of the printing press\textemdash and thus took highly extreme positions which almost forced these new styles to be invented.},
  file = {/home/pierre/Zotero/storage/X4MKHQ6K/Kay - 1993 - The early history of Smalltalk.pdf}
}

@misc{keith_resilient_2016,
  title = {Resilient {{Web Design}} - {{Chapter}} 2},
  author = {Keith, Jeremy},
  year = {2016},
  journal = {Resilient Web Design},
  urldate = {2023-03-06},
  howpublished = {https://resilientwebdesign.com/chapter2/\#The\%20world\%20of\%20architecture\%20has\%20accrued\%20its\%20own\%20set\%20of\%20design\%20values\%20over\%20the\%20years.\%20One\%20of\%20those\%20values\%20is\%20the\%20principle\%20of\%20material\%20honesty.\%20One\%20material\%20should\%20not\%20be\%20used\%20as\%20a\%20substitute\%20for\%20another.\%20Otherwise\%20the\%20end\%20result\%20is\%20deceptive.},
  file = {/home/pierre/Zotero/storage/4BXGPS5M/chapter2.html}
}

@misc{keller_textes_2021,
  type = {{S\'eminaire}},
  title = {{Des textes d'algorithmes concis, quelques exemples tir\'es de s\=utras d'\=Aryabha\d{t}a et de son commentaire par Bh\=askara.}},
  shorttitle = {{Agathe Keller (CNRS, Universit\'e Paris-Diderot)}},
  author = {Keller, Agathe},
  year = {2021},
  month = jun,
  urldate = {2022-07-12},
  abstract = {Les trait\'es math\'ematiques sanskrits, suivant le style des textes de cette culture savante, sont r\'edig\'es en vers concis et concernent le plus souvent des proc\'edures. Cette pr\'esentation se propose d'observer le lien entre le texte et l'algorithme reconstruit qu'il s'agit d'ex\'ecuter, afin d'y mettre en lumi\`ere comment s'effectue l'expression concise des \'etapes de l'ex\'ecution. En s'appuyant sur un texte canonique, l'\=Aryabha\d{t}\=iya (499), et le commentaire de Bh\=askara pour d\'ecoder le sens des vers, nous observerons des mani\`eres de dire des proc\'edures d'extraction de racine carr\'ee, de calculer diff\'erents \'el\'ements d'une suite arithm\'etique ou de r\'esoudre un certain type d'\'equation ind\'etermin\'ee. L'analyse pourra s'\'elargir \`a l'expression verbale de table num\'eriques de sinus. Il s'agira donc d'observer les modes de compression d'un texte d'algorithme ou d'un ensemble de donn\'ees num\'eriques.},
  langid = {french},
  file = {/home/pierre/Zotero/storage/49WNGANI/538.html}
}

@article{kelly_software_2007,
  title = {A {{Software Chasm}}: {{Software Engineering}} and {{Scientific Computing}}},
  shorttitle = {A {{Software Chasm}}},
  author = {Kelly, Diane F.},
  year = {2007},
  month = nov,
  journal = {IEEE Software},
  volume = {24},
  number = {6},
  pages = {120--119},
  issn = {1937-4194},
  doi = {10.1109/MS.2007.155},
  abstract = {Some time ago, a chasm opened between the scientific-computing community and the software engineering community. Originally, computing meant scientific computing. Today, science and engineering applications are at the heart of software systems such as environmental monitoring systems, rocket guidance systems, safety studies for nuclear stations, and fuel injection systems. Failures of such health-, mission-, or safety-related systems have served as examples to promote the use of software engineering best practices. Yet, the bulk of the software engineering community's research is on anything but scientific-application software. This chasm has many possible causes. In this article, we look at the impact of one particular contributor in industry.},
  keywords = {Application software,Best practices,Condition monitoring,Fuels,Heart,Rockets,scientific computing,Scientific computing,software engineering,Software engineering,Software safety,Software systems},
  file = {/home/pierre/Zotero/storage/YGVN2TYF/Kelly - 2007 - A Software Chasm Software Engineering and Scienti.pdf}
}

@misc{kenjackson_perfection_2010,
  title = {"{{Perfection}} Is Achieved, Not When There Is Nothing More to Add, but When There i... | {{Hacker News}}},
  author = {{kenjackson}},
  year = {2010},
  month = aug,
  journal = {Hacker News},
  urldate = {2022-07-12},
  howpublished = {https://news.ycombinator.com/item?id=1640594},
  file = {/home/pierre/Zotero/storage/9GG6LXM4/item.html}
}

@book{kernighan_elements_1978,
  title = {The {{Elements}} of {{Programming Style}}, 2nd {{Edition}}},
  author = {Kernighan, Brian W. and Plauger, P. J.},
  year = {1978},
  month = jan,
  edition = {2nd edition},
  publisher = {{McGraw-Hill}},
  address = {{New York}},
  abstract = {Elements of programming.},
  isbn = {978-0-07-034207-1},
  langid = {english}
}

@misc{kernighan_why_1981,
  title = {Why {{Pascal}} Is {{Not My Favorite Programming Language}}},
  author = {Kernighan, Brian W.},
  year = {1981},
  month = feb,
  urldate = {2023-04-28},
  howpublished = {https://www.lysator.liu.se/c/bwk-on-pascal.html},
  file = {/home/pierre/Zotero/storage/2PG9BKDB/bwk-on-pascal.html}
}

@article{kieran_aesthetic_1997,
  title = {Aesthetic {{Value}}: {{Beauty}}, {{Ugliness}} and {{Incoherence}}},
  shorttitle = {Aesthetic {{Value}}},
  author = {Kieran, Matthew},
  year = {1997},
  journal = {Philosophy},
  volume = {72},
  number = {281},
  eprint = {3751740},
  eprinttype = {jstor},
  pages = {383--399},
  issn = {0031-8191},
  urldate = {2021-02-11}
}

@article{kintsch_model_1978,
  title = {Toward a Model of Text Comprehension and Production.},
  author = {Kintsch, Walter and {van Dijk}, Teun A.},
  year = {1978},
  journal = {Psychological Review},
  volume = {85},
  number = {5},
  pages = {363--394},
  issn = {0033-295X},
  doi = {10.1037/0033-295X.85.5.363},
  urldate = {2021-09-23},
  langid = {english},
  file = {/home/pierre/Zotero/storage/E8U8HUD5/Kintsch and van Dijk - 1978 - Toward a model of text comprehension and productio.pdf}
}

@misc{kirchner_linked_2022,
  title = {Linked {{List}}},
  author = {Kirchner, M},
  year = {2022},
  journal = {GitHub},
  urldate = {2023-03-27},
  howpublished = {https://archive.softwareheritage.org/swh:1:cnt:78b25703fda5206fd4c9ecb5740dd0093932a654;origin=https://github.com/mkirchner/linked-list-good-taste;visit=swh:1:snp:5161a108062afd8d87cb24b4568dc8a1b80ed197;anchor=swh:1:rev:cbc3fb92257c5444b461637fd08394820129361f;path=/src/list.h;lines=6-18},
  file = {/home/pierre/Zotero/storage/TGTZ2WVC/sha1_git78b25703fda5206fd4c9ecb5740dd0093932a654.html}
}

@misc{kirchner_linked_2022a,
  title = {Linked {{List}} - {{Removing}}},
  author = {Kirchner, M},
  year = {2022},
  urldate = {2023-03-28},
  howpublished = {https://archive.softwareheritage.org/swh:1:cnt:6dd41adbff62aa9cd5a310690d5b3943ae52c1bf;origin=https://github.com/mkirchner/linked-list-good-taste;visit=swh:1:snp:5161a108062afd8d87cb24b4568dc8a1b80ed197;anchor=swh:1:rev:cbc3fb92257c5444b461637fd08394820129361f;path=/src/list.c;lines=3-42},
  file = {/home/pierre/Zotero/storage/BMP537RT/sha1_git6dd41adbff62aa9cd5a310690d5b3943ae52c1bf.html}
}

@misc{kirchner_linked_2023,
  title = {Linked Lists, Pointer Tricks and Good Taste},
  author = {Kirchner, M},
  year = {2023},
  month = mar,
  urldate = {2023-03-28},
  abstract = {Linus Torvalds' linked list argument for good taste, explained},
  copyright = {MIT},
  keywords = {c,elegant,linked-list,pointers,torvalds}
}

@article{kirsh_distinguishing_1994,
  title = {On {{Distinguishing Epistemic From Pragmatic Action}}},
  author = {Kirsh, David and Maglio, Paul},
  year = {1994},
  journal = {Cognitive Science},
  volume = {18},
  number = {4},
  pages = {513--49},
  doi = {10.1207/s15516709cog1804_1},
  urldate = {2022-12-02},
  file = {/home/pierre/Zotero/storage/P3XHI7PS/Kirsh and Maglio - 1994 - On Distinguishing Epistemic From Pragmatic Action.pdf;/home/pierre/Zotero/storage/ZP3UP76F/KIRODE.html}
}

@book{kitchin_code_2011,
  title = {Code/{{Space}}: {{Software}} and {{Everyday Life}}},
  shorttitle = {Code/{{Space}}},
  author = {Kitchin, Rob and Dodge, Martin},
  year = {2011},
  publisher = {{The MIT Press}},
  doi = {10.7551/mitpress/9780262042482.001.0001},
  urldate = {2021-10-08},
  abstract = {After a little more than half a century since its initial development, computer code is extensively and intimately woven into the fabric of our everyday lives. From the digital alarm clock that wakes us to the air traffic control system that guides our airplane in for a landing, software is shaping our world: It creates new ways of undertaking tasks, speeds up and automates existing practices, transforms social and economic relationships, and offers new forms of cultural activity, personal empowerment, and modes of play. This book examines software from a spatial perspective, analyzing the dyadic relationship of software and space. The production of space, the authors argue, is increasingly dependent on code, and code is written to produce space. Examples of code/space include airport check-in areas, networked offices, and caf\'es that are transformed into workspaces by laptops and wireless access. The book argues that software, through its ability to work universally, transduces space. The authors have developed a set of conceptual tools for identifying and understanding the interrelationship between software, space, and everyday life, and illustrate their arguments with empirical material. Finally, they issue a manifesto, calling for critical scholarship into the production and workings of code rather than simply the technologies it enables\textemdash a new kind of social science focused on explaining the social, economic, and spatial contours of software.},
  isbn = {978-0-262-04248-2},
  langid = {english},
  keywords = {airport check-in,caf\'es,conceptual tools,cultural activity,empirical material,networked offices,personal empowerment,spatial perspective}
}

@article{kitchin_rethinking_2007,
  title = {Rethinking Maps},
  author = {Kitchin, Rob and Dodge, Martin},
  year = {2007},
  month = jun,
  journal = {Progress in Human Geography},
  volume = {31},
  number = {3},
  pages = {331--344},
  publisher = {{SAGE Publications Ltd}},
  issn = {0309-1325},
  doi = {10.1177/0309132507077082},
  urldate = {2023-03-10},
  abstract = {In this paper we argue that cartography is profitably conceived as a processual, rather than representational, science. Building on recent analysis concerning the philosophical underpinnings of cartography we question the ontological security of maps, contending that it is productive to rethink cartography as ontogenetic in nature; that is maps emerge through practices and have no secure ontological status. Drawing on the concepts of transduction and technicity we contend that maps are of-the-moment, brought into being through practices (embodied, social, technical); that mapping is a process of constant reterritorialization. Maps are never fully formed and their work is never complete. Maps are transitory and fleeting, being contingent, relational and context-dependent; they are always mappings; spatial practices enacted to solve relational problems (eg, how best to create a spatial representation, how to understand a spatial distribution, how to get between A and B, and so on). Such a rethinking, we contend, provides a fresh perspective on cartographic epistemology, and could work to provide a common framework for those who undertake mapping as applied knowledge (asking technical questions) and those that seek to critique such mapping as a form of power/knowledge (asking ideological questions). We illustrate our argument through an analysis of mapping practices.},
  langid = {english},
  file = {/home/pierre/Zotero/storage/3IYW6658/Kitchin and Dodge - 2007 - Rethinking maps.pdf}
}

@incollection{kittler_there_1997,
  title = {There {{Is No Software}}},
  booktitle = {Literature, {{Media}}, {{Information Systems}}: {{Essays}}},
  author = {Kittler, Friedrich A.},
  year = {1997},
  edition = {John Johnston},
  pages = {147--155},
  publisher = {{Amsterdam Overseas Publishers Association}},
  address = {{Amsterdam}}
}

@book{knuth_art_1997,
  title = {The {{Art}} of {{Computer Programming}}, {{Volume}} 1 (3rd {{Ed}}.): {{Fundamental Algorithms}}},
  author = {Knuth, Donald E.},
  year = {1997},
  publisher = {{Addison Wesley Longman Publishing Co., Inc.}},
  address = {{USA}},
  isbn = {0-201-89683-4}
}

@article{knuth_computer_1974,
  title = {Computer Programming as an Art},
  author = {Knuth, Donald E.},
  year = {1974},
  month = dec,
  journal = {Communications of the ACM},
  volume = {17},
  number = {12},
  pages = {667--673},
  issn = {0001-0782},
  doi = {10.1145/361604.361612},
  urldate = {2022-04-14},
  abstract = {When Communications of the ACM began publication in 1959, the members of ACM's Editorial Board made the following remark as they described the purposes of ACM's periodicals [2]: ``If computer programming is to become an important part of computer research and development, a transition of programming from an art to a disciplined science must be effected.'' Such a goal has been a continually recurring theme during the ensuing years; for example, we read in 1970 of the ``first steps toward transforming the art of programming into a science'' [26]. Meanwhile we have actually succeeded in making our discipline a science, and in a remarkably simple way: merely by deciding to call it ``computer science.''},
  file = {/home/pierre/Zotero/storage/TEFC67ZI/Knuth - 1974 - Computer programming as an art.pdf}
}

@article{knuth_literate_1984,
  title = {Literate Programming},
  author = {Knuth, Donald E.},
  year = {1984},
  month = may,
  journal = {The Computer Journal},
  volume = {27},
  number = {2},
  pages = {97--111},
  issn = {0010-4620},
  doi = {10.1093/comjnl/27.2.97},
  urldate = {2022-07-13},
  file = {/home/pierre/Zotero/storage/GNU4SB39/Knuth - 1984 - Literate programming.pdf}
}

@article{korte_frege_2010,
  title = {Frege's {{Begriffsschrift}} as a Lingua Characteristica},
  author = {Korte, Tapio},
  year = {2010},
  month = may,
  journal = {Synthese},
  volume = {174},
  number = {2},
  pages = {283--294},
  issn = {1573-0964},
  doi = {10.1007/s11229-008-9422-7},
  urldate = {2022-09-25},
  abstract = {In this paper I suggest an answer to the question of what Frege means when he says that his logical system, the Begriffsschrift, is like the language Leibniz sketched, a lingua characteristica, and not merely a logical calculus. According to the nineteenth century studies, Leibniz's lingua characteristica was supposed to be a language with which the truths of science and the constitution of its concepts could be accurately expressed. I argue that this is exactly what the Begriffsschrift is: it is a language, since, unlike calculi, its sentential expressions express truths, and it is a characteristic language, since the meaning of its complex expressions depend only on the meanings of their constituents and on the way they are put together. In fact it is in itself already a science composed in accordance with the Classical Model of Science. What makes the Begriffsschrift so special is that Frege is able to accomplish these goals with using only grammatical or syncategorematic terms and so has a medium with which he can try to show analyticity of the theorems of arithmetic.},
  langid = {english},
  keywords = {Begriffsschrift,Frege,Leibniz,Lingua characteristica,Logic},
  file = {/home/pierre/Zotero/storage/XYQV7TZC/Korte - 2010 - Fregeâ€™s Begriffsschrift as a lingua characteristic.pdf}
}

@article{kozbelt_neuroaesthetics_2017,
  title = {Neuroaesthetics: {{The State}} of the {{Domain}} in 2017},
  shorttitle = {Neuroaesthetics},
  author = {Kozbelt, Aaron},
  year = {2017},
  month = apr,
  journal = {Evolutionary Studies in Imaginative Culture},
  volume = {1},
  number = {1},
  pages = {181--192},
  issn = {2472-9876},
  doi = {10.26613/esic.1.1.25},
  urldate = {2021-11-05},
  abstract = {In this article, I assess the current state of neuroaesthetics by reviewing 10 recent books on neuroscientific and evolutionary aspects of aesthetic cognition. These books largely continue the main thrust of this genre since its inception. Virtually all are insightful and thought-provoking, though their individual strengths vary. Among them, Shimamura and Palmer's edited book, Aesthetic Science , provides the most useful and balanced interdisciplinary framework, making philosophy and psychology equal partners with neuroscience. This pluralistic mode, dethroning neuroscience from its usual hegemony, seems best poised to address heretofore neglected issues in neuroaesthetics research. I address several dichotomous tensions\textemdash high versus low art, the drive for creative innovation versus evolutionarily canalized aesthetic biases, and explicit versus implicit aspects of aesthetic cognition\textemdash to identify promising future research directions, which can best be fulfilled though interdisciplinary cooperation and debate, with a continued emphasis on evolutionary theory.},
  langid = {english},
  keywords = {aesthetic cognition,aesthetic experience,art appreciation,creativity,evolution,neuroaesthetics,neuroscience,two cultures}
}

@article{kragh_paul_2002,
  title = {Paul {{Dirac}}: Seeking Beauty},
  shorttitle = {Paul {{Dirac}}},
  author = {Kragh, Helge},
  year = {2002},
  month = aug,
  journal = {Physics World},
  volume = {15},
  number = {8},
  pages = {27},
  issn = {2058-7058},
  doi = {10.1088/2058-7058/15/8/32},
  urldate = {2023-03-24},
  abstract = {''A PHYSICAL theory must possess mathematical beauty.`` That was the epigraph that Paul Dirac chose in 1956 when asked to express his view of the essence of physics. Through most of his distinguished career in theoretical physics, he emphasized the aesthetic and logical aspects of physics, an approach that at times brought amazing advances but more often led him into sterile byways.},
  langid = {english}
}

@incollection{kramer_mind_2013,
  title = {`{{The Mind}}'s {{Eye}}': {{Visualizing}} the {{Non-visual}} and the `{{Epistemology}} of the {{Line}}'},
  shorttitle = {`{{The Mind}}'s {{Eye}}'},
  booktitle = {Volume 2 {{Volume}} 2},
  author = {Kr{\"a}mer, Sybille},
  year = {2013},
  month = may,
  pages = {275--294},
  publisher = {{De Gruyter}},
  doi = {10.1515/9783110330496.275},
  urldate = {2021-09-14},
  abstract = {`The Mind's Eye': Visualizing the Non-visual and the `Epistemology of the Line' was published in Volume 2 Volume 2 on page 275.},
  isbn = {978-3-11-033049-6},
  langid = {english},
  file = {/home/pierre/Zotero/storage/NMBZSABA/KrÃ¤mer - 2013 - â€˜The Mindâ€™s Eyeâ€™ Visualizing the Non-visual and t.pdf}
}

@inproceedings{kudra_aoc_2020,
  title = {{{AoC}} \textbackslash textbackslashtextbackslashtextbar {{Art}} of {{Coding}} \textendash{} {{The Demoscene}} as {{Intangible World Cultural Heritage}}},
  booktitle = {Proceedings of {{Bridges}} 2020: {{Mathematics}}, {{Art}}, {{Music}}, {{Architecture}}, {{Education}}, {{Culture}}},
  author = {Kudra, Andre},
  editor = {Yackel, Carolyn and Bosch, Robert and Torrence, Eve and Fenyvesi, Krist{\'o}f},
  year = {2020},
  pages = {479--480},
  publisher = {{Tessellations Publishing}},
  address = {{Phoenix, Arizona}},
  isbn = {978-1-938664-36-6}
}

@article{kuhn_semantic_2007,
  title = {Semantic Clustering: {{Identifying}} Topics in Source Code},
  shorttitle = {Semantic Clustering},
  author = {Kuhn, Adrian and Ducasse, St{\'e}phane and G{\^i}rba, Tudor},
  year = {2007},
  month = mar,
  journal = {Information and Software Technology},
  series = {12th {{Working Conference}} on {{Reverse Engineering}}},
  volume = {49},
  number = {3},
  pages = {230--243},
  issn = {0950-5849},
  doi = {10.1016/j.infsof.2006.10.017},
  urldate = {2021-10-08},
  abstract = {Many of the existing approaches in Software Comprehension focus on program structure or external documentation. However, by analyzing formal information the informal semantics contained in the vocabulary of source code are overlooked. To understand software as a whole, we need to enrich software analysis with the developer knowledge hidden in the code naming. This paper proposes the use of information retrieval to exploit linguistic information found in source code, such as identifier names and comments. We introduce Semantic Clustering, a technique based on Latent Semantic Indexing and clustering to group source artifacts that use similar vocabulary. We call these groups semantic clusters and we interpret them as linguistic topics that reveal the intention of the code. We compare the topics to each other, identify links between them, provide automatically retrieved labels, and use a visualization to illustrate how they are distributed over the system. Our approach is language independent as it works at the level of identifier names. To validate our approach we applied it on several case studies, two of which we present in this paper. Note: Some of the visualizations presented make heavy use of colors. Please obtain a color copy of the article for better understanding.},
  langid = {english},
  keywords = {Clustering,Latent Semantic Indexing,Reverse engineering,Visualization}
}

@article{kurp_green_2008,
  title = {Green Computing},
  author = {Kurp, Patrick},
  year = {2008},
  month = oct,
  journal = {Communications of the ACM},
  volume = {51},
  number = {10},
  pages = {11--13},
  issn = {0001-0782},
  doi = {10.1145/1400181.1400186},
  urldate = {2021-01-28},
  abstract = {Are you ready for a personal energy meter?}
}

@article{lakoff_conceptual_1980,
  title = {Conceptual {{Metaphor}} in {{Everyday Language}}},
  author = {Lakoff, George},
  year = {1980},
  month = aug,
  journal = {The Journal of Philosophy},
  volume = {77},
  number = {8},
  urldate = {2021-03-27},
  abstract = {Author(s): Lakoff, George},
  langid = {english},
  file = {/home/pierre/Zotero/storage/JVB6YH3C/Lakoff - 1980 - Conceptual Metaphor in Everyday Language.pdf;/home/pierre/Zotero/storage/DD2AZQMP/2p93q7nr.html}
}

@book{lakoff_metaphors_1980,
  title = {Metaphors {{We Live By}}},
  author = {Lakoff, George},
  year = {1980},
  publisher = {{University of Chicago Press}},
  urldate = {2021-03-27},
  abstract = {The now-classic Metaphors We Live By changed our understanding of metaphor and its role in language and the mind. Metaphor, the authors explain, is a fundamental mechanism of mind, one that allows us to use what we know about our physical and social experience to provide understanding of countless other subjects. Because such metaphors structure our most basic understandings of our experience, they are "metaphors we live by"\textemdash metaphors that can shape our perceptions and actions without our ever noticing them.In this updated edition of Lakoff and Johnson's influential book, the authors supply an afterword surveying how their theory of metaphor has developed within the cognitive sciences to become central to the contemporary understanding of how we think and how we express our thoughts in language.},
  isbn = {978-0-226-46801-3},
  file = {/home/pierre/Zotero/storage/LAPLRTYS/bo3637992.html}
}

@book{lammers_programmers_1986,
  title = {Programmers at Work : Interviews},
  shorttitle = {Programmers at Work},
  author = {Lammers, Susan M.},
  year = {1986},
  publisher = {{Redmond, Wash. : Microsoft Press ; [New York] : Distributed in the U.S. by Harper and Row}},
  urldate = {2021-10-21},
  abstract = {144,627; "1st Series."},
  isbn = {978-0-914845-71-3},
  langid = {english},
  keywords = {Computer programming}
}

@book{landau_survey_2011,
  title = {A {{Survey}} of {{Computational Physics}}: {{Introductory Computational Science}}},
  shorttitle = {A {{Survey}} of {{Computational Physics}}},
  author = {Landau, Rubin H. and P{\'a}ez, Jos{\'e} and Bordeianu, Cristian C.},
  year = {2011},
  month = oct,
  publisher = {{Princeton University Press}},
  doi = {10.1515/9781400841189},
  urldate = {2022-04-02},
  abstract = {Computational physics is a rapidly growing subfield of computational science, in large part because computers can solve previously intractable problems or simulate natural processes that do not have analytic solutions. The next step beyond Landau's First Course in Scientific Computing and a follow-up to Landau and P\'aez's Computational Physics , this text presents a broad survey of key topics in computational physics for advanced undergraduates and beginning graduate students, including new discussions of visualization tools, wavelet analysis, molecular dynamics, and computational fluid dynamics. By treating science, applied mathematics, and computer science together, the book reveals how this knowledge base can be applied to a wider range of real-world problems than computational physics texts normally address. Designed for a one- or two-semester course, A Survey of Computational Physics will also interest anyone who wants a reference on or practical experience in the basics of computational physics. Accessible to advanced undergraduates Real-world problem-solving approach Java codes and applets integrated with text Companion Web site includes videos of lectures},
  isbn = {978-1-4008-4118-9},
  langid = {english},
  keywords = {Addition,Algorithm,Amplitude,Approximation,Approximation error,Boundary value problem,Calculation,Capacitor,Cartesian coordinate system,Change of variables,Closed-form expression,Coefficient,Compiler,Complex number,Computation,Computational fluid dynamics,Computational physics,Computational science,Computer,Computer science,Computing,Curve fitting,Data set,Data type,Derivative,Differential equation,Eigenvalues and eigenvectors,Electric field,Equation,Error message,Extrapolation,Filename,Finite difference,Fortran,Fourier series,Fourier transform,Fractal dimension,Gaussian quadrature,Gnuplot,Harmonic oscillator,Histogram,Implementation,Initial condition,Instance (computer science),Instruction set,Integer,Integral equation,Iteration,Line (geometry),Linear differential equation,Linear equation,Linux,Mathematica,Mathematics,Measurement,Monte Carlo method,Nonlinear system,Normal distribution,Notation,Numerical analysis,Numerical integration,Operating system,Parallel computing,Parameter,Parameter (computer programming),Partial differential equation,Phase space,Probability,Processing (programming language),Pseudocode,Quantity,Quantum mechanics,Random number,Result,Round-off error,Row-major order,Second derivative,Significant figures,Simulation,Simultaneous equations,Single-precision floating-point format,Source code,Speedup,Statement (computer science),Subroutine,Summation,Supercomputer,Taylor series,Temperature,Trigonometric functions,Unit vector,Unix,Variable (computer science),Variable (mathematics),Wave equation,Wave function,Wave packet,Wave vector,Wavelet,Wavelet transform},
  file = {/home/pierre/Zotero/storage/7P3C32Q9/Landau et al. - 2011 - A Survey of Computational Physics Introductory Co.pdf}
}

@inproceedings{lando_general_2007,
  title = {Towards a {{General Ontology}} of {{Computer Programs}}.},
  author = {Lando, Pascal and Lapujade, Anne and Kassel, Gilles and F{\"u}rst, Fr{\'e}d{\'e}ric},
  year = {2007},
  month = jan,
  pages = {163--170},
  abstract = {Over the past decade, ontology research has investigated the field of computer programs. This work has aimed at defining conceptual descriptions of the programs so as to master their design and use. Unfortunately, these efforts have only been partially successful. In this paper, we present the basis of a Core Ontology of Programs and Software (COPS) which integrates the field's main concepts. But, above all, we emphasize the method used to build the ontology. In fact, COPS specializes not only the DOLCE foundational ontology ("Descriptive Ontology for Linguistic and Cognitive Engineering", Masolo et al., 2003) but also core ontologies of domains (e.g. artefacts, documents) situated on a higher abstraction level. This approach enables us to take into account the "dual nature" of computer programs, which can be considered as both syntactic entities (well-formed expressions in a programming language) and artefacts whose function is to enable computers to process information.},
  file = {/home/pierre/Zotero/storage/8FLB95W4/Lando et al. - 2007 - Towards a General Ontology of Computer Programs..pdf}
}

@book{laurel_computers_1993,
  title = {Computers as {{Theatre}}},
  author = {Laurel, Brenda},
  year = {1993},
  publisher = {{Addison-Wesley}},
  abstract = {Featuring a new chapter that takes the student through virtual reality and beyond, this book presents a new theory of human-computer activity. It shows how similar principles can help students understand what people experience when interacting with computers. The book also describes how the user's enjoyment of a computer system should be the biggest design consideration.},
  isbn = {978-0-201-55060-3},
  langid = {english},
  keywords = {Computers / Human-Computer Interaction (HCI),Computers / User Interfaces}
}

@book{lavocat_interpretation_2015,
  title = {{Interpr\'etation litt\'eraire et sciences cognitives}},
  editor = {Lavocat, Fran{\c c}oise},
  year = {2015},
  publisher = {{Hermann}},
  address = {{Paris}},
  isbn = {978-2-7056-9159-2},
  langid = {fre},
  keywords = {Litt\'erature et neurosciences}
}

@book{leblanc_writing_1993,
  title = {Writing {{Teachers Writing Software}}: {{Creating Our Place}} in the {{Electronic Age}}. {{Advances}} in {{Computers}} and {{Composition}} on {{Studies Series}}},
  shorttitle = {Writing {{Teachers Writing Software}}},
  author = {LeBlanc, Paul J.},
  year = {1993},
  publisher = {{National Council of Teachers of English, 1111 W}},
  urldate = {2021-10-21},
  abstract = {Presenting a comprehensive look at (and critical history of) computer-aided composition (CAC), this book focuses on faculty development of software for composition studies. The book describes who is building these writing tools, how they are doing so, how their work is being received, and what is likely to affect their efforts in the future. Chapters in the book are: (1) Introduction; (2) Understanding Computer Software; (3) The "Who" and "How" of CAC Software Development; (4) Forces that Impact CAC Software Design; and (5) CAC Software Design and the New Literacy. A brief description of 13 software programs mentioned in the book and samples of program interfaces are appended. (Contains over 200 references.) (RS)},
  isbn = {978-0-8141-5911-8},
  langid = {english},
  keywords = {Computer Assisted Instruction,Computer Literacy,Computer Software Development,English Instruction,Higher Education,Writing (Composition),Writing Instruction,Writing Teachers},
  file = {/home/pierre/Zotero/storage/2ZJQTFZV/LeBlanc - 1993 - Writing Teachers Writing Software Creating Our Pl.pdf}
}

@book{lecorbusier_vers_1923,
  title = {{Vers une architecture}},
  author = {{Le Corbusier} and {Saugnier}},
  year = {1923},
  publisher = {{G. Cr\`es}},
  address = {{Paris}},
  langid = {fre},
  lccn = {Richelieu - Arts du spectacle - Magasin - LJ W-666},
  nationality = {FR},
  annotation = {ill. 25 cm. 1923, d'apr. National Union Catalog.}
}

@incollection{leddy_dewey_2021,
  title = {Dewey's {{Aesthetics}}},
  booktitle = {The {{Stanford Encyclopedia}} of {{Philosophy}}},
  author = {Leddy, Tom and Puolakka, Kalle},
  editor = {Zalta, Edward N.},
  year = {2021},
  edition = {Fall 2021},
  publisher = {{Metaphysics Research Lab, Stanford University}}
}

@article{leddy_everyday_1995,
  title = {Everyday {{Surface Aesthetic Qualities}}: "{{Neat}}," "{{Messy}}," "{{Clean}}," "{{Dirty}}"},
  shorttitle = {Everyday {{Surface Aesthetic Qualities}}},
  author = {Leddy, Thomas},
  year = {1995},
  journal = {The Journal of Aesthetics and Art Criticism},
  volume = {53},
  number = {3},
  eprint = {10.2307/431351},
  eprinttype = {jstor},
  pages = {259},
  issn = {00218529},
  doi = {10.2307/431351},
  urldate = {2021-11-11}
}

@article{leder_model_2004,
  title = {A Model of Aesthetic Appreciation and Aesthetic Judgments},
  author = {Leder, Helmut and Belke, Benno and Oeberst, Andries and Augustin, Dorothee},
  year = {2004},
  journal = {British Journal of Psychology},
  volume = {95},
  number = {4},
  pages = {489--508},
  issn = {2044-8295},
  doi = {10.1348/0007126042369811},
  urldate = {2023-02-28},
  abstract = {Although aesthetic experiences are frequent in modern life, there is as of yet no scientifically comprehensive theory that explains what psychologically constitutes such experiences. These experiences are particularly interesting because of their hedonic properties and the possibility to provide self-rewarding cognitive operations. We shall explain why modern art's large number of individualized styles, innovativeness and conceptuality offer positive aesthetic experiences. Moreover, the challenge of art is mainly driven by a need for understanding. Cognitive challenges of both abstract art and other conceptual, complex and multidimensional stimuli require an extension of previous approaches to empirical aesthetics. We present an information-processing stage model of aesthetic processing. According to the model, aesthetic experiences involve five stages: perception, explicit classification, implicit classification, cognitive mastering and evaluation. The model differentiates between aesthetic emotion and aesthetic judgments as two types of output.},
  langid = {english},
  file = {/home/pierre/Zotero/storage/TBRXRGR6/0007126042369811.html}
}

@techreport{lee_problem_2006,
  title = {The {{Problem}} with {{Threads}}},
  author = {Lee, Edward A.},
  year = {2006},
  month = jan,
  number = {UCB/EECS-2006-1},
  institution = {{EECS Department, University of California, Berkeley}},
  abstract = {Threads are a seemingly straightforward adaptation of the dominant sequential model of computation to concurrent systems. Languages require little or no syntactic changes to support threads, and operating systems and architectures have evolved to efficiently support them. Many technologists are pushing for increased use of multithreading in software in order to take advantage of the predicted increases in parallelism in computer architectures. In this paper, I argue that this is not a good idea. Although threads seem to be a small step from sequential computation, in fact, they represent a huge step. They discard the most essential and appealing properties of sequential computation: understandability, predictability, and determinism. Threads, as a model of computation, are wildly nondeterministic, and the job of the programmer becomes one of pruning that nondeterminism. Although many research techniques improve the model by offering more effective pruning, I argue that this is approaching the problem backwards. Rather than pruning nondeterminism, we should build from essentially deterministic, composable components. Nondeterminism should be explicitly and judiciously introduced where needed, rather than removed where not needed. The consequences of this principle are profound. I argue for the development of concurrent coordination languages based on sound, composable formalisms. I believe that such languages will yield much more reliable, and more concurrent programs.}
}

@book{lelionnais_great_1971,
  title = {Great Currents of Mathematical Thought},
  author = {Le Lionnais, Fran{\c c}ois},
  year = {1971},
  publisher = {{New York, Dover Publications}},
  urldate = {2023-03-24},
  abstract = {2 v. 23 cm; Translation of the 1962 enl. ed. of Les grands courants de la pens\'ee math\'ematique; Vol. 1 translated by R.A. Hall and Howard G. Bergmann; v. 2 translated by Charles Pinter and Helen Kline; Includes bibliographical references; v. 1. Mathematics: concepts and development.--v. 2. Mathematics in the arts and sciences},
  collaborator = {{Internet Archive}},
  isbn = {978-0-486-62723-6},
  langid = {english},
  keywords = {Mathematics}
}

@article{lennon_program_2018,
  title = {Program {{Text}}, {{Programming Style}}, {{Programmer Labor}}: {{Some Further Comments}} on {{Comments}}},
  shorttitle = {Program {{Text}}, {{Programming Style}}, {{Programmer Labor}}},
  author = {Lennon, Brian},
  year = {2018},
  month = nov,
  journal = {Cultural Politics},
  volume = {14},
  number = {3},
  pages = {372--394},
  issn = {1743-2197},
  doi = {10.1215/17432197-7093380},
  urldate = {2021-10-11},
  abstract = {Computer programming can be understood as both a kind of writing and a special class of human labor activity facilitating the automation of other human labor activities, not excluding itself. From the very beginning of the history of computer programming, it was recognized that the technical logic of programming is a logic of automation, indeed, a logic of self-automation or even recursive automation. This article suggests that a syntactic feature common to all programming languages used today serves as a register of this logic of automation, leaving traces in code that are legible if one knows where to look. That feature is the comment: natural-language text within a computer program that is written exclusively for human readers of the program and is separated from executable code, though it stands alongside it. At their most interesting, in patterns of use to which a managerial discourse of software craftspersonship is actively hostile, yet to which so-called literate programming practice is indifferent, program comments are traces of a mode of technical labor whose privilege and precarity both rest on its obscurity, an obscurity in no way resistant to reading.}
}

@book{lessig_code_1999,
  title = {Code and {{Other Laws}} of {{Cyberspace}}},
  author = {Lessig, Lawrence},
  year = {1999},
  publisher = {{Basic Books, Inc.}},
  address = {{USA}},
  abstract = {From the Publisher:Should cyberspace be regulated\_\_ \_\_ How can it be done\_\_ \_\_ It's a cherished belief of techies and net denizens everywhere that cyberspace is fundamentally impossible to regulate. Harvard Professor Lawrence Lessig warns that, if we're not careful we'll wake up one day to discover that the character of cyberspace has changed from under us. Cyberspace will no longer be a world of relative freedom; instead it will be a world of perfect control where our identities, actions, and desires are monitored, tracked, and analyzed for the latest market research report. Commercial forces will dictate the change, and architecture\textemdash the very structure of cyberspace itself\textemdash will dictate the form our interactions can and cannot take. Code And Other Laws of Cyberspace is an exciting examination of how the core values of cyberspace as we know it\textemdash intellectual property, free speech, and privacy-\textemdash are being threatened and what we can do to protect them. Lessig shows how code\textemdash the architecture and law of cyberspace\textemdash can make a domain, site, or network free or restrictive; how technological architectures influence people's behavior and the values they adopt; and how changes in code can have damaging consequences for individual freedoms. Code is not just for lawyers and policymakers; it is a must-read for everyone concerned with survival of democratic values in the Information Age.},
  isbn = {0-465-03912-X}
}

@article{lettvin_what_1959,
  title = {What the {{Frog}}'s {{Eye Tells}} the {{Frog}}'s {{Brain}}},
  author = {Lettvin, J. Y. and Maturana, H. R. and McCulloch, W. S. and Pitts, W. H.},
  year = {1959},
  month = nov,
  journal = {Proceedings of the IRE},
  volume = {47},
  number = {11},
  pages = {1940--1951},
  issn = {2162-6634},
  doi = {10.1109/JRPROC.1959.287207},
  abstract = {In this paper, we analyze the activity of single fibers in the optic nerve of a frog. Our method is to find what sort of stimulus causes the largest activity in one nerve fiber and then what is the exciting aspect of that stimulus such that variations in everything else cause little change in the response. It has been known for the past 20 years that each fiber is connected not to a few rods and cones in the retina but to very many over a fair area. Our results show that for the most part within that area, it is not the light intensity itself but rather the pattern of local variation of intensity that is the exciting factor. There are four types of fibers, each type concerned with a different sort of pattern. Each type is uniformly distributed over the whole retina of the frog. Thus, there are four distinct parallel distributed channels whereby the frog's eye informs his brain about the visual image in terms of local pattern independent of average illumination. We describe the patterns and show the functional and anatomical separation of the channels. This work has been done on the frog, and our interpretation applies only to the frog.},
  keywords = {Cerebral cortex,Eyes,Gravity,Lighting,Nerve fibers,Optical fibers,Relays,Retina,Senior members,Visual system},
  file = {/home/pierre/Zotero/storage/Q9SWWU3Q/4065609.html}
}

@article{leveque_reproducible_2012,
  title = {Reproducible Research for Scientific Computing: {{Tools}} and Strategies for Changing the Culture},
  shorttitle = {Reproducible Research for Scientific Computing},
  author = {LeVeque, Randall J. and Mitchell, Ian M. and Stodden, Victoria},
  year = {2012},
  month = jul,
  journal = {Computing in Science Engineering},
  volume = {14},
  number = {4},
  pages = {13--17},
  issn = {1558-366X},
  doi = {10.1109/MCSE.2012.38},
  abstract = {This article considers the obstacles involved in creating reproducible computational research as well as some efforts and approaches to overcome them.},
  keywords = {Computational complexity,computational science and engineering,data and code disclosure,Hidden Markov models,reproducibility,Reproducibility of results,reproducible research,Research and development,scientific computing,Scientific computing},
  file = {/home/pierre/Zotero/storage/DV52ZY8Y/6171147.html}
}

@article{levin_analysis_1971,
  title = {The {{Analysis}} of {{Compression}} in {{Poetry}}},
  author = {Levin, Samuel R.},
  year = {1971},
  journal = {Foundations of Language},
  volume = {7},
  number = {1},
  eprint = {25000510},
  eprinttype = {jstor},
  pages = {38--55},
  publisher = {{Springer}},
  issn = {0015-900X},
  urldate = {2022-06-01}
}

@book{levy_hackers_2010,
  title = {Hackers: {{Heroes}} of the {{Computer Revolution}} - 25th {{Anniversary Edition}}},
  shorttitle = {Hackers},
  author = {Levy, Steven},
  year = {2010},
  month = may,
  publisher = {{"O'Reilly Media, Inc."}},
  abstract = {This 25th anniversary edition of Steven Levy's classic book traces the exploits of the computer revolution's original hackers \textendash{} those brilliant and eccentric nerds from the late 1950s through the early '80s who took risks, bent the rules, and pushed the world in a radical new direction. With updated material from noteworthy hackers such as Bill Gates, Mark Zuckerberg, Richard Stallman, and Steve Wozniak, Hackers is a fascinating story that begins in early computer research labs and leads to the first home computers.Levy profiles the imaginative brainiacs who found clever and unorthodox solutions to computer engineering problems. They had a shared sense of values, known as "the hacker ethic," that still thrives today. Hackers captures a seminal period in recent history when underground activities blazed a trail for today's digital world, from MIT students finagling access to clunky computer-card machines to the DIY culture that spawned the Altair and the Apple II.},
  isbn = {978-1-4493-9374-8},
  langid = {english},
  keywords = {Computers / History,Computers / Information Technology,Computers / Programming / General,Computers / Reference,Computers / Social Aspects}
}

@book{levy_programmation_1992,
  title = {{De la programmation consid\'er\'ee comme un des beaux-arts}},
  author = {L{\'e}vy, Pierre},
  year = {1992},
  series = {{Textes \`a l'appui. Anthropologie des sciences et des techniques}},
  publisher = {{\'Ed. la D\'ecouverte}},
  address = {{Paris}},
  isbn = {978-2-7071-2154-7},
  langid = {french},
  keywords = {InformatiquePhilosophieOrdinateursProgrammationAspect socialProgrammation orient\'ee objets (informatique)Aspect socialProgrammationSyst\`emes experts (informatique)Repr\'esentation des connaissancesIntelligence artificielle}
}

@misc{li_where_2020,
  title = {Where {{Did Software Go Wrong}}?},
  shorttitle = {Where {{Did Software Go Wrong}}?},
  author = {Li, Jesse},
  year = {2020},
  month = may,
  urldate = {2022-07-13},
  abstract = {Software is broken, but it's not because of NPM, startups, AI, or venture capitalists. A deep dive into how we think about and produce code, and how our software systems reflect the manic state of the modern world.},
  howpublished = {https://blog.jse.li/posts/software/},
  langid = {english},
  file = {/home/pierre/Zotero/storage/IXW8Z6VU/software.html}
}

@article{licklider_mancomputer_1960,
  title = {Man-{{Computer Symbiosis}}},
  author = {Licklider, J. C. R.},
  year = {1960},
  month = mar,
  journal = {IRE Transactions on Human Factors in Electronics},
  volume = {HFE-1},
  number = {1},
  pages = {4--11},
  issn = {2168-2836},
  doi = {10.1109/THFE2.1960.4503259},
  abstract = {Man-computer symbiosis is an expected development in cooperative interaction between men and electronic computers. It will involve very close coupling between the human and the electronic members of the partnership. The main aims are 1) to let computers facilitate formulative thinking as they now facilitate the solution of formulated problems, and 2) to enable men and computers to cooperate in making decisions and controlling complex situations without inflexible dependence on predetermined programs. In the anticipated symbiotic partnership, men will set the goals, formulate the hypotheses, determine the criteria, and perform the evaluations. Computing machines will do the routinizable work that must be done to prepare the way for insights and decisions in technical and scientific thinking. Preliminary analyses indicate that the symbiotic partnership will perform intellectual operations much more effectively than man alone can perform them. Prerequisites for the achievement of the effective, cooperative association include developments in computer time sharing, in memory components, in memory organization, in programming languages, and in input and output equipment.},
  keywords = {Computer languages,Insects,Performance analysis,Performance evaluation,Symbiosis,Time sharing computer systems},
  file = {/home/pierre/Zotero/storage/2M3T6C6S/4503259.html}
}

@article{light_when_1999,
  title = {When {{Computers Were Women}}},
  author = {Light, Jennifer S.},
  year = {1999},
  journal = {Technology and Culture},
  volume = {40},
  number = {3},
  pages = {455--483},
  issn = {1097-3729},
  doi = {10.1353/tech.1999.0128},
  urldate = {2021-11-17}
}

@misc{linux_content_2023,
  title = {Content - 0c883d6fbd44d06763ef037e5df0b55e44222c88 - 76665c5/Lib/Genalloc.c \textendash{} {{Software Heritage}} Archive},
  author = {{Linux}},
  year = {2023},
  month = mar,
  urldate = {2023-03-10},
  howpublished = {https://archive.softwareheritage.org/swh:1:cnt:0c883d6fbd44d06763ef037e5df0b55e44222c88;origin=https://github.com/torvalds/linux;visit=swh:1:snp:e546f517ecbfe7675f5f240726fe75eaf19d8b55;anchor=swh:1:rev:44889ba56cbb3d51154660ccd15818bc77276696;path=/lib/genalloc.c;lines=182-205},
  file = {/home/pierre/Zotero/storage/UAG7TAG2/sha1_git0c883d6fbd44d06763ef037e5df0b55e44222c88.html}
}

@misc{linuxinformationproject_source_2004,
  title = {Source Code Definition by {{The Linux Information Project}}},
  author = {Linux Information Project},
  year = {2004},
  urldate = {2021-10-08}
}

@book{lions_lions_1996,
  title = {Lions' {{Commentary}} on {{UNIX}} 6th {{Edition}} with {{Source Code}}},
  author = {Lions, John},
  year = {1996},
  publisher = {{Peer-to-Peer Communications}},
  abstract = {The most famous suppressed book in computer history! * Used as an Operating System textbook at MIT"After 20 years, this is still the best expostion of the workings of a 'real' operating system." \textemdash{} Ken Thompson (Developer of the UNIX operating system)After years of suppression (as trade secrets) by various owners of the UNIX code, this tome has been re-released, and we owe a debt to all involved in making this happen. I consider this to be the single most important book of 1996. Unix Review, June 1997"The Lions book", cherished by UNIX hackers and widely circulated as a photocopied bootleg document since the late 1970's, is again available in an unrestricted edition. This legendary underground classic, reproduced without modification, is really two works in one: the complete source code to an early version (Edition 6) of the UNIX operating system, a treasure in itself! a brilliant commentary on that code by John Lionswith additional historical perspective essays added in 1996.Lions' marriage of source code with commentary was originally used as an operating systems textbook, a purpose for which it remains superbly well-suited (as evidenced by it's ongoing use at MIT).},
  isbn = {978-1-57398-013-5},
  langid = {english},
  keywords = {Computers / Operating Systems / UNIX,Computers / Software Development \& Engineering / Systems Analysis \& Design}
}

@book{lopes_understanding_1996,
  title = {Understanding Pictures},
  author = {Lopes, Dominic},
  year = {1996},
  series = {Oxford Philosophical Monographs},
  publisher = {{Clarendon Press ; Oxford University Press}},
  address = {{Oxford : Oxford \%3B New York}},
  copyright = {Access is restricted to users affiliated with licensed institutions.},
  isbn = {0-19-169956-X},
  langid = {english},
  lccn = {95042043},
  keywords = {Aesthetics,Pictures}
}

@book{mackenzie_cutting_2006,
  title = {Cutting {{Code}}: {{Software}} and {{Sociality}}},
  shorttitle = {Cutting {{Code}}},
  author = {Mackenzie, Adrian},
  year = {2006},
  publisher = {{Peter Lang}},
  abstract = {Software has often been marginalized in accounts of digital cultures and network societies. Although software is everywhere, it is hard to say what it actually is. Cutting Code: Software and Sociality is one of the first books to treat software seriously as a full-blown cultural process and as a subtly powerful material in contemporary communication. From deCSS to Java, from Linux to Extreme Programming, this book analyses software artworks, operating systems, commercial products, infrastructures, and programming practices. It explores social forms, identities, materialities, and power relations associated with software, and it asks how software provokes the re-thinking of production, consumption and distribution as entwined cultural processes. Cutting Code argues that analysis of code as a mosaic of algorithms, protocols, infrastructures, and programming conventions offers valuable insights into how contemporary social formations invent new kinds of personhood and new ways of acting.},
  isbn = {978-0-8204-7823-4},
  langid = {english},
  keywords = {Computers / Social Aspects,Social Science / Popular Culture,Technology \& Engineering / Social Aspects}
}

@incollection{man_influence_2015,
  title = {Influence of {{Global Aesthetics}} on {{Chinese Aesthetics}}: {{The Adaptation}} of {{Moxie}} and the {{Case}} of {{Dafen Cun}}},
  shorttitle = {Influence of {{Global Aesthetics}} on {{Chinese Aesthetics}}},
  booktitle = {Issues of {{Contemporary Art}} and {{Aesthetics}} in {{Chinese Context}}},
  author = {Man, Eva Kit Wah},
  editor = {Man, Eva Kit Wah},
  year = {2015},
  series = {Chinese {{Contemporary Art Series}}},
  pages = {95--103},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-662-46510-3_13},
  urldate = {2021-01-28},
  abstract = {This chapter begins to examine the practice of moxie or imitation in art in Chinese aesthetics, compares it with the Platonic notion of mimesis, and explicates its original meaning. It then traces its development from the tradition to the late Qing export paintings in which traditional Chinese aesthetics is combined with Western perspectives to meet the Western interests.},
  isbn = {978-3-662-46510-3},
  langid = {english},
  keywords = {Aesthetic Experience,Chinese Painter,Tang Dynasty,Western Perspective,World Expo},
  file = {/home/pierre/Zotero/storage/8T2CHYV6/Man - 2015 - Influence of Global Aesthetics on Chinese Aestheti.pdf}
}

@book{manovich_language_2001,
  title = {The Language of New Media},
  author = {Manovich, {\relax Lev}.},
  year = {2001},
  publisher = {{MIT Press}},
  address = {{Cambridge, MA}},
  abstract = {In dit boek worden delen van filmtheorie, kunsthistorie, literatuurwetenschap en informatica in verband gebracht met de ontwikkeling van nieuwe media.},
  isbn = {0-262-13374-1 978-0-262-13374-6 0-262-63255-1 978-0-262-63255-3},
  langid = {english}
}

@book{marchand-zanartu_32_2022,
  title = {{32 grammes de pens\'ee, essai sur l'imagination graphique}},
  author = {{Marchand-Za{\~n}artu}, Nicole and Lauxerois, Jean},
  year = {2022},
  publisher = {{M\'ediapop \'Editions}},
  urldate = {2022-10-11},
  abstract = {Pourquoi l'esprit a-t-il besoin de griffonner, d'esquisser des sch\'emas, m\^elant souvent lettres, lignes et couleurs ? Et si la pens\'ee, dans sa naissance comme dans sa construction, \'etait d'embl\'ee image, et imagination graphique ? Ces trac\'es inventifs, ces \'ebauches plus ou moins \'elabor\'ees mais toujours myst\'erieuses, qu'ils soient de la main du po\`ete, du math\'ematicien, du philosophe, du musicien, de l'architecte, ou de tout un chacun, nous les nommons des \guillemotleft{} grammes \guillemotright{} \textendash{} du grec gramma/gramm\`e, \guillemotleft{} ligne, trait, dessin, \'ecriture \guillemotright{} \textendash, parce que le mot rend aussi hommage \`a leur l\'eg\`eret\'e, leur t\'enuit\'e, voire leur fragilit\'e, qui les rendent plus vivants et plus singuliers. Trente-deux \guillemotleft{} grammes de pens\'ee \guillemotright{} ont \'et\'e ici choisis, auxquels r\'epondent respectivement trente-deux textes, qui voudraient offrir au lecteur comme un libre fil d'Ariane dans ces fascinants labyrinthes.  Jean Lauxerois \textendash{} ancien membre du Coll\`ege international de philosophie, traducteur de l'allemand (Heidegger, Adorno, W. F. Otto) et du grec ancien (Platon, Aristote, Sophocle). A notamment publi\'e : l'Utopie Beaubourg, vingt apr\`es (1996), l'\'Epreuve du temps (2016), Rome Apocalypse (2016), ainsi que des textes de catalogue d'artistes contemporains.  Nicole Marchand-Za\~nartu \textendash{} journaliste (presse et t\'el\'evision), responsable des enseignements de sciences humaines \`a partir de 1981 \`a l'Ensci-Les Ateliers o\`u elle cr\'ee un centre de documentation en liaison avec le CCI/Centre Pompidou. A publi\'e en 2011 Images de pens\'ee (co auteur Marie-Haude Cara\"es) aux \'editions de la R\'eunion des mus\'ees nationaux, Les Grands Turbulents : portraits de groupes 1880-1980 chez M\'ediapop \'Editions (2018).},
  isbn = {978-2-491-43601-8},
  langid = {french},
  file = {/home/pierre/Zotero/storage/PUHLEEUK/32-grammes-de-pensee-essai-sur-limagination-graphique.html}
}

@inproceedings{marcus_graphic_1982,
  title = {On {{The Graphic Design}} of {{Program Text}}},
  author = {Marcus, Aaron and Baecker, Ronald},
  year = {1982},
  month = may
}

@book{marino_critical_2020,
  title = {Critical {{Code Studies}}},
  author = {Marino, Mark C.},
  editor = {{Wardrip-Fruin}, Noah and Chun, Wendy Hui Kyong and Soon, Winnie and Zhu, Jichen},
  year = {2020},
  month = mar,
  series = {Software {{Studies}}},
  publisher = {{MIT Press}},
  address = {{Cambridge, MA, USA}},
  abstract = {An argument that we must read code for more than what it does\textemdash we must consider what it means.},
  isbn = {978-0-262-04365-6},
  langid = {english}
}

@book{martin_clean_2008,
  title = {Clean {{Code}}: {{A Handbook}} of {{Agile Software Craftsmanship}}},
  shorttitle = {Clean {{Code}}},
  author = {Martin, Robert C.},
  year = {2008},
  month = aug,
  publisher = {{Pearson Education}},
  abstract = {Even bad code can function. But if code isn't clean, it can bring a development organization to its knees. Every year, countless hours and significant resources are lost because of poorly written code. But it doesn't have to be that way. Noted software expert Robert C. Martin presents a revolutionary paradigm with Clean Code: A Handbook of Agile Software Craftsmanship . Martin has teamed up with his colleagues from Object Mentor to distill their best agile practice of cleaning code ``on the fly'' into a book that will instill within you the values of a software craftsman and make you a better programmer\textendash but only if you work at it. What kind of work will you be doing? You'll be reading code\textendash lots of code. And you will be challenged to think about what's right about that code, and what's wrong with it. More importantly, you will be challenged to reassess your professional values and your commitment to your craft. Clean Code is divided into three parts. The first describes the principles, patterns, and practices of writing clean code. The second part consists of several case studies of increasing complexity. Each case study is an exercise in cleaning up code\textendash of transforming a code base that has some problems into one that is sound and efficient. The third part is the payoff: a single chapter containing a list of heuristics and ``smells'' gathered while creating the case studies. The result is a knowledge base that describes the way we think when we write, read, and clean code. Readers will come away from this book understanding How to tell the difference between good and bad code How to write good code and how to transform bad code into good code How to create good names, good functions, good objects, and good classes How to format code for maximum readability How to implement complete error handling without obscuring code logic How to unit test and practice test-driven development This book is a must for any developer, software engineer, project manager, team lead, or systems analyst with an interest in producing better code.},
  isbn = {978-0-13-608325-2},
  langid = {english},
  keywords = {Computers / Software Development \& Engineering / General,Computers / Software Development \& Engineering / Quality Assurance \& Testing}
}

@article{mateas_box_2005,
  title = {A {{Box}}, {{Darkly}}: {{Obfuscation}}, {{Weird Languages}}, and {{Code Aesthetics}}},
  shorttitle = {A {{Box}}, {{Darkly}}},
  author = {Mateas, M. and Montfort, Nick},
  year = {2005},
  journal = {undefined},
  urldate = {2022-06-03},
  abstract = {This paper explores programming practices in which other values are at work, showing that the aesthetics of code must be enlarged to accommodate them. The standard idea of code aesthetics, when such an idea manifests itself at all, allows for programmers to have elegance and clarity as their standards. This paper explores programming practices in which other values are at work, showing that the aesthetics of code must be enlarged to accommodate them. The two practices considered are obfuscated programming and the creation of ``weird languages'' for coding. Connections between these two practices, and between these and other mechanical and literary aesthetic traditions, are discussed.},
  langid = {english},
  file = {/home/pierre/Zotero/storage/J6UKF56E/985df88d0a5c0cfa6a9721d771874e27b29aea0a.html}
}

@article{mazzone_art_2019,
  title = {Art, {{Creativity}}, and the {{Potential}} of {{Artificial Intelligence}}},
  author = {Mazzone, Marian and Elgammal, Ahmed},
  year = {2019},
  month = mar,
  journal = {Arts},
  volume = {8},
  number = {1},
  pages = {26},
  doi = {10.3390/arts8010026},
  urldate = {2021-01-28},
  abstract = {Our essay discusses an AI process developed for making art (AICAN), and the issues AI creativity raises for understanding art and artists in the 21st century. Backed by our training in computer science (Elgammal) and art history (Mazzone), we argue for the consideration of AICAN\&rsquo;s works as art, relate AICAN works to the contemporary art context, and urge a reconsideration of how we might define human and machine creativity. Our work in developing AI processes for art making, style analysis, and detecting large-scale style patterns in art history has led us to carefully consider the history and dynamics of human art-making and to examine how those patterns can be modeled and taught to the machine. We advocate for a connection between machine creativity and art broadly defined as parallel to but not in conflict with human artists and their emotional and social intentions of art making. Rather, we urge a partnership between human and machine creativity when called for, seeing in this collaboration a means to maximize both partners\&rsquo; creative strengths.},
  copyright = {http://creativecommons.org/licenses/by/3.0/},
  langid = {english},
  keywords = {adversarial learning,art,artificial intelligence,computational creativity,creativity,deep learning},
  file = {/home/pierre/Zotero/storage/ZMYP3ZDQ/Mazzone and Elgammal - 2019 - Art, Creativity, and the Potential of Artificial I.pdf;/home/pierre/Zotero/storage/VRDRQJ38/26.html}
}

@article{mcallister_mathematical_2005,
  title = {Mathematical {{Beauty}} and the {{Evolution}} of the {{Standards}} of {{Mathematical Proof}}},
  author = {McAllister, J.},
  year = {2005},
  journal = {undefined},
  urldate = {2022-07-14},
  abstract = {an important part in the subjective experience and enjoyment of doing mathematics. Some mathematicians claim also that beauty acts as a guide in making mathematical discoveries and that beauty is an objective factor in establishing the validity and importance of a mathematical result. The combination of subjective and objective aspects makes mathematical beauty an intriguing phenomenon for philosophers as well as mathematicians. This chapter analyzes the concept of mathematical beauty\textemdash especially the forms of beauty that mathematicians appreciate in and demand of mathematical proofs. This analysis will help ascertain how mathematical beauty can play both a subjective role in the experience of mathematicians and an objective role in the appraisal of mathematical proofs and other results. First, let us clarify a few fundamental terms. How should we interpret an observer's claim that a certain entity is beautiful? The most natural interpretation is that the entity has a property named ``beauty,'' which the observer has perceived. I do not regard this interpretation as satisfactory, however. I regard beauty as a value that is projected into or attributed to objects by observers, not a property that intrinsically resides in objects. This philosophical viewpoint is known as projectivism. Whether an observer projects beauty into an object is determined by two factors: 2},
  langid = {english},
  file = {/home/pierre/Zotero/storage/F5ZQCMCW/eb9b4e1250eaa2a15d653fae662ce5cb7f5fd6fc.html}
}

@article{mccarthy_history_1978,
  title = {History of {{LISP}}},
  author = {McCarthy, John},
  year = {1978},
  month = aug,
  journal = {ACM SIGPLAN Notices},
  volume = {13},
  number = {8},
  pages = {217--223},
  issn = {0362-1340},
  doi = {10.1145/960118.808387},
  urldate = {2022-10-28},
  abstract = {This paper concentrates on the development of the basic ideas and distinguishes two periods - Summer 1958 through Summer 1958 when most of the key ideas were developed (some of which were implemented in the FORTRAN based FLPL), and Fall 1958 through 1962 when the programming language was implemented and applied to problems of artificial intelligence. After 1962, the development of LISP became multi-stranded, and different ideas were pursued in different places.},
  file = {/home/pierre/Zotero/storage/LGUVN46H/McCarthy - 1978 - History of LISP.pdf}
}

@book{mccarthy_lisp_1965,
  title = {{{LISP}} 1.5 {{Programmer}}'s {{Manual}}},
  author = {McCarthy, John and Levin, Michael I. and Abrahams, Paul W. and Center, Massachusetts Institute of Technology Computation and Edwards, Daniel J.},
  year = {1965},
  publisher = {{MIT Press}},
  abstract = {The manual describes LISP, a formal mathematical language. LISP differs from most programming languages in three important ways. The first way is in the nature of the data.The LISP language is designed primarily for symbolic data processing used for symbolic calculations in differential and integral calculus, electrical circuit theory, mathematical logic, game playing, and other fields of artificial intelligence. The manual describes LISP, a formal mathematical language. LISP differs from most programming languages in three important ways. The first way is in the nature of the data. In the LISP language, all data are in the form of symbolic expressions usually referred to as S-expressions, of indefinite length, and which have a branching tree-type of structure, so that significant subexpressions can be readily isolated. In the LISP system, the bulk of the available memory is used for storing S-expressions in the form of list structures. The second distinction is that the LISP language is the source language itself which specifies in what way the S-expressions are to be processed. Third, LISP can interpret and execute programs written in the form of S-expressions. Thus, like machine language, and unlike most other high level languages, it can be used to generate programs for further executions.},
  isbn = {978-0-262-13011-0},
  langid = {english},
  keywords = {Computers / Programming Languages / General}
}

@book{mcconnell_code_2004,
  title = {Code {{Complete}}: {{A Practical Handbook}} of {{Software Construction}}, {{Second Edition}}},
  shorttitle = {Code {{Complete}}},
  author = {McConnell, Steve},
  year = {2004},
  month = jul,
  edition = {2nd edition},
  publisher = {{Microsoft Press}},
  address = {{Redmond, Wash}},
  abstract = {Widely considered one of the best practical guides to programming, Steve McConnell's original code complete has been helping developers write better software for more than a decade. Now this classic book has been fully updated and revised with leading-edge practices\textemdash and hundreds of new code samples\textemdash illustrating the art and science of software construction. Capturing the body of knowledge available from research, academia, and everyday commercial practice, McConnell synthesizes the most effective techniques and must-know principles into clear, pragmatic guidance. No matter what your experience level, development environment, or project size, this book will inform and stimulate your thinking\textemdash and help you build the highest quality code.Discover the timeless techniques and strategies that help you: Design for minimum complexity and maximum creativity Reap the benefits of collaborative development Apply defensive programming techniques to reduce and flush out errors Exploit opportunities to refactor\textemdash or evolve\textemdash code, and do it safely Use construction practices that are right-weight for your project Debug problems quickly and effectively Resolve critical construction issues early and correctly Build quality into the beginning, middle, and end of your project .},
  isbn = {978-0-7356-1967-8},
  langid = {english}
}

@article{mcculloch_delusion_1953,
  title = {The {{Past}} of a {{Delusion}}},
  author = {McCulloch, W.},
  year = {1953},
  journal = {Chicago Literary Club},
  urldate = {2021-05-14},
  abstract = {To make Warren McCulloch\&\#39;s essay \&quot;THE PAST OF A DELUSION\&quot; from the year 1953 now available in a German translation is in need to be explained. Den aus dem Jahr 1953 stammenden Aufsatz \&quot;THE PAST OF A DELUSION\&quot; von Warren McCulloch als Arbeitstext auch in deutscher Sprache zuganglich zu machen, bedarf einer erlauternden Anmerkung. Undoubtedly Warren Sturgis McCulloch is one of the leading scientists of the 20th century. His influence ranges from the early days of the Macy-Conferences over MIT and Biological Computer Lab in Urbana, Illinois to the foundation of the renowned \&quot;Santa Fe Institute for Sciences of Complexity\&quot;, where one of the more prominent collaborators was the physician, biochemist and biophysicist Stuart Kauffman, a temporary disciple of McCulloch. Before McCulloch returned to the academic world and together with the mathematician Walter Pitts introduced in his most widely known work the theoretical concept of the MCCulloch-Pitts-neuron and verified, that Turing-computable problems are in general computable with a network composed of a finite number of McCulloch-Pitts-neurons, from 1927 to 1934 he worked at Bellevue-Hospital in New York. We mention this, because the essay available here is coined by a selfconcept of a scientist and a physician. Warren Sturgis McCulloch ist unbestritten einer der wichtigsten Wissenschaftler des 20. Jahrhunderts. Sein Einflus reicht von den fruhen Tagen der Macy-Konferenzen uber das MIT und das Biological Computer Lab in Urbana, Illinois, bis hin zur Grundung des renommierten \&quot;Santa Fe Institute for Sciences of Complexity\&quot;, zu dessen bekannteren Mitarbeitern der Mediziner, Biochemiker und Biophysiker Stuart Kauffman gehorte, zeitweilig ein Schuler McCullochs. 1927 bis 1934, bevor McCulloch, einer der Vater von Kybernetik und Neuroinformatik, in die akademische Welt zuruckkehrte und in seiner wohl bekanntesten Arbeit zusammen mit dem Mathematiker Walter Pitts das theoretische Konzept des McCullochPitts-Neurons einfuhrte und nachwies, dass turing-berechenbare Probleme sich allgemein mit einem endlichen Netz von McCulloch-PittsNeuronen berechnen lassen, arbeitete er als Arzt im Bellevue-Hospital in New York. Wir erwahnen das, weil der hier bereitgestellte Aufsatz uber weite Strecken von einem Selbstverstandnis als Wissenschaftler und Arzt getragen ist. The essay was written for the Chicago Literary Club and is part of the monograph \&quot;Embodiments of Mind\&quot;, an overall view of McCulloch\&\#39;s works. The German edition of the monograph \&quot;Verkorperungen des Geistes\&quot; contains only 13 of the 21 articles of the English original edition, amongst others, also this essay is missing. Der Aufsatz wurde erstellt fur den Chicagoer Literaturverein und ist Bestandteil der Monographie \&quot;Embodiments of Mind\&quot;, einer Gesamtschau der McCulloch\&\#39;schen Arbeiten. Die deutsche Ausgabe der Monographie \&quot;Verkorperungen des Geistes\&quot; enthalt nur 13 der insgesamt 21 Arbeiten der englischen Originalausgabe, u.a. fehlt auch dieser Aufsatz.},
  langid = {english},
  file = {/home/pierre/Zotero/storage/45AK7YH4/57d18b505ef9f1243b70bfeb9fd2cd831506dec1.html}
}

@article{mcculloch_logical_1990,
  title = {A Logical Calculus of the Ideas Immanent in Nervous Activity},
  author = {McCulloch, Warren S. and Pitts, Walter},
  year = {1990},
  month = jan,
  journal = {Bulletin of Mathematical Biology},
  volume = {52},
  number = {1},
  pages = {99--115},
  issn = {1522-9602},
  doi = {10.1007/BF02459570},
  urldate = {2021-09-14},
  abstract = {Because of the ``all-or-none'' character of nervous activity, neural events and the relations among them can be treated by means of propositional logic. It is found that the behavior of every net can be described in these terms, with the addition of more complicated logical means for nets containing circles; and that for any logical expression satisfying certain conditions, one can find a net behaving in the fashion it describes. It is shown that many particular choices among possible neurophysiological assumptions are equivalent, in the sense that for every net behaving under one assumption, there exists another net which behaves under the other and gives the same results, although perhaps not in the same time. Various applications of the calculus are discussed.},
  langid = {english}
}

@article{mcgaughey_ricoeur_1988,
  title = {Ricoeur's {{Metaphor}} and {{Narrative Theories}} as a {{Foundation}} for a {{Theory}} of {{Symbol}}},
  author = {McGaughey, Douglas R.},
  year = {1988},
  journal = {Religious Studies},
  volume = {24},
  number = {4},
  eprint = {20019302},
  eprinttype = {jstor},
  pages = {415--437},
  issn = {0034-4125},
  urldate = {2021-03-27}
}

@article{mcgee_craftsmanship_1999,
  title = {From {{Craftsmanship}} to {{Draftsmanship}}: {{Naval Architecture}} and the {{Three Traditions}} of {{Early Modern Design}}},
  shorttitle = {From {{Craftsmanship}} to {{Draftsmanship}}},
  author = {McGee, David},
  year = {1999},
  journal = {Technology and Culture},
  volume = {40},
  number = {2},
  eprint = {25147307},
  eprinttype = {jstor},
  pages = {209--236},
  publisher = {{[The Johns Hopkins University Press, Society for the History of Technology]}},
  issn = {0040-165X},
  urldate = {2021-01-28}
}

@misc{mclean_hacking_2004,
  title = {Hacking {{Perl}} in {{Nightclubs}}},
  author = {McLean, Alex},
  year = {2004},
  month = aug,
  journal = {Perl.com},
  urldate = {2022-08-08},
  abstract = {I've found the experiences of dancing and programming to have a great deal in common. With both I am immersed in an abstract world of animated structures, building up and breaking down many times before finally reaching a conclusion....},
  howpublished = {https://perl.com/pub/2004/08/31/livecode.html/},
  langid = {american},
  file = {/home/pierre/Zotero/storage/M8LDP3ZG/livecode.html.html}
}

@techreport{mclennan_who_1997,
  type = {Technical {{Report}}},
  title = {"{{Who Care About Elegance}}?": {{The Role}} of {{Aesthetics}} in {{Programming Language Design}}},
  author = {McLennan, Bruce J.},
  year = {1997},
  month = jan,
  number = {UT-CS-97-344},
  institution = {{University of Tennessee}},
  abstract = {The crucial role played by aesthetics in programming language design and the importance of elegance in programming languages are defended on the basis of analogies with structural engineering, as presented in Billington's The Tower and the Bridge. This report may be used for any nonprofit purpose provided that its source is acknowledged. It will be adapted for inclusion in the third edition of my Principles of Programming Languages.}
}

@article{meles_temps_2017,
  title = {{Temps et activit\'e selon Unix}},
  author = {M{\'e}l{\`e}s, Baptiste},
  year = {2017},
  journal = {R\'eseaux},
  volume = {206},
  number = {6},
  pages = {125--153},
  publisher = {{La D\'ecouverte}},
  address = {{Paris}},
  issn = {0751-7971},
  doi = {10.3917/res.206.0125},
  urldate = {2022-12-15},
  abstract = {Lire les lignes de code qui composent un programme peut permettre de voir de quels discours politique ou moral, de quels projets, de quels int\'er\^ets ou encore de quels imaginaires le programme est l'insigne. Il nous semble donc que le d\'ecryptage des programmes ne doit pas devenir une discipline autonome. Au contraire, nous pensons, \`a l'instar de Matthew Fuller, que l'anthropologie, la sociologie, le droit, l'\'economie, l'histoire, les sciences politiques, la philosophie, la linguistique et les sciences de la communication devraient (pouvoir) analyser les programmes en allant jusqu'\`a la lecture des lignes de code, et non que l'on devrait cr\'eer un nouveau champ dont les chercheurs s'occuperaient de lire le code tandis que leurs coll\`egues des autres disciplines continueraient \`a probl\'ematiser et \`a analyser des ph\'enom\`enes au sein desquels les programmes jouent un r\^ole fondamental sans que ces chercheurs ne pr\^etent jamais attention aux dits programmes. Dans ce num\'ero, vous trouverez par ailleurs en Varia une contribution de Manon Istasse qui pr\'esente Facebook et les amateurs de patrimoine au travers de la description et l'analyse d'un groupe Facebook d\'edi\'e au patrimoine d'une ville fran\c{c}aise, et sa comparaison avec les caract\'eristiques des dispositifs collaboratifs des sciences citoyennes. Illustration de couverture : \textcopyright{} Varianto:25},
  langid = {french},
  keywords = {code source,horloge informatique,John Lions,John von Neumann,m\'emoire informatique,ordonnancement des processus,philosophie de l'informatique,syst\`eme d'exploitation,temps,Unix}
}

@misc{melik_pc_2012,
  title = {{{PC}} Demos {{FAQ}}},
  author = {Melik, David},
  year = {2012},
  urldate = {2021-04-03},
  file = {/home/pierre/Zotero/storage/7ATBHHY9/pc-demos-faq.html}
}

@misc{mentor+++_conscience_1986,
  title = {The {{Conscience}} of a {{Hacker}}},
  author = {Mentor+++, +++The},
  year = {1986},
  month = jan,
  journal = {.:: Phrack Magazine ::.},
  urldate = {2021-11-19},
  file = {/home/pierre/Zotero/storage/T8CLBFJA/3.html}
}

@article{merali_computational_2010,
  title = {Computational Science: ...{{Error}}},
  shorttitle = {Computational Science},
  author = {Merali, Zeeya},
  year = {2010},
  month = oct,
  journal = {Nature},
  volume = {467},
  number = {7317},
  pages = {775--777},
  issn = {1476-4687},
  doi = {10.1038/467775a},
  urldate = {2022-04-02},
  abstract = {\ldots why scientific programming does not compute.},
  copyright = {2010 Nature Publishing Group},
  langid = {english},
  keywords = {Institutions,Programming language,Software},
  file = {/home/pierre/Zotero/storage/QKSDKXVR/Merali - 2010 - Computational science ...Error.pdf;/home/pierre/Zotero/storage/GGWYNJBI/467775a.html}
}

@misc{merriam-webster_definition_2022,
  title = {Definition of {{CLEAN}}},
  author = {{Merriam-Webster}},
  year = {2022},
  journal = {Merriam-Webster.com},
  urldate = {2022-06-01},
  abstract = {free from dirt or pollution; free from contamination or disease; free or relatively free from radioactivity\ldots{} See the full definition},
  howpublished = {https://www.merriam-webster.com/dictionary/clean},
  langid = {english},
  file = {/home/pierre/Zotero/storage/X47QT9VN/clean.html}
}

@article{millman_python_2011,
  title = {Python for {{Scientists}} and {{Engineers}}},
  author = {Millman, K. and Aivazis, M.},
  year = {2011},
  month = mar,
  journal = {Computing in Science \& Engineering},
  volume = {13},
  number = {02},
  pages = {9--12},
  issn = {1558-366X},
  doi = {10.1109/MCSE.2011.36},
  keywords = {interactive research,programming languages,python,python libraries,python tools,scientific computing}
}

@book{MillsC.WrightCharlesWright2000Tsi,
  title = {The Sociological Imagination},
  author = {Mills, Charles Wright},
  year = {2000},
  publisher = {{Oxford University Press}},
  address = {{Oxford; New York}},
  isbn = {0-19-513373-0},
  langid = {english},
  lccn = {99016199},
  keywords = {Social sciences}
}

@incollection{milner_semantic_1996,
  title = {Semantic Ideas in Computing},
  booktitle = {Computing {{Tomorrow}}},
  author = {Milner, Robin},
  editor = {Wand, Ian and Milner, Robin},
  year = {1996},
  pages = {246--283},
  publisher = {{Cambridge University Press}},
  address = {{United States}},
  doi = {10.1017/CBO9780511605611.014},
  abstract = {Are there distinct principles and concepts which underlie computing, so that we are justified in calling it an independent science? Or is computing a resource or commodity \textendash{} like water \textendash{} which is perfectly well understood in terms of existing science, for which we merely have to find more and better uses?In this essay I argue that a rich conceptual development is in progress, to which we cannot predict limits, and whose outcome will be a distinct science. This development has all the excitement and unpredictability of any science. We cannot predict how the conceptual landscape will lie in a decade's time; the subject is still young and has many surprises in store, and there is no sure way to extrapolate from the concepts which we now understand to those which will emerge. I therefore support my argument by explaining in outline some semantic ideas which have emerged in the last two or three decades, and some which are just now emerging.I try to present the ideas here in a way which is accessible to someone with an understanding of programming and a little mathematical background. This volume aims to give a balanced picture of computer science; to achieve this, those parts which are mathematical must be presented as such. The essence of foundational work is to give precise meaning to formulations of processes and information; clearly, we should employ mathematics in this work whenever it strengthens our analytical power. Thus, rather than avoiding equations, I try to surround them with helpful narrative.It is a somewhat arbitrary matter to decide when a scientific discipline is mature and stands significantly on its own.},
  langid = {english}
}

@book{mindell_digital_2011,
  title = {Digital {{Apollo}}: {{Human}} and {{Machine}} in {{Spaceflight}}},
  shorttitle = {Digital {{Apollo}}},
  author = {Mindell, David A.},
  year = {2011},
  month = sep,
  publisher = {{MIT Press}},
  abstract = {How human pilots and automated systems worked together to achieve the ultimate in flight\textemdash the lunar landings of NASA's Apollo program.As Apollo 11's Lunar Module descended toward the moon under automatic control, a program alarm in the guidance computer's software nearly caused a mission abort. Neil Armstrong responded by switching off the automatic mode and taking direct control. He stopped monitoring the computer and began flying the spacecraft, relying on skill to land it and earning praise for a triumph of human over machine. In Digital Apollo, engineer-historian David Mindell takes this famous moment as a starting point for an exploration of the relationship between humans and computers in the Apollo program. In each of the six Apollo landings, the astronaut in command seized control from the computer and landed with his hand on the stick. Mindell recounts the story of astronauts' desire to control their spacecraft in parallel with the history of the Apollo Guidance Computer. From the early days of aviation through the birth of spaceflight, test pilots and astronauts sought to be more than ``spam in a can'' despite the automatic controls, digital computers, and software developed by engineers.Digital Apollo examines the design and execution of each of the six Apollo moon landings, drawing on transcripts and data telemetry from the flights, astronaut interviews, and NASA's extensive archives. Mindell's exploration of how human pilots and automated systems worked together to achieve the ultimate in flight\textemdash a lunar landing\textemdash traces and reframes the debate over the future of humans and automation in space. The results have implications for any venture in which human roles seem threatened by automated systems, whether it is the work at our desktops or the future of exploration.},
  isbn = {978-0-262-26668-0},
  langid = {english},
  keywords = {Technology \& Engineering / Aeronautics \& Astronautics,Technology \& Engineering / General}
}

@book{mitchell_art_1987,
  title = {The Art of Computer Graphics Programming : A Structured Introduction for Architects and Designers},
  shorttitle = {The Art of Computer Graphics Programming},
  author = {Mitchell, William J. (William John)},
  year = {1987},
  publisher = {{New York : Van Nostrand Reinhold}},
  urldate = {2022-06-01},
  abstract = {ix, 572 pages : 28 cm; Includes bibliographical references (pages 553-555) and index},
  collaborator = {{Internet Archive}},
  isbn = {978-0-442-25991-4},
  langid = {english},
  keywords = {Computer graphics}
}

@article{mohan_approach_2004,
  title = {An Approach to Understanding Program Comprehensibility Using Spatial Complexity, Concept Assignment and Typographical Style},
  author = {Mohan, A. and Gold, N. and Layzell, P.},
  year = {2004},
  journal = {undefined},
  urldate = {2022-12-02},
  abstract = {The results obtained so far indicate that this approach is useful in modelling the comprehensibility of a program as it evolves, but further work is required to calibrate this approach to more accurately reflect comprehensibility. This paper has briefly presented an approach to identifying the comprehensibility of a program and initial results from its application. The results obtained so far, indicate that this approach is useful in modelling the comprehensibility of a program as it evolves. However further work is required to calibrate this approach to more accurately reflect comprehensibility and to identify at what point corrective action should be undertaken to maintain the quality of the program.},
  langid = {english}
}

@article{moler_history_2020,
  title = {A History of {{MATLAB}}},
  author = {Moler, Cleve and Little, Jack},
  year = {2020},
  month = jun,
  journal = {Proceedings of the ACM on Programming Languages},
  volume = {4},
  number = {HOPL},
  pages = {81:1--81:67},
  doi = {10.1145/3386331},
  urldate = {2022-04-02},
  abstract = {The first MATLAB (the name is short for ``Matrix Laboratory'') was not a programming language. Written in Fortran in the late 1970s, it was a simple interactive matrix calculator built on top of about a dozen subroutines from the LINPACK and EISPACK matrix software libraries. There were only 71 reserved words and built-in functions. It could be extended only by modifying the Fortran source code and recompiling it. The programming language appeared in 1984 when MATLAB became a commercial product. The calculator was reimplemented in C and significantly enhanced with the addition of user functions, toolboxes, and graphics. It was available initially on the IBM PC and clones; versions for Unix workstations and the Apple Macintosh soon followed. In addition to the matrix functions from the calculator, the 1984 MATLAB included fast Fourier transforms (FFT). The Control System Toolbox appeared in 1985 and the Signal Processing Toolbox in 1987. Built-in support for the numerical solution of ordinary differential equations also appeared in 1987. The first significant new data structure, the sparse matrix, was introduced in 1992. The Image Processing Toolbox and the Symbolic Math Toolbox were both introduced in 1993. Several new data types and data structures, including single precision floating point, various integer and logical types, cell arrays, structures, and objects were introduced in the late 1990s. Enhancements to the MATLAB computing environment have dominated development in recent years. Included are extensions to the desktop, major enhancements to the object and graphics systems, support for parallel computing and GPUs, and the ``Live Editor'', which combines programs, descriptive text, output and graphics into a single interactive, formatted document. Today there are over 60 Toolboxes, many programmed in the MATLAB language, providing extended capabilities in specialized technical fields.},
  keywords = {linear algebra,MATLAB,matrix computation},
  file = {/home/pierre/Zotero/storage/8EKDXY72/Moler and Little - 2020 - A history of MATLAB.pdf}
}

@inproceedings{molzberger_aesthetics_1983,
  title = {Aesthetics and Programming},
  booktitle = {Proceedings of the {{SIGCHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  author = {Molzberger, Peter},
  year = {1983},
  month = dec,
  series = {{{CHI}} '83},
  pages = {247--250},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/800045.801620},
  urldate = {2021-10-15},
  abstract = {The paper at hand is based on interviews with a total of eight so-called "superprogrammers", software people, who show exceptional performance quantitatively as well as qualitatively. It becomes apparent that these people do not experience programming as a purely rational activity, but that for them it possesses strong intuitive components. Programs are visualized wholistically as three-dimensional structures. In this, aesthetics plays a special part: the structure must please optically, be elegant\textemdash then it is functionally acceptable. Logical mistakes manifest themselves as interfering with this aesthetics. The author suggests that in the area of software as well there is something like the absolute beautiful: perfect solutions with a maximum of transparence beyond all rivaling design parameters. He has a feeling that the faculties described in this paper are widespread and may open up a totally new dimension in programming.},
  isbn = {978-0-89791-121-4}
}

@book{montfort_10_2014,
  title = {10 {{PRINT CHR}}\$(205.5+{{RND}}(1)); : {{GOTO}} 10},
  shorttitle = {10 {{PRINT CHR}}\$(205.5+{{RND}}(1));},
  author = {Montfort, Nick and Baudoin, Patsy and Bell, John and Bogost, Ian and Douglass, Jeremy},
  year = {2014},
  month = aug,
  edition = {Illustrated edition},
  publisher = {{The MIT Press}},
  abstract = {A single line of code offers a way to understand the cultural context of computing.This book takes a single line of code\textemdash the extremely concise BASIC program for the Commodore 64 inscribed in the title\textemdash and uses it as a lens through which to consider the phenomenon of creative computing and the way computer programs exist in culture. The authors of this collaboratively written book treat code not as merely functional but as a text\textemdash in the case of 10 PRINT, a text that appeared in many different printed sources\textemdash that yields a story about its making, its purpose, its assumptions, and more. They consider randomness and regularity in computing and art, the maze in culture, the popular BASIC programming language, and the highly influential Commodore 64 computer.},
  isbn = {978-0-262-52674-6},
  langid = {english}
}

@misc{montfort_taper_2019,
  title = {Taper},
  author = {Montfort, Nick},
  year = {2019},
  journal = {Taper},
  urldate = {2022-04-29},
  abstract = {A twice-yearly journal for tiny computational poems, published by Bad Quarto},
  howpublished = {https://taper.badquar.to/},
  langid = {english},
  file = {/home/pierre/Zotero/storage/2A6B32RZ/taper.badquar.to.html}
}

@article{moor_three_1978,
  title = {Three {{Myths}} of {{Computer Science}}},
  author = {Moor, James H.},
  year = {1978},
  journal = {British Journal for the Philosophy of Science},
  volume = {29},
  number = {3},
  pages = {213--222},
  doi = {10.1093/bjps/29.3.213},
  file = {/home/pierre/Zotero/storage/H4TDNUH9/MOOTMO-2.html}
}

@article{moore_brain_2022,
  title = {The {{Brain Is Deeper Than}} the {{Sea}}: {{Sea}} and {{Spar Between}}, {{Computational Stuplimity}}, and {{Fragmentation}}},
  shorttitle = {The {{Brain Is Deeper Than}} the {{Sea}}},
  author = {Moore, Nathanael},
  year = {2022},
  journal = {Digital Humanities Quarterly},
  volume = {016},
  number = {1},
  issn = {1938-4122},
  file = {/home/pierre/Zotero/storage/CXHVS2KK/000599.html}
}

@book{moreau_computer_1984,
  title = {The Computer Comes of Age: The People, the Hardware, and the Software},
  shorttitle = {The Computer Comes of Age},
  author = {Moreau, Rene{\`I}},
  year = {1984},
  series = {{{MIT Press}} Series in the History of Computing},
  publisher = {{MIT Press}},
  address = {{Cambridge, Mass}},
  isbn = {978-0-262-13194-0},
  langid = {english},
  keywords = {Computers,History,Programming languages (Electronic computers)}
}

@article{morgan_ibm_1982,
  title = {Of {{IBM}}, {{Operating Systems}} and {{Rosetta Stones}}},
  author = {Morgan, Chris},
  year = {1982},
  month = jan,
  journal = {Byte Magazine Volume 07 Number 01 - The IBM Personal Computer},
  urldate = {2021-11-19},
  abstract = {Features p.26 The Atari Tutorial, Part 5: Scrolling [author Chris Crawford] Coarse and fine scrolling, both horizontally and vertically, let the display screen become a window for viewing large amounts of data. p.36 A Closer Look at the IBM Personal Computer [author Gregg Williams] The Personal Computer is a versatile microcomputer that can be used in almost any application. p.72 Analog Interfacing In the Real World by [author Steve Ciarcia] Learn how to design and build economical analog interfaces. p.100 MIKBUG and the TRS-80, Part 2: A File Transfer and Debugging Package [author Robert Labenski] Use your TRS-80 as a file-transfer terminal and debugging monitor for a 6800 system. p.132 User's Column: Operating Systems, Languages, Statistics, Pirates, and the Lone Wolf Jerry Pournelle Straight talk on a variety of new products from a hard-to-please computer user. p.160 Build a Joystick A-to-D Converter for the TRS-80 Model I or III, Second In a Series [author William Barden, Jr.] A hardware/software project to make your TRS-80 "sensitive" to the analog world. p.190 Troubleshooting with Electronic Signatures [author Kenneth M. Piggott] A "free-running'" microprocessor can help to fix a malfunctioning computer system. p.216 Memory Expansion for the ZX-80 [author Hilton K. Ernde] Upgrade your Sinclair ZX-80 for under \$200 with a 16 K-byte memory-expansion project. p.239 An 8080-Based Remote Appliance Controller [author David C. Staehlin] BSR X-10 strikes again. p.304 Clocked Interrupts for the COSMAC Elf [author Gary H. Price] Hardware and software provide video-display and variable-period interrupts. p.344 COSMAC EPROM Programmer [author Dan Rubis] How to build a low-cost EPROM programmer based on an RCA 1802 microprocessor. p.366 An Apple Talks with the Deaf [author Ned W. Rhodes] With the hardware and software described here. you can pick up the phone and wish a deaf friend a good day. p.397 An Effective Text-Compression Algorithm [author David Cortesi] Reduce the size of text files by identifying common pairs of letters. p.410 Structured Programming In BASIC [author Mark Sobell] An introduction to the principles of structured programming with examples in Cromemco 32 K Structured BASIC. p.420 The GEOSAT Program [author Steve Emmett] How to tell if your location is suitable for a satellite-receiving antenna. Reviews p.123 The RCA VP-3301 Data Terminal [author Tim Daneliuk] p.332 SD Systems' Z80 Starter Kit [author Wayne Angevine] Nucleus p.6 Editorial: Of IBM, Operating Systems, and Rosetta Stones p.14 Letters p.114, 206, 433 Technical Forum: Floppy-Disk Performance; Analyze Audio by Visualizing; Z80 Starting Address. One Jump Further p.118 Education Forum: AC Motor Control: Simple Algorithms and Hardware p.186 Programming Quickies: Thirty More Days to a Faster Input p.234, 324, 436 System Notes: Accidental Reset Protection for the Apple II; Add a Peripheral Interface Adapter to Your Apple II; SOFTIM, A Software Timer p.296 BYTELINES p.387 Books Received p.388 Event Queue p.393 Clubs and Newsletters p.394 Software Received p.404 Ask BYTE p.416 Product Description: CMOS: Memory with a Future. Ideas Behind CompuPro's RAM 17 p.440 What's New? p.494 Unclassified Ads p.495 Reader Service p.496 BOMB, BOMB Results},
  langid = {english},
  keywords = {disk}
}

@misc{morgan-marr_dm_2003,
  title = {{{DM}}'s {{Esoteric Programming Languages}} - {{Chef}}},
  author = {{Morgan-Marr}, David},
  year = {2003},
  journal = {Chef},
  urldate = {2022-09-20},
  howpublished = {https://www.dangermouse.net/esoteric/chef.html},
  file = {/home/pierre/Zotero/storage/5W6PT6PP/chef.html}
}

@misc{morin_mactech_1999,
  title = {{{MacTech The}} Journal of {{Apple}} Technology.},
  author = {Morin, Rich and Brown, Vicki},
  year = {1999},
  urldate = {2022-04-02},
  file = {/home/pierre/Zotero/storage/WLDPPIGT/index.html}
}

@misc{moss_beautifulalgorithms_2022,
  title = {{{BeautifulAlgorithms}}.Jl},
  author = {Moss, Robert},
  year = {2022},
  month = apr,
  urldate = {2022-04-14},
  abstract = {Concise and beautiful algorithms written in Julia},
  keywords = {algorithms,decision-making-under-uncertainty,julia,machine-learning,neural-network,optimization,quine,regression,reinforcement-learning,sorting}
}

@article{mullet_general_2018a,
  title = {A {{General Critical Discourse Analysis Framework}} for {{Educational Research}}},
  author = {Mullet, Dianna R.},
  year = {2018},
  month = may,
  journal = {Journal of Advanced Academics},
  volume = {29},
  number = {2},
  pages = {116--142},
  publisher = {{SAGE Publications}},
  issn = {1932-202X},
  doi = {10.1177/1932202X18758260},
  urldate = {2022-02-21},
  abstract = {Critical discourse analysis (CDA) is a qualitative analytical approach for critically describing, interpreting, and explaining the ways in which discourses construct, maintain, and legitimize social inequalities. CDA rests on the notion that the way we use language is purposeful, regardless of whether discursive choices are conscious or unconscious. CDA takes a number of different approaches and incorporates a variety of methods that depend on research goals and theoretical perspectives. This methodological guide presents a general CDA analytic framework and illustrates the application of that framework to a systematic literature review of CDA studies in education. CDA research studies are no less likely than other forms of scholarly research to reproduce ideological assumptions; qualitative rigor and trustworthiness are discussed.},
  langid = {english},
  keywords = {Discourse Analysis,Educational Philosophy,Educational Practices,Educational Research,Fundamental Concepts,Literature Reviews,Program Implementation,Qualitative Research,Research Methodology},
  file = {/home/pierre/Zotero/storage/2JAJCME9/eric.ed.gov.html}
}

@book{mumford_technics_1934,
  title = {Technics {{And Civilization}}},
  author = {Mumford, Lewis},
  year = {1934},
  urldate = {2022-12-03},
  abstract = {Book Source: Digital Library of India Item 2015.49974 dc.contributor.author: Lewis Mumford dc.date.accessioned: 2015-06-26T14:59:17Z dc.date.available: 2015-06-26T14:59:17Z dc.date.digitalpublicationdate: 2009-06-00 dc.date.citation: 1934 dc.identifier.barcode: 99999990242480 dc.identifier.origpath: /data4/upload/0095/284 dc.identifier.copyno: 1 dc.identifier.uri: http://www.new.dli.ernet.in/handle/2015/49974 dc.description.scanningcentre: Banasthali University dc.description.main: 1 dc.description.tagged: 0 dc.description.totalpages: 531 dc.format.mimetype: application/pdf dc.language.iso: English dc.publisher.digitalrepublisher: Digital Library Of India dc.publisher: Lowe And Brydone Ltd, London. dc.rights: Copyright Permitted dc.source.library: Banasthali University dc.subject.classification: Technology And Civilization. dc.subject.classification: Industrial Arts--history. dc.title: Technics And Civilization},
  langid = {english},
  keywords = {Banasthali}
}

@book{munroe_good_2012,
  title = {Good {{Code}}},
  author = {Munroe, Randall},
  year = {2012},
  urldate = {2021-01-28}
}

@misc{muratori_semantic_2014,
  title = {Semantic {{Compression}}},
  author = {Muratori, Casey},
  year = {2014},
  journal = {Semantic Compression},
  urldate = {2023-03-21},
  abstract = {An introduction to the idea that code should be approached with a mindset towards compressing it semantically, rather than orienting it around objects.},
  howpublished = {https://caseymuratori.com/blog\_0015},
  langid = {english},
  file = {/home/pierre/Zotero/storage/8VS23W3F/blog_0015.html}
}

@book{murray_hamlet_1998,
  title = {Hamlet on the {{Holodeck}}: {{The Future}} of {{Narrative}} in {{Cyberspace}}},
  shorttitle = {Hamlet on the {{Holodeck}}},
  author = {Murray, Janet H.},
  year = {1998},
  month = jul,
  publisher = {{MIT Press}},
  address = {{Cambridge, MA, USA}},
  isbn = {978-0-262-63187-7},
  langid = {english}
}

@book{nabokov_lectures_2017,
  title = {Lectures on {{Literature}}},
  author = {Nabokov, Vladimir},
  year = {2017},
  month = dec,
  publisher = {{Houghton Mifflin Harcourt}},
  abstract = {The acclaimed author of Lolita offers unique insight into works by James Joyce, Franz Kafka, Jane Austen, and others\textemdash with an introduction by John Updike. ~ In the 1940s, when Vladimir Nabokov first embarked on his academic career in the United States, he brought with him hundreds of original lectures on the authors he most admired. For two decades those lectures served as the basis for Nabokov's teaching, first at Wellesley and then at Cornell, as he introduced undergraduates to the delights of great fiction. ~ This volume collects Nabokov's famous lectures on Western European literature, with analysis and commentary on Charles Dickens's Bleak House, Gustav Flaubert's Madam Bovary, Marcel Proust's The Walk by Swann's Place, Robert Louis Stevenson's ``The Strange Case of Dr. Jekyll and Mr. Hyde,'' and other works. This volume also includes photographic reproductions of Nabokov's original notes, revealing his own edits, underlined passages, and more. ~Edited and with a Foreword by Fredson BowersIntroduction by John Updike},
  googlebooks = {P9JBDwAAQBAJ},
  isbn = {978-0-547-54132-7},
  langid = {english},
  keywords = {Literary Criticism / Books \& Reading,Literary Criticism / European / General,Literary Criticism / Modern / 19th Century}
}

@article{naur_programming_1985,
  title = {Programming as Theory Building},
  author = {Naur, Peter},
  year = {1985},
  month = may,
  journal = {Microprocessing and Microprogramming},
  volume = {15},
  number = {5},
  pages = {253--261},
  issn = {0165-6074},
  doi = {10.1016/0165-6074(85)90032-8},
  urldate = {2022-04-02},
  abstract = {Some views on programming, taken in a wide sense and regarded as a human activity, are presented. Accepting that programs will not only have to be designed and produced, but also modified so as to cater for changing demands, it is concluded that the proper, primary aim of programming is, not to produce programs, but to have the programmers build theories of the manner in which the problems at hand are solved by program execution. The implications of such a view of programming on matters such as program life and modification, system development methods, and the professional status of programmers, are discussed.},
  langid = {english},
  keywords = {General,General Terms,Human Factors,programming methodology,programming psychology,Theory},
  file = {/home/pierre/Zotero/storage/KWYI4KS4/0165607485900328.html}
}

@article{neville-neil_code_2003,
  title = {Code {{Spelunking}}: {{Exploring Cavernous Code Bases}}: {{Code}} Diving through Unfamiliar Source Bases Is Something We Do Far More Often than Write New Code from Scratch--Make Sure You Have the Right Gear for the Job.},
  shorttitle = {Code {{Spelunking}}},
  author = {{Neville-Neil}, George V.},
  year = {2003},
  month = sep,
  journal = {Queue},
  volume = {1},
  number = {6},
  pages = {42--48},
  issn = {1542-7730},
  doi = {10.1145/945131.945136},
  urldate = {2023-03-21},
  abstract = {Try to remember your first day at your first software job. Do you recall what you were asked to do, after the human resources people were done with you? Were you asked to write a piece of fresh code? Probably not. It is far more likely that you were asked to fix a bug, or several, and to try to understand a large, poorly documented collection of source code. Of course, this doesn't just happen to new graduates; it happens to all of us whenever we start a new job or look at a new piece of code. With experience we all develop a set of techniques for working with large, unfamiliar source bases. This is what I call code spelunking.},
  file = {/home/pierre/Zotero/storage/NB3RQKVC/Neville-Neil - 2003 - Code Spelunking Exploring Cavernous Code Bases C.pdf}
}

@book{newell_information_1964,
  title = {Information {{Processing Language-V Manual}}},
  author = {Newell, Allen and Tonge, F. M. and Feigenbaum, Edward A. and Green Jr., Bert F. and Mealy, George H.},
  year = {1964},
  edition = {The Rand Corporation},
  publisher = {{Prentice-Hall}}
}

@misc{nielsen_lisp_2012,
  title = {Lisp as the {{Maxwell}}'s Equations of Software \textbackslash textbar {{DDI}}},
  author = {Nielsen, Michael},
  year = {2012},
  month = nov,
  urldate = {2022-04-15},
  langid = {american},
  file = {/home/pierre/Zotero/storage/4RPFUEK4/lisp-as-the-maxwells-equations-of-software.html}
}

@misc{nielsen_working_2017,
  title = {Working {{Notes}} on {{Chalktalk}}},
  author = {Nielsen, Michael},
  year = {2017},
  month = sep,
  journal = {Cognitive Medium},
  urldate = {2022-10-11},
  howpublished = {https://cognitivemedium.com/interfaces-1/index.html},
  file = {/home/pierre/Zotero/storage/JJ7MAGSP/index.html}
}

@incollection{nilsson_early_2009,
  title = {{{EARLY EXPLORATIONS}}: {{1950S AND 1960S}}},
  shorttitle = {{{EARLY EXPLORATIONS}}},
  booktitle = {The {{Quest}} for {{Artificial Intelligence}}},
  editor = {Nilsson, Nils J.},
  year = {2009},
  pages = {47--48},
  publisher = {{Cambridge University Press}},
  address = {{Cambridge}},
  doi = {10.1017/CBO9780511819346.004},
  urldate = {2022-08-03},
  abstract = {If machines are to become intelligent, they must, at the very least, be able to do the thinking-related things that humans can do. The first steps then in the quest for artificial intelligence involved identifying some specific tasks thought to require intelligence and figuring out how to get machines to do them. Solving puzzles, playing games such as chess and checkers, proving theorems, answering simple questions, and classifying visual images were among some of the problems tackled by the early pioneers during the 1950s and early 1960s. Although most of these were laboratory-style, sometimes called ``toy,'' problems, some real-world problems of commercial importance, such as automatic reading of highly stylized magnetic characters on bank checks and language translation, were also being attacked. (As far as I know, Seymour Papert was the first to use the phrase ``toy problem.'' At a 1967 AI workshop I attended in Athens, Georgia, he distinguished among tau or ``toy'' problems, rho or real-world problems, and theta or ``theory'' problems in artificial intelligence. This distinction still serves us well today.)In this part, I'll describe some of the first real efforts to build intelligent machines. Some of these were discussed or reported on at conferences and symposia \textendash{} making these meetings important milestones in the birth of AI. I'll also do my best to explain the underlying workings of some of these early AI programs.},
  isbn = {978-0-521-11639-8},
  file = {/home/pierre/Zotero/storage/XGEKQJAG/12DA6236F73F21CF41F7B12E4CE7F899.html}
}

@book{nilsson_quest_2009,
  title = {The {{Quest}} for {{Artificial Intelligence}}},
  author = {Nilsson, Nils J.},
  year = {2009},
  publisher = {{Cambridge University Press}},
  address = {{Cambridge}},
  doi = {10.1017/CBO9780511819346},
  urldate = {2022-09-26},
  abstract = {Artificial intelligence (AI) is a field within computer science that is attempting to build enhanced intelligence into computer systems. This book traces the history of the subject, from the early dreams of eighteenth-century (and earlier) pioneers to the more successful work of today's AI engineers. AI is becoming more and more a part of everyone's life. The technology is already embedded in face-recognizing cameras, speech-recognition software, Internet search engines, and health-care robots, among other applications. The book's many diagrams and easy-to-understand descriptions of AI programs will help the casual reader gain an understanding of how these and other AI systems actually work. Its thorough (but unobtrusive) end-of-chapter notes containing citations to important source materials will be of great use to AI scholars and researchers. This book promises to be the definitive history of a field that has captivated the imaginations of scientists, philosophers, and writers for centuries.},
  isbn = {978-0-521-11639-8},
  file = {/home/pierre/Zotero/storage/DQCBHF9J/32C727961B24223BBB1B3511F44F343E.html}
}

@article{nolte_you_2018,
  title = {You {{Hacked}} and {{Now What}}? - {{Exploring Outcomes}} of a {{Corporate Hackathon}}},
  shorttitle = {You {{Hacked}} and {{Now What}}?},
  author = {Nolte, Alexander and {Pe-Than}, Ei Pa Pa and Filippova, Anna and Bird, Christian and Scallen, Steve and Herbsleb, James D.},
  year = {2018},
  month = nov,
  journal = {Proceedings of the ACM on Human-Computer Interaction},
  volume = {2},
  number = {CSCW},
  pages = {129:1--129:23},
  doi = {10.1145/3274398},
  urldate = {2021-11-19},
  abstract = {Time bounded events such as hackathons, data dives, codefests, hack-days, sprints or edit-a-thons have increasingly gained attention from practitioners and researchers. Existing research, however, has mainly focused on the event itself, while potential outcomes of hackathons have received limited attention. Furthermore, most research around hackathons focuses on collegiate or civic events. Research around hackathons internal to tech companies, which are nearly ubiquitous, and present significant organizational, cultural, and managerial challenges, remains scarce. In this paper we address this gap by presenting findings from a case study of five teams which participated in a large scale corporate hackathon. Most team members voiced their intentions to continue the projects their worked on during the hackathon, but those whose projects did get continued were characterized by meticulous preparation, a focus on executing a shared vision during the hackathon, extended dissemination activities afterwards and a fit to existing product lines. Such teams were led by individuals who perceived the hackathon as an opportunity to bring their idea to life and advance their careers, and who recruited teams who had a strong interest in the idea and in learning the skills necessary to contribute efficiently. Our analysis also revealed that individual team members perceived hackathon participation to have positive effects on their career parts, networks and skill development.},
  keywords = {hackathon,innovation,learning,project sustainability},
  file = {/home/pierre/Zotero/storage/ZDXWX77U/Nolte et al. - 2018 - You Hacked and Now What - Exploring Outcomes of a.pdf}
}

@inproceedings{norick_effects_2010,
  title = {Effects of the Number of Developers on Code Quality in Open Source Software: A Case Study},
  shorttitle = {Effects of the Number of Developers on Code Quality in Open Source Software},
  booktitle = {Proceedings of the 2010 {{ACM-IEEE International Symposium}} on {{Empirical Software Engineering}} and {{Measurement}}},
  author = {Norick, Brandon and Krohn, Justin and Howard, Eben and Welna, Ben and Izurieta, Clemente},
  year = {2010},
  month = sep,
  series = {{{ESEM}} '10},
  pages = {1},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1852786.1852864},
  urldate = {2021-10-15},
  abstract = {Eleven open source software projects were analyzed to determine if the number of committing developers impacts code quality. We use cyclomatic complexity, lines of code per function, comment density, and maximum nesting as surrogate measures of code quality. We find no significant evidence to suggest that the number of committing developers affects the quality of software.},
  isbn = {978-1-4503-0039-1},
  keywords = {code quality,number of developers,open source software}
}

@misc{norvig_design_1998,
  title = {Design {{Patterns}} in {{Dynamic Languages}}},
  author = {Norvig, Peter},
  year = {1998},
  month = mar,
  urldate = {2023-01-18}
}

@misc{norvig_teach_1998,
  title = {Teach {{Yourself Programming}} in {{Ten Years}}},
  author = {Norvig, Peter},
  year = {1998},
  month = jul,
  urldate = {2022-10-25},
  howpublished = {https://norvig.com/21-days.html},
  file = {/home/pierre/Zotero/storage/95DHWJR5/21-days.html}
}

@book{oberkampf_verification_2010,
  title = {Verification and {{Validation}} in {{Scientific Computing}}},
  author = {Oberkampf, William L. and Roy, Christopher J.},
  year = {2010},
  month = oct,
  publisher = {{Cambridge University Press}},
  abstract = {Advances in scientific computing have made modelling and simulation an important part of the decision-making process in engineering, science, and public policy. This book provides a comprehensive and systematic development of the basic concepts, principles, and procedures for verification and validation of models and simulations. The emphasis is placed on models that are described by partial differential and integral equations and the simulations that result from their numerical solution. The methods described can be applied to a wide range of technical fields, from the physical sciences, engineering and technology and industry, through to environmental regulations and safety, product and plant safety, financial investing, and governmental regulations. This book will be genuinely welcomed by researchers, practitioners, and decision makers in a broad range of fields, who seek to improve the credibility and reliability of simulation results. It will also be appropriate either for university courses or for independent study.},
  isbn = {978-1-139-49176-1},
  langid = {english},
  keywords = {Computers / General,Mathematics / Differential Equations / General,Mathematics / Discrete Mathematics,Mathematics / Numerical Analysis}
}

@book{okeefe_craft_1990,
  title = {The {{Craft}} of {{Prolog}}},
  author = {O'Keefe, Richard},
  editor = {Shapiro, Ehud Y.},
  year = {1990},
  month = jun,
  series = {Logic {{Programming}}},
  publisher = {{MIT Press}},
  address = {{Cambridge, MA, USA}},
  abstract = {The emphasis in The Craft of Prolog is on using Prolog effectively. It presents a loose collection of topics that build on and elaborate concepts learned in a first course.},
  isbn = {978-0-262-15039-2},
  langid = {english}
}

@article{oliveira_evaluating_2020,
  title = {Evaluating {{Code Readability}} and {{Legibility}}: {{An Examination}} of {{Human-centric Studies}}},
  shorttitle = {Evaluating {{Code Readability}} and {{Legibility}}},
  author = {Oliveira, Delano and Bruno, Reydne and Madeiral, Fernanda and Filho, F. C.},
  year = {2020},
  journal = {undefined},
  doi = {10.1109/ICSME46990.2020.00041},
  urldate = {2022-12-05},
  abstract = {An academic search engine that utilizes artificial intelligence methods to provide highly relevant results and novel tools to filter them with ease.},
  langid = {english},
  file = {/home/pierre/Zotero/storage/UMD54FM3/Oliveira et al. - 2020 - Evaluating Code Readability and Legibility An Exa.pdf;/home/pierre/Zotero/storage/U7WLCAJ7/7b5ccc08d2e30be8b3f25ebe5a292a9d6b3951d9.html}
}

@article{oliveira_systematic_2022,
  title = {A {{Systematic Literature Review}} on the {{Impact}} of {{Formatting Elements}} on {{Program Understandability}}},
  author = {Oliveira, Delano and Bruno, Reydne and Madeiral, Fernanda and Masuhara, Hidehiko and Filho, F. C.},
  year = {2022},
  journal = {undefined},
  doi = {10.2139/ssrn.4182156},
  urldate = {2022-12-02},
  abstract = {Context: Software programs can be written in different but functionally equivalent ways. Even though previous research has compared specific formatting elements to find out which alternatives affect code legibility, seeing the bigger picture of what makes code more or less legible is challenging. Goal: We aim to find which formatting elements have been investigated in empirical studies and which ones were found to be more legible for human subjects. Method: We conduct a systematic literature review and identify 12 papers that compare alternative formatting elements. We organize these formatting elements using a card sorting method. Results: We identify 29 formatting elements, which are about formatting styles, spacing, block delimiters, long or complex code lines, and word boundary styles. While some formatting elements were found to be statistically better than other equivalent ones, e.g., camel case over underscore, others were not, e.g., pretty-printed vs. disrupted layout. For some alternatives, divergent results were found, e.g., one study found a significant difference in favor of 2-space indentation, but two other studies did not find it. Conclusion: Our results can serve as guidelines for developers in choosing ways to format their code and help researchers in developing, e.g., recommendation systems, to aid developers to make their code more legible.},
  langid = {english},
  file = {/home/pierre/Zotero/storage/3CLNQMSB/Oliveira et al. - 2022 - A Systematic Literature Review on the Impact of Fo.pdf;/home/pierre/Zotero/storage/U3UJBIAM/e62e22a05e97f8335a13b72f212748f887e4b1bf.html}
}

@misc{olsson_alt_2005,
  title = {[Alt.Folklore.Computers] {{Re}}: {{Cobol}}},
  shorttitle = {[Alt.Folklore.Computers] {{Re}}},
  author = {Olsson, Magnus},
  year = {2005},
  month = dec,
  urldate = {2022-06-06},
  howpublished = {https://web.archive.org/web/20051222124048/http://baetzler.de/humor/cobol.html}
}

@article{oman_computer_2018,
  title = {Computer {{Software}} as {{Copyrightable Subject Matter}}: {{Oracle V}}. {{Google}}, {{Legislative Intent}}, and the {{Scope}} of {{Rights}} in {{Digital Works}}},
  shorttitle = {Computer {{Software}} as {{Copyrightable Subject Matter}}},
  author = {Oman, Ralph},
  year = {2018},
  journal = {Harvard Journal of Law and Technology},
  volume = {31},
  number = {Special Issue Spring 2018},
  pages = {639--652},
  urldate = {2021-01-28},
  abstract = {Semantic Scholar extracted view of \&quot;Computer Software as Copyrightable Subject Matter: Oracle V. Google, Legislative Intent, and the Scope of Rights in Digital Works\&quot; by Ralph Oman},
  langid = {english},
  file = {/home/pierre/Zotero/storage/EVKDFSDW/3b3011119efe6e938e0ad1cb420a0efacf221766.html}
}

@inproceedings{oman_taxonomy_1990,
  title = {A Taxonomy for Programming Style},
  booktitle = {Proceedings of the 1990 {{ACM}} Annual Conference on {{Cooperation}}},
  author = {Oman, Paul W. and Cook, Curtis R.},
  year = {1990},
  month = jan,
  series = {{{CSC}} '90},
  pages = {244--250},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/100348.100385},
  urldate = {2022-11-11},
  abstract = {Programming style guidelines, style analyzers, and code formatters have been developed without a solid empirical or theoretical basis. In this paper we provide: (1) a justification for developing a programming style taxonomy, (2) an operational style taxonomy, (3) example applications of the taxonomy illustrating the diverse and sometimes contradictory nature of programming style guidelines, and (4) a discussion on how the taxonomy can be used to further teaching and research in programming style. The taxonomy provides a context for understanding and identifying specific style factors and empirical studies necessary to determine the effects of style on program comprehension. The results of this paper have a direct impact on programming instruction, programming standards, automated style analyzers, and code formatting tools like pretty-printers and syntax directed editors.},
  isbn = {978-0-89791-348-5},
  file = {/home/pierre/Zotero/storage/4PE38KFH/Oman and Cook - 1990 - A taxonomy for programming style.pdf}
}

@article{oman_typographic_1990,
  title = {Typographic Style Is More than Cosmetic},
  author = {Oman, Paul W. and Cook, Curtis R.},
  year = {1990},
  month = may,
  journal = {Communications of the ACM},
  volume = {33},
  number = {5},
  pages = {506--520},
  issn = {0001-0782},
  doi = {10.1145/78607.78611},
  urldate = {2022-12-02},
  abstract = {There is disagreement about the role and importance of typographic style (source code formatting and commenting) in program comprehension. Results from experiments and opinions in programming style books are mixed. This article presents principles of typographic style consistent and compatible with the results of program comprehension studies. Four experiments demonstrate that the typographic style principles embodied in the book format significantly aid program comprehension and reduce maintenance effort.\textemdash Authors' Abstract},
  file = {/home/pierre/Zotero/storage/Q8GFQ55Q/Oman and Cook - 1990 - Typographic style is more than cosmetic.pdf}
}

@book{oneil_primer_2019,
  title = {A {{Primer}} for {{Computational Biology}}},
  author = {O'Neil, Shawn T.},
  year = {2019},
  month = jun,
  publisher = {{Oregon State University}},
  urldate = {2022-04-02},
  langid = {english},
  file = {/home/pierre/Zotero/storage/DCN3XGSD/computationalbiology.html}
}

@book{ong_orality_2012,
  title = {Orality and {{Literacy}}: 30th {{Anniversary Edition}}},
  shorttitle = {Orality and {{Literacy}}},
  author = {Ong, Walter J.},
  year = {2012},
  month = sep,
  edition = {Third},
  publisher = {{Routledge}},
  address = {{London}},
  doi = {10.4324/9780203103258},
  abstract = {Walter J. Ong's classic work provides a fascinating insight into the social effects of oral, written, printed and electronic technologies, and their impact on philosophical, theological, scientific and literary thought. This thirtieth anniversary edition \textendash{} coinciding with Ong's centenary year \textendash{} reproduces his best-known and most influential book in full and brings it up to date with two new exploratory essays by cultural writer and critic John Hartley. Hartley provides: A scene-setting chapter that situates Ong's work within the historical and disciplinary context of post-war Americanism and the rise of communication and media studies; A closing chapter that follows up Ong's work on orality and literacy in relation to evolving media forms, with a discussion of recent criticisms of Ong's approach, and an assessment of his concept of the `evolution of consciousness'; Extensive references to recent scholarship on orality, literacy and the study of knowledge technologies, tracing changes in how we know what we know. These illuminating essays contextualize Ong within recent intellectual history, and display his work's continuing force in the ongoing study of the relationship between literature and the media, as well as that of psychology, education and sociological thought.},
  isbn = {978-0-203-10325-8}
}

@book{oram_beautiful_2007,
  title = {Beautiful {{Code}}: {{Leading Programmers Explain How They Think}}},
  shorttitle = {Beautiful {{Code}}},
  editor = {Oram, Andy and Wilson, Greg},
  year = {2007},
  month = jul,
  edition = {1st edition},
  publisher = {{O'Reilly Media}},
  address = {{Beijing ; Sebastapol, Calif}},
  abstract = {How do the experts solve difficult problems in software development? In this unique and insightful book, leading computer scientists offer case studies that reveal how they found unusual, carefully designed solutions to high-profile projects. You will be able to look over the shoulder of major coding and design experts to see problems through their eyes. This is not simply another design patterns book, or another software engineering treatise on the right and wrong way to do things. The authors think aloud as they work through their project's architecture, the tradeoffs made in its construction, and when it was important to break rules. Beautiful Code is an opportunity for master coders to tell their story. All author royalties will be donated to Amnesty International. tion.},
  isbn = {978-0-596-51004-6},
  langid = {english}
}

@article{osborne_aesthetic_1977,
  title = {The {{Aesthetic Concept}} of {{Craftsmanship}}},
  author = {Osborne, Harold},
  year = {1977},
  journal = {British Journal of Aesthetics},
  volume = {17},
  number = {2},
  pages = {138},
  doi = {10.1093/bjaesthetics/17.2.138}
}

@article{osborne_mathematical_1984,
  title = {{{MATHEMATICAL BEAUTY AND PHYSICAL SCIENCE}}},
  author = {Osborne, Harold},
  year = {1984},
  month = apr,
  journal = {The British Journal of Aesthetics},
  volume = {24},
  number = {4},
  pages = {291--300},
  issn = {0007-0904},
  doi = {10.1093/bjaesthetics/24.4.291},
  urldate = {2023-03-29},
  file = {/home/pierre/Zotero/storage/V8UQ2WKA/Osborne - 1984 - MATHEMATICAL BEAUTY AND PHYSICAL SCIENCE.pdf;/home/pierre/Zotero/storage/8YXTIYFG/28880.html}
}

@article{osborne_notes_1964,
  title = {{{NOTES ON THE AESTHETICS OF CHESS AND THE CONCEPT OF INTELLECTUAL BEAUTY}}},
  author = {Osborne, Harold},
  year = {1964},
  month = apr,
  journal = {The British Journal of Aesthetics},
  volume = {4},
  number = {2},
  pages = {160--163},
  issn = {0007-0904},
  doi = {10.1093/bjaesthetics/4.2.160},
  urldate = {2023-03-29},
  file = {/home/pierre/Zotero/storage/QAEFAIIP/Osborne - 1964 - NOTES ON THE AESTHETICS OF CHESS AND THE CONCEPT O.pdf;/home/pierre/Zotero/storage/CCMQ3WNB/98684.html}
}

@article{ousterhout_scripting_1998,
  title = {Scripting: {{Higher-Level Programming}} for the 21st {{Century}}},
  shorttitle = {Scripting},
  author = {Ousterhout, John K.},
  year = {1998},
  month = mar,
  journal = {Computer},
  volume = {31},
  number = {3},
  pages = {23--30},
  issn = {0018-9162},
  doi = {10.1109/2.660187},
  urldate = {2022-04-02},
  abstract = {A fundamental change is occurring in the way people write computer programs, away from system programming languages such as C or C++ to scripting languages such as Perl or Tcl. Although many people are participating in the change, few realize that the change is occurring and even fewer know why it is happening. This article explains why scripting languages will handle many of the programming tasks in the next century better than system programming languages. System programming languages were designed for building data structures and algorithms from scratch, starting from the most primitive computer elements. Scripting languages are designed for gluing: They assume the existence of a set of powerful components and are intended primarily for connecting components. System programming languages are strongly typed to help manage complexity, while scripting languages are typeless to simplify connections among components and provide rapid application development. Scripting languages and system programming languages are complementary, and are typically used together in component frameworks. However, several recent trends have greatly expanded the applicability of scripting languages. These trends will continue over the next decade, with more and more new applications written entirely in scripting languages and system programming languages used primarily for creating components.},
  file = {/home/pierre/Zotero/storage/BP2HRBGA/Ousterhout - 1998 - Scripting Higher-Level Programming for the 21st C.pdf}
}

@book{paloque-berges_poetique_2009,
  title = {{Po\'etique des codes sur le r\'eseau informatique}},
  author = {{Paloque-Berg{\`e}s}, Camille},
  year = {2009},
  publisher = {{Archives contemporaines}},
  abstract = {L'ordinateur est devenu un terrain de jeu exp\'erimental o\`u les instructions des codes informatiques ne sont plus simplement outil mais sujet et objet d'une approche esth\'etique des mondes num\'eriques. Cette \'etude entend mettre \`a jour les syst\`emes de r\`egles de lectures de ces \'ecritures hybrides o\`u l'exercice de style le dispute \`a l'exercice conceptuel.\textendash [Memento].},
  isbn = {978-2-914610-70-4},
  langid = {french}
}

@article{pannabecker_diderot_1994,
  title = {Diderot, the {{Mechanical Arts}}, and the {{Encyclopdie}}: {{In Search}} of the {{Heritage}} of {{Technology Education}}},
  shorttitle = {Diderot, the {{Mechanical Arts}}, and the {{Encyclopdie}}},
  author = {Pannabecker, John R.},
  year = {1994},
  journal = {Journal of Technology Education},
  volume = {6},
  pages = {45--57},
  abstract = {This paper contributes to a history of technology education by focusing on one of the most ambitious attempts in early modern history to describe technological knowledge \textemdash{} Diderot's Encyclopdie (Diderot \& d'Alembert, 17511772)},
  file = {/home/pierre/Zotero/storage/BI9GQ5IE/Pannabecker - 1994 - Diderot, the Mechanical Arts, and the Encyclopdie.pdf}
}

@article{pannabecker_diderot_1994a,
  title = {Diderot, the {{Mechanical Arts}}, and the {{Encyclopdie}}: {{In Search}} of the {{Heritage}} of {{Technology Education}}},
  shorttitle = {Diderot, the {{Mechanical Arts}}, and the {{Encyclopdie}}},
  author = {Pannabecker, John R.},
  year = {1994},
  journal = {Journal of Technology Education},
  volume = {6},
  pages = {45--57},
  abstract = {This paper contributes to a history of technology education by focusing on one of the most ambitious attempts in early modern history to describe technological knowledge --- Diderot's Encyclopdie (Diderot \& d'Alembert, 17511772)},
  file = {/home/pierre/Zotero/storage/9Q78FMUJ/Pannabecker - 1994 - Diderot, the Mechanical Arts, and the Encyclopdie.pdf}
}

@incollection{papert_mathematical_1978,
  title = {The {{Mathematical Unconscious}}},
  booktitle = {On Aesthetics in Science},
  author = {Papert, Seymour A.},
  editor = {Wechsler, Judith},
  year = {1978},
  publisher = {{Cambridge, Mass. : MIT Press}},
  urldate = {2023-03-29},
  abstract = {180 p. : 24 cm; Includes index; Bibliography: p. [165]-169},
  isbn = {978-0-262-23088-9},
  langid = {english},
  keywords = {Science -- Aesthetics}
}

@book{papert_mindstorms_1993,
  title = {Mindstorms: {{Children}}, {{Computers}}, {{And Powerful Ideas}}},
  shorttitle = {Mindstorms},
  author = {Papert, Seymour A.},
  year = {1993},
  month = aug,
  publisher = {{Basic Books}},
  abstract = {The book that started the computer revolution in schoolsComputers have completely changed the way we teach children. We have Mindstorms to thank for that. In this book, pioneering computer scientist Seymour Papert uses the invention of LOGO, the first child-friendly programming language, to make the case for the value of teaching children with computers. Papert argues that children are more than capable of mastering computers, and that teaching computational processes like de-bugging in the classroom can change the way we learn everything else. He also shows that schools saturated with technology can actually improve socialization and interaction among students and between students and teachers.Technology changes every day, but the basic ways that computers can help us learn remain. For thousands of teachers and parents who have sought creative ways to help children learn with computers, Mindstorms is their bible.},
  googlebooks = {Li2YswEACAAJ},
  isbn = {978-0-465-04674-4},
  langid = {english},
  keywords = {Biography \& Autobiography / Educators,Biography \& Autobiography / Science \& Technology,Computers / Computer Literacy,Computers / Computer Science,Computers / Educational Software,Computers / History,Computers / Programming / General,Computers / Social Aspects,Education / Computers \& Technology,Education / Curricula,Education / Early Childhood (incl. Preschool \& Kindergarten),Education / Elementary,Education / Teaching Methods \& Materials / Mathematics,Education / Teaching Methods \& Materials / Science \& Technology,Psychology / Developmental / Adolescent,Psychology / Developmental / Child,Technology \& Engineering / General,Young Adult Nonfiction / Computers / Programming}
}

@book{parsons_functional_2012,
  title = {Functional {{Beauty}}},
  author = {Parsons, Glenn and Carlson, Allen and Parsons, Glenn and Carlson, Allen},
  year = {2012},
  month = sep,
  publisher = {{Oxford University Press}},
  address = {{Oxford, New York}},
  abstract = {Glenn Parsons and Allen Carlson offer an in-depth philosophical study of the relationship between function and aesthetic value, breaking with the philosophical tradition of seeing the two as separate. They begin by developing and defending, in a general way, the concept of Functional Beauty, exploring how the role of function in aesthetic appreciation has been treated by some notable thinkers in the history of aesthetics. They then consider the relationship to Functional Beauty of certain views in current aesthetic thought, especially what we call 'cognitively rich' approaches to the aesthetic appreciation of both art and nature. Turning to work on the nature of function in the philosophy of science, they argue that this line of enquiry can help solve certain philosophical problems that have been raised for the idea that knowledge of function plays an important role in aesthetic appreciation. Although philosophical discussions of aesthetic appreciation tend to focus largely and sometimes almost exclusively on artworks, the range of aesthetic appreciation is, of course, much larger. Not simply art, but also nature, architecture, and even more mundane, everyday things\textemdash cars, tools, clothing, furniture, and sports\textemdash are objects of frequent and enthusiastic aesthetic appreciation. Accordingly, in the second half of the book, Glen Parsons and Allen Carlson consider the place and importance of Functional Beauty in the aesthetic appreciation of a broad range of different kinds of things. The final chapters explore Functional Beauty in nature and the natural environment, in architecture and the built environment, in everyday artefacts, events, and activities, and finally in art and the artworld. In each case, Parsons and Carlson argue that Functional Beauty illuminates our aesthetic experiences and helps to address various theoretical issues raised by these different objects of appreciation.                                                        ,                Glenn Parsons and Allen Carlson offer an in-depth philosophical study of the relationship between function and aesthetic value, breaking with the philosophical tradition of seeing the two as separate. They begin by developing and defending, in a general way, the concept of Functional Beauty, exploring how the role of function in aesthetic appreciation has been treated by some notable thinkers in the history of aesthetics. They then consider the relationship to Functional Beauty of certain views in current aesthetic thought, especially what we call 'cognitively rich' approaches to the aesthetic appreciation of both art and nature. Turning to work on the nature of function in the philosophy of science, they argue that this line of enquiry can help solve certain philosophical problems that have been raised for the idea that knowledge of function plays an important role in aesthetic appreciation. Although philosophical discussions of aesthetic appreciation tend to focus largely and sometimes almost exclusively on artworks, the range of aesthetic appreciation is, of course, much larger. Not simply art, but also nature, architecture, and even more mundane, everyday things\textemdash cars, tools, clothing, furniture, and sports\textemdash are objects of frequent and enthusiastic aesthetic appreciation. Accordingly, in the second half of the book, Glen Parsons and Allen Carlson consider the place and importance of Functional Beauty in the aesthetic appreciation of a broad range of different kinds of things. The final chapters explore Functional Beauty in nature and the natural environment, in architecture and the built environment, in everyday artefacts, events, and activities, and finally in art and the artworld. In each case, Parsons and Carlson argue that Functional Beauty illuminates our aesthetic experiences and helps to address various theoretical issues raised by these different objects of appreciation.},
  isbn = {978-0-19-965931-9},
  file = {/home/pierre/Zotero/storage/25WNK9R5/functional-beauty-9780199659319.html}
}

@inproceedings{pattis_textbook_1988,
  title = {Textbook Errors in Binary Searching},
  booktitle = {{{SIGCSE}} '88},
  author = {Pattis, Richard E.},
  year = {1988},
  doi = {10.1145/52964.53012},
  abstract = {This paper discusses the specification and implementation of binary searching, and presents a ``standard'' set of declarations, a specification, and a binary searching procedure written in Pascal that does not meet the specification. This paper discusses the specification and implementation of binary searching. It begins by presenting a ``standard'' set of declarations, a specification, and a binary searching procedure written in Pascal. This procedure does not meet the specification: it contains five errors that also occur in many CS-1 and CS-2 textbooks. We will locate and study these errors, and show alternative procedures that correct them in a simple and understandable way.}
}

@incollection{peacocke_aesthetic_2023,
  title = {Aesthetic {{Experience}}},
  booktitle = {The {{Stanford Encyclopedia}} of {{Philosophy}}},
  author = {Peacocke, Antonia},
  editor = {Zalta, Edward N. and Nodelman, Uri},
  year = {2023},
  edition = {Spring 2023},
  publisher = {{Metaphysics Research Lab, Stanford University}},
  urldate = {2023-02-28},
  abstract = {A paradigmatic aesthetic experience is a perceptual experience focusedon the beauty of an object like a work of art or an aspect of nature.Some philosophers take it that this is the only kind of aestheticexperience, though many more take it that there are other varieties aswell. You might, for instance, have an aesthetic experience bywitnessing not a beautiful but a sublime storm. You mighthave an aesthetic experience not by having a perceptual but rather byhaving an (imagined) emotional experience of the deep suffering ofSethe expressed in Toni Morrison's great novel Beloved.Perhaps you might even have an aesthetic experience by appreciatingthe way in which an elegant theorem reorganizes your thought about amathematical structure., Philosophical work on art and beauty in the Western tradition extendsback at least as far as the ancient Greeks, but the concept ofaesthetic experience as such emerged in this tradition only in the18th century. Not all who work in this area take any formof experience to be the most fundamental concept for aesthetic theory;others take evaluative aesthetic judgments, or the aesthetic value ofobjects themselves, to be more basic in explaining the relevantphenomena. This entry discusses all those views in the Westerntradition with any theory of aesthetic experience at all\textemdash notonly those views that take aesthetic experience to be fundamental., Philosophers use the idea of a distinctively aestheticexperience for several different purposes. Some use it to defend deep,effortful engagement with the arts or art criticism (Shelley 1832[2003]). Some use it to give a substantive definition of art (Tolstoy1897 [2007]), or to elevate `real' art over other culturalmedia (Collingwood 1938 [1958]). Some use it to argue for the personalor social importance of an education in sensibility (Schiller 1795[1989]). Others describe aesthetic experience as a special form ofcognitive contact with the world, perhaps even with its fundamentalmetaphysics (Schopenhauer 1818 [1958]). Only a few now question theutility of the concept of aesthetic experience (Shusterman 1997, 2008,Nehamas 1998)., Given this diversity of purposes, it is difficult to say much aboutaesthetic experience that is not controversial. But a few questionscan be posed for all theories of aesthetic experience. What isdistinctive about aesthetic experience? What is valuable about havingan experience of this kind? How if at all, does it involve evaluatingits own object? Who can have these experiences, and under whatconditions? Does it make sense to say that we should havesuch experiences?, These questions will be answered on behalf of various differentapproaches to aesthetic experience in the course of this overview. Theoverview organizes such approaches along two dimensions: in terms ofthe properties of an object on which such experience focuses; and interms of various internal aspects of the experience itself.}
}

@inproceedings{peitek_what_2020,
  title = {What {{Drives}} the {{Reading Order}} of {{Programmers}}? {{An Eye Tracking Study}}},
  shorttitle = {What {{Drives}} the {{Reading Order}} of {{Programmers}}?},
  booktitle = {Proceedings of the 28th {{International Conference}} on {{Program Comprehension}}},
  author = {Peitek, Norman and Siegmund, Janet and Apel, Sven},
  year = {2020},
  month = jul,
  series = {{{ICPC}} '20},
  pages = {342--353},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3387904.3389279},
  urldate = {2021-11-08},
  abstract = {Background: The way how programmers comprehend source code depends on several factors, including the source code itself and the programmer. Recent studies showed that novice programmers tend to read source code more like natural language text, whereas experts tend to follow the program execution flow. But, it is unknown how the linearity of source code and the comprehension strategy influence programmers' linearity of reading order. Objective: We replicate two previous studies with the aim of additionally providing empirical evidence on the influencing effects of linearity of source code and programmers' comprehension strategy on linearity of reading order. Methods: To understand the effects of linearity of source code on reading order, we conducted a non-exact replication of studies by Busjahn et al. and Peachock et al., which compared the reading order of novice and expert programmers. Like the original studies, we used an eye-tracker to record the eye movements of participants (12 novice and 19 intermediate programmers). Results: In line with Busjahn et al. (but different from Peachock et al.), we found that experience modulates the reading behavior of participants. However, the linearity of source code has an even stronger effect on reading order than experience, whereas the comprehension strategy has a minor effect. Implications: Our results demonstrate that studies on the reading behavior of programmers must carefully select source code snippets to control the influence of confounding factors. Furthermore, we identify a need for further studies on how programmers should structure source code to align it with their natural reading behavior to ease program comprehension.},
  isbn = {978-1-4503-7958-8},
  keywords = {eye tracking,linearity of reading order,program comprehension,programmer experience,source code linearity},
  file = {/home/pierre/Zotero/storage/EX9QAFTL/Peitek et al. - 2020 - What Drives the Reading Order of Programmers An E.pdf}
}

@book{pekkahimanen_hacker_2001,
  title = {The {{Hacker Ethic And The Spirit Of The Information Age}}},
  author = {{Pekka Himanen}},
  year = {2001},
  month = jan,
  urldate = {2021-04-02},
  abstract = {Nearly a century ago, Max Weber's The Protestant Ethic and the Spirit of Capitalism articulated the animating spirit of the industrial age, the Protestant ethic. Now, Pekka Himanen-together with Linus Torvalds and Manuel Castells-articulates how hackers* represent a new, opposing ethos for the information age. Underlying hackers' technical creations-such as the Internet and the personal computer, which have become symbols of our time-are the hacker values that produced them and that challenge us all. These values promote passionate and freely rhythmed work; the belief that individuals can create great things by joining forces in imaginative ways; and the need to maintain our existing ethical ideals, such as privacy and equality, in our new, increasingly technologized society. The Hacker Ethic takes us on a journey through fundamental questions about life in the information age-a trip of constant surprises, after which our time and our lives can be seen from unexpected perspectives.},
  copyright = {http://creativecommons.org/publicdomain/mark/1.0/},
  langid = {english},
  keywords = {hacktivism}
}

@misc{pellet-mary_co6gc_2020,
  title = {{Co6GC: Program Obfuscation | COSIC}},
  shorttitle = {{Co6GC}},
  author = {{Pellet-Mary}, Alice},
  year = {2020},
  month = may,
  urldate = {2022-06-03},
  langid = {dutch},
  file = {/home/pierre/Zotero/storage/KW67CMYJ/program-obfuscation.html}
}

@book{pelletier_attrait_2018,
  title = {{L'attrait esth\'etique de la fiction : un point de vue de philosophie cognitive}},
  shorttitle = {{L'attrait esth\'etique de la fiction}},
  author = {Pelletier, J{\'e}r{\^o}me},
  year = {2018},
  pages = {131},
  publisher = {{Kim\'e}},
  urldate = {2022-12-26},
  isbn = {978-2-84174-882-2},
  langid = {french},
  file = {/home/pierre/Zotero/storage/KHQNHFP3/hal-03882182.html}
}

@article{pelletier_fiction_2008,
  title = {{La Fiction comme Culture de la Simulation}},
  author = {Pelletier, J{\'e}r{\^o}me},
  year = {2008},
  month = apr,
  journal = {Po\'etique : revue de th\'eorie et d'analyse litt\'eraire},
  number = {154},
  pages = {131},
  urldate = {2022-12-26},
  abstract = {De m\^eme que nous mettons du sens dans le comportement des autres gr\^ace \`a la simulation mentale, cet article fait l'hypoth\`ese que la simulation \textendash sous ses diverses formes \textendash{} est \`a la base d'au moins une partie du sens que nous trouvons dans les fictions et les \oe uvres d'art.},
  langid = {french},
  file = {/home/pierre/Zotero/storage/GPLLNB3X/Pelletier - 2008 - La Fiction comme Culture de la Simulation.pdf}
}

@book{penny_making_2019,
  title = {Making {{Sense}}: {{Cognition}}, {{Computing}}, {{Art}} and {{Embodiment}}},
  shorttitle = {Making {{Sense}} by {{Simon Penny}}},
  author = {Penny, Simon},
  year = {2019},
  publisher = {{MIT Press}},
  urldate = {2022-10-11},
  abstract = {Why embodied approaches to cognition are better able to address the performative dimensions of art than the dualistic conceptions fundamental to theories of digital computing.In Making Sense, Simon Penny...},
  isbn = {978-0-262-53823-7},
  langid = {american},
  file = {/home/pierre/Zotero/storage/E29JS4YC/making-sense-by-simon-penny.html}
}

@misc{perlin_chalktalk_2022,
  title = {Chalktalk},
  author = {Perlin, Ken},
  year = {2022},
  month = dec,
  address = {{Future Reality Lab}},
  urldate = {2022-12-18},
  copyright = {MIT},
  howpublished = {New York University}
}

@article{perlis_special_1982,
  title = {Special {{Feature}}: {{Epigrams}} on Programming},
  shorttitle = {Special {{Feature}}},
  author = {Perlis, Alan J.},
  year = {1982},
  month = sep,
  journal = {ACM SIGPLAN Notices},
  volume = {17},
  number = {9},
  pages = {7--13},
  issn = {0362-1340},
  doi = {10.1145/947955.1083808},
  urldate = {2023-04-28},
  file = {/home/pierre/Zotero/storage/RJVTJHWI/Perlis - 1982 - Special Feature Epigrams on programming.pdf}
}

@misc{perrin_itlog_2006,
  title = {{{ITLOG Import}}: {{Elegance}}},
  author = {Perrin, Chad},
  year = {2006},
  month = aug,
  urldate = {2022-06-02},
  howpublished = {https://web.archive.org/web/20200730232944/http://sob.apotheon.org/?p=113},
  file = {/home/pierre/Zotero/storage/7YBVU58Z/sob.apotheon.org.html}
}

@article{perrotta_programming_2020,
  title = {Programming the Platform University: {{Learning}} Analytics and Predictive Infrastructures in Higher Education},
  shorttitle = {Programming the Platform University},
  author = {Perrotta, Carlo},
  year = {2020},
  month = oct,
  journal = {Research in Education},
  pages = {0034523720965623},
  issn = {0034-5237},
  doi = {10.1177/0034523720965623},
  urldate = {2021-01-28},
  abstract = {This article offers a case study of how platforms and predictive infrastructures are emerging in higher education. It examines a Learning Analytics Application Programming Interface (API) from a popular Learning Management System. The API is treated firstly as an artefact based on the computational abstraction of educational principles, and secondly as an empirical entry point to investigate the emergence of a Learning Analytics infrastructure in a large Australian university. Through in-depth ethnographic interviews and the interpretative analysis of software development workflows, the paper describes an API-mediated platformisation process involving a range of actors and systems: computational experts, algorithms, data-savvy administrative staff and large corporate actors inserting themselves through back-ends and various other dependencies. In the conclusion, the article argues that the platformisation of higher education is part of a broader project that mobilises programmability and computation to re-engineer educational institutions in the interest of efficiency and prediction. However, the social-scientific study of this project cannot ignore the practical and compromised dimension where human actors and technical systems interact and, in the process, generate meaning.},
  langid = {english},
  keywords = {Application Programming Interfaces,higher education,infrastructure studies,Platforms,software studies}
}

@misc{peters_code_1999,
  title = {Code {{Style}}},
  author = {Peters, Tim},
  year = {1999},
  journal = {The Hitchhiker's Guide to Python},
  urldate = {2023-04-21},
  howpublished = {https://docs.python-guide.org/writing/style},
  file = {/home/pierre/Zotero/storage/329KZ8KA/style.html}
}

@inproceedings{petre_glimpse_1997,
  title = {A Glimpse of Expert Programmers' Mental Imagery},
  booktitle = {Papers Presented at the Seventh Workshop on {{Empirical}} Studies of Programmers},
  author = {Petre, Marian and Blackwell, Alan F.},
  year = {1997},
  month = oct,
  series = {{{ESP}} '97},
  pages = {109--123},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/266399.266409},
  urldate = {2021-11-08},
  isbn = {978-0-89791-992-0},
  file = {/home/pierre/Zotero/storage/TP5YFS54/Petre and Blackwell - 1997 - A glimpse of expert programmers' mental imagery.pdf}
}

@article{pevsner_term_1942,
  title = {The {{Term}} '{{Architect}}' in the {{Middle Ages}}},
  author = {Pevsner, N.},
  year = {1942},
  journal = {Speculum},
  volume = {17},
  number = {4},
  eprint = {2856447},
  eprinttype = {jstor},
  pages = {549--562},
  publisher = {{[Medieval Academy of America, Cambridge University Press, University of Chicago Press]}},
  issn = {0038-7134},
  doi = {10.2307/2856447},
  urldate = {2021-01-28}
}

@article{pike_unix_1984,
  title = {The {{UNIX}} System: {{The}} Blit: {{A}} Multiplexed Graphics Terminal},
  shorttitle = {The {{UNIX}} System},
  author = {Pike, R.},
  year = {1984},
  month = oct,
  journal = {AT\&T Bell Laboratories Technical Journal},
  volume = {63},
  number = {8},
  pages = {1607--1631},
  issn = {0748-612X},
  doi = {10.1002/j.1538-7305.1984.tb00056.x},
  abstract = {The Blit is a programmable bitmap graphics terminal designed specifically to run with the UNIX\texttrademark{} operating system. The software in the terminal provides an asynchronous multiwindow environment, and thereby exploits the multiprogramming capabilities of the UNIX system, which have been largely under-utilized because of the restrictions of conventional terminals. This paper discusses the design motivation of the Blit, gives an overview of the user interface, mentions some of the novel uses of multiprogramming made possible by the Blit, and describes the implementation of the multiplexing facilities on the host and in the terminal. Because most of the functionality is provided by the terminal, the discussion focuses on the structure of the terminal's software.},
  file = {/home/pierre/Zotero/storage/9ENRQDA6/Pike - 1984 - The UNIX system The blit A multiplexed graphics .pdf}
}

@phdthesis{pineiro_aesthetics_2003,
  title = {The Aesthetics of Code : On Excellence in Instrumental Action},
  shorttitle = {The Aesthetics of Code},
  author = {Pineiro, Erik},
  year = {2003},
  urldate = {2021-01-28},
  abstract = {DiVA portal is a finding tool for research publications and student theses written at the following 49 universities and research institutions.},
  langid = {english},
  school = {KTH, Superseded Departments, Industrial Economics and Management.},
  file = {/home/pierre/Zotero/storage/6WG4D76D/Pineiro - 2003 - The aesthetics of code  on excellence in instrume.pdf;/home/pierre/Zotero/storage/DSRQUVCY/record.html}
}

@book{poibeau_machine_2017,
  title = {Machine {{Translation}}},
  author = {Poibeau, Thierry},
  year = {2017},
  month = sep,
  publisher = {{MIT Press}},
  abstract = {A concise, nontechnical overview of the development of machine translation, including the different approaches, evaluation issues, and major players in the industry.The dream of a universal translation device goes back many decades, long before Douglas Adams's fictional Babel fish provided this service in The Hitchhiker's Guide to the Galaxy. Since the advent of computers, research has focused on the design of digital machine translation tools\textemdash computer programs capable of automatically translating a text from a source language to a target language. This has become one of the most fundamental tasks of artificial intelligence. This volume in the MIT Press Essential Knowledge series offers a concise, nontechnical overview of the development of machine translation, including the different approaches, evaluation issues, and market potential. The main approaches are presented from a largely historical perspective and in an intuitive manner, allowing the reader to understand the main principles without knowing the mathematical details. The book begins by discussing problems that must be solved during the development of a machine translation system and offering a brief overview of the evolution of the field. It then takes up the history of machine translation in more detail, describing its pre-digital beginnings, rule-based approaches, the 1966 ALPAC (Automatic Language Processing Advisory Committee) report and its consequences, the advent of parallel corpora, the example-based paradigm, the statistical paradigm, the segment-based approach, the introduction of more linguistic knowledge into the systems, and the latest approaches based on deep learning. Finally, it considers evaluation challenges and the commercial status of the field, including activities by such major players as Google and Systran.},
  googlebooks = {LYc3DwAAQBAJ},
  isbn = {978-0-262-53421-5},
  langid = {english},
  keywords = {Computers / Artificial Intelligence / General,Computers / Information Theory,Language Arts \& Disciplines / Linguistics / General}
}

@book{poincare_science_1908,
  title = {{Science et m\'ethode}},
  author = {Poincar{\'e}, Henri},
  year = {1908},
  publisher = {{E. Flammarion}},
  address = {{Paris}},
  langid = {fre},
  keywords = {Science -- Methodology},
  annotation = {Open Library ID: OL7004262M}
}

@book{polanyi_knowing_1969,
  title = {Knowing and Being; Essays},
  author = {Polanyi, Michael and Grene, Marjorie},
  year = {1969},
  publisher = {{[Chicago] University of Chicago Press}},
  urldate = {2022-10-25},
  abstract = {Includes bibliographical references},
  collaborator = {{Internet Archive}},
  isbn = {978-0-226-67284-7 978-0-226-67285-4},
  langid = {english},
  keywords = {{Knowledge, Theory of}}
}

@book{polanyi_tacit_2009,
  title = {The {{Tacit Dimension}}},
  author = {Polanyi, Michael and Sen, Amartya},
  year = {2009},
  month = may,
  edition = {Revised ed. edition},
  publisher = {{University of Chicago Press}},
  address = {{Chicago ; London}},
  abstract = {``I shall reconsider human knowledge by starting from the fact that we can know more than we can tell,'' writes Michael Polanyi, whose work paved the way for the likes of Thomas Kuhn and Karl Popper. The Tacit Dimension argues that tacit knowledge\textemdash tradition, inherited practices, implied values, and prejudgments\textemdash is a crucial part of scientific knowledge. Back in print for a new generation of students and scholars, this volume challenges the assumption that skepticism, rather than established belief, lies at the heart of scientific discovery.``Polanyi's work deserves serious attention. . . . [This is a] compact presentation of some of the essentials of his thought.''\textemdash Review of Metaphysics``Polanyi's work is still relevant today and a closer examination of this theory that all knowledge has personal and tacit elements . . . can be used to support and refute a variety of widely held approaches to knowledge management.''\textemdash Electronic Journal of Knowledge"The reissuing of this remarkable book give us a new opportunity to see how far-reaching\textemdash and foundational\textemdash Michael Polanyi's ideas are, on some of the age-old questions in philosophy."\textemdash Amartya Sen, from the new Foreword},
  isbn = {978-0-226-67298-4},
  langid = {english}
}

@misc{porpentine_howling_2012,
  title = {Howling Dogs},
  author = {{porpentine}},
  year = {2012},
  address = {{US}},
  urldate = {2023-03-02}
}

@book{postman_amusing_1985,
  title = {Amusing {{Ourselves}} to {{Death}}: {{Public Discourse}} in the {{Age}} of {{Show Business}}},
  shorttitle = {Amusing {{Ourselves}} to {{Death}}},
  author = {Postman, Neil},
  year = {1985},
  month = nov,
  edition = {1st edition},
  publisher = {{Viking Penguin}},
  address = {{New York}},
  isbn = {978-0-670-80454-2},
  langid = {english}
}

@inproceedings{prabhu_survey_2011,
  title = {A Survey of the Practice of Computational Science},
  booktitle = {{{SC}} '11: {{Proceedings}} of 2011 {{International Conference}} for {{High Performance Computing}}, {{Networking}}, {{Storage}} and {{Analysis}}},
  author = {Prabhu, Prakash and Kim, Hanjun and Oh, Taewook and Jablin, Thomas B. and Johnson, Nick P. and Zoufaly, Matthew and Raman, Arun and Liu, Feng and Walker, David and Zhang, Yun and Ghosh, Soumyadeep and August, David I. and Huang, Jialu and Beard, Stephen},
  year = {2011},
  month = nov,
  pages = {1--12},
  doi = {10.1145/2063348.2063374},
  abstract = {Computing plays an indispensable role in scientific research. Presently, researchers in science have different problems, needs, and beliefs about computation than professional programmers. In order to accelerate the progress of science, computer scientists must understand these problems, needs, and beliefs. To this end, this paper presents a survey of scientists from diverse disciplines, practicing computational science at a doctoral-granting university with very high re search activity. The survey covers many things, among them, prevalent programming practices within this scientific community, the importance of computational power in different fields, use of tools to enhance performance and soft ware productivity, computational resources leveraged, and prevalence of parallel computation. The results reveal several patterns that suggest interesting avenues to bridge the gap between scientific researchers and programming tools developers.},
  keywords = {Educational institutions,MATLAB,Programming,Scientific computing,Testing,Writing},
  file = {/home/pierre/Zotero/storage/KQLNYR8V/Prabhu et al. - 2011 - A survey of the practice of computational science.pdf;/home/pierre/Zotero/storage/4GNHXWBK/6114492.html}
}

@book{pratt_programming_2000,
  title = {Programming {{Languages}}: {{Design}} and {{Implementation}}},
  shorttitle = {Programming {{Languages}}},
  author = {Pratt, Terrence W. and Zelkowitz, Marvin V.},
  year = {2000},
  month = sep,
  edition = {4th edition},
  publisher = {{Pearson}},
  address = {{Upper Saddle River, NJ}},
  abstract = {Exceptionally comprehensive in approach, this book explores the major issues in both design and implementation of modern programming languages and provides a basic introduction to the underlying theoretical models on which these languages are based. The emphasis throughout is on fundamental concepts\textemdash readers learn important ideas, not minor language differences\textendash but several languages are highlighted in sufficient detail to enable readers to write programs that demonstrate the relationship between a source program and its execution behavior\textendash e.g., C, C++, JAVA, ML, LISP, Prolog, Smalltalk, Postscript, HTML, PERL, FORTRAN, Ada, COBOL, BASIC SNOBOL4, PL/I, Pascal. Begins with a background review of programming languages and the underlying hardware that will execute the given program; then covers the underlying grammatical model for programming languages and their compilers (elementary data types, data structures and encapsulation, inheritance, statements, procedure invocation, storage management, distributed processing, and network programming). Includes an advanced chapter on language semantics\textendash program verification, denotational semantics, and the lambda calculus. For computer engineers and others interested in programming language designs.},
  isbn = {978-0-13-027678-0},
  langid = {english}
}

@misc{programmingwisdom[codewisdom]_designer_2021,
  type = {Tweet},
  title = {"{{A}} Designer Knows [One] Has Achieved Perfection Not When There Is Nothing Left to Add, but When There Is Nothing Left to Take Away." \textendash{} {{Antoine}} de {{Saint-Exup\'ery}}},
  author = {{Programming Wisdom [@codewisdom]}},
  year = {2021},
  month = jan,
  journal = {Twitter},
  urldate = {2022-07-12},
  langid = {english},
  file = {/home/pierre/Zotero/storage/UICLI35W/1353651398337044481.html}
}

@article{putnam_meaning_1975,
  title = {The {{Meaning}} of "{{Meaning}}"},
  author = {Putnam, Hilary},
  year = {1975},
  publisher = {{University of Minnesota Press, Minneapolis}},
  urldate = {2022-12-13},
  abstract = {1 online resource (PDF, page 131-193)},
  langid = {english},
  annotation = {Accepted: 2017-03-16T19:34:13Z},
  file = {/home/pierre/Zotero/storage/HZD8F8VH/Putnam - 1975 - The Meaning of Meaning.pdf}
}

@book{pye_nature_2008,
  title = {The {{Nature}} and {{Art}} of {{Workmanship}}},
  author = {Pye, David},
  editor = {Shales, Ezra},
  year = {2008},
  month = jul,
  edition = {Illustrated edition},
  publisher = {{Herbert Press}},
  abstract = {This is one of the classic books on craftsmanship and design. Init, David Pye explores the meaning of skill and its relationship todesign and manufacture. Cutting through a century of fuzzythinking, he proposes a new theory of making based on the concept ofgood workmanship and shows how it imparts all-important diversity toour visual environment.},
  isbn = {978-0-7136-8931-0},
  langid = {english}
}

@misc{quoteinvestigator_theory_2018,
  title = {In {{Theory There Is No Difference Between Theory}} and {{Practice}}, {{While In Practice There Is}} \textendash{} {{Quote Investigator}}},
  author = {Quote Investigator},
  year = {2018},
  month = apr,
  urldate = {2022-11-21},
  langid = {american},
  file = {/home/pierre/Zotero/storage/UKHWNF7S/theory.html}
}

@book{ranciere_aisthesis_2013,
  title = {Aisthesis: {{Scenes}} from the {{Aesthetic Regime}} of {{Art}}},
  shorttitle = {Aisthesis},
  author = {Ranciere, Jacques},
  translator = {Paul, Zakir},
  year = {2013},
  month = jun,
  edition = {1st edition},
  publisher = {{Verso}},
  address = {{London ; New York}},
  abstract = {Composed in a series of scenes, Aisthesis\textendash Ranci\`ere's definitive statement on the aesthetic\textendash takes its reader from Dresden in 1764 to New York in 1941. Along the way, we view the Belvedere Torso with Winckelmann, accompany Hegel to the museum and Mallarm\'e to the Folies-Berg\`ere, attend a lecture by Emerson, visit exhibitions in Paris and New York, factories in Berlin, and film sets in Moscow and Hollywood. Ranci\`ere uses these sites and events\textemdash some famous, others forgotten\textemdash to ask what becomes art and what comes of it. He shows how a regime of artistic perception and interpretation was constituted and transformed by erasing the specificities of the different arts, as well as the borders that separated them from ordinary experience. This incisive study provides a history of artistic modernity far removed from the conventional postures of modernism.},
  isbn = {978-1-78168-089-6},
  langid = {english}
}

@misc{randell_nato_1996,
  title = {{{NATO Software Engineering Conference}} 1968},
  author = {Randell, Brian},
  year = {1996},
  month = aug,
  journal = {The 1968/69 NATO Software Engineering Reports},
  urldate = {2022-08-01},
  howpublished = {http://homepages.cs.ncl.ac.uk/brian.randell/NATO/NATOReports/},
  file = {/home/pierre/Zotero/storage/ID7KHMYU/NATOReports.html}
}

@article{rapaport_philosophy_2005,
  title = {Philosophy of {{Computer Science}}: {{An Introductory Course}}},
  shorttitle = {Philosophy of {{Computer Science}}},
  author = {Rapaport, William J.},
  year = {2005},
  journal = {Teaching Philosophy},
  volume = {28},
  number = {4},
  pages = {319--341},
  doi = {teachphil200528443}
}

@article{rasool_review_2015,
  title = {A Review of Code Smell Mining Techniques},
  author = {Rasool, Ghulam and Arshad, Zeeshan},
  year = {2015},
  journal = {Journal of Software: Evolution and Process},
  volume = {27},
  number = {11},
  pages = {867--895},
  issn = {2047-7481},
  doi = {10.1002/smr.1737},
  urldate = {2022-06-03},
  abstract = {Over the past 15 years, researchers presented numerous techniques and tools for mining code smells. It is imperative to classify, compare, and evaluate existing techniques and tools used for the detection of code smells because of their varying features and outcomes. This paper presents an up-to-date review on the state-of-the-art techniques and tools used for mining code smells from the source code of different software applications. We classify selected code smell detection techniques and tools based on their detection methods and analyze the results of the selected techniques. We present our observations and recommendations after our critical analysis of existing code smell techniques and tools. Our recommendations may be used by existing and new tool developers working in the field of code smell detection. The scope of this review is limited to research publications in the area of code smells that focus on detection of code smells as compared with previous reviews that cover all aspects of code smells. Copyright \textcopyright{} 2015 John Wiley \& Sons, Ltd.},
  langid = {english},
  keywords = {code quality,code smells,design flaws,detection techniques,literature review},
  file = {/home/pierre/Zotero/storage/8LHQWJIN/smr.html}
}

@book{raymond_art_2003,
  title = {The {{Art}} of {{UNIX Programming}}},
  author = {Raymond, Eric},
  year = {2003},
  month = sep,
  edition = {1st edition},
  publisher = {{Addison-Wesley}},
  address = {{Boston}},
  abstract = {The Art of UNIX Programming poses the belief that understanding the unwritten UNIX engineering tradition and mastering its design patterns will help programmers of all stripes to become better programmers. This book attempts to capture the engineering wisdom and design philosophy of the UNIX, Linux, and Open Source software development community as it has evolved over the past three decades, and as it is applied today by the most experienced programmers. Eric Raymond offers the next generation of "hackers" the unique opportunity to learn the connection between UNIX philosophy and practice through careful case studies of the very best UNIX/Linux programs.},
  isbn = {978-0-13-142901-7},
  langid = {english}
}

@book{raymond_cathedral_2001,
  title = {The {{Cathedral}} \& the {{Bazaar}}: {{Musings}} on {{Linux}} and {{Open Source}} by an {{Accidental Revolutionary}}},
  shorttitle = {The {{Cathedral}} \& the {{Bazaar}}},
  author = {Raymond, Eric S.},
  year = {2001},
  publisher = {{"O'Reilly Media, Inc."}},
  abstract = {Open source provides the competitive advantage in the Internet Age. According to the August Forrester Report, 56 percent of IT managers interviewed at Global 2,500 companies are already using some type of open source software in their infrastructure and another 6 percent will install it in the next two years. This revolutionary model for collaborative software development is being embraced and studied by many of the biggest players in the high-tech industry, from Sun Microsystems to IBM to Intel. The Cathedral \& the Bazaar is a must for anyone who cares about the future of the computer industry or the dynamics of the information economy. Already, billions of dollars have been made and lost based on the ideas in this book. Its conclusions will be studied, debated, and implemented for years to come. According to Bob Young, "This is Eric Raymond's great contribution to the success of the open source revolution, to the adoption of Linux-based operating systems, and to the success of open source users and the companies that supply them." The interest in open source software development has grown enormously in the past year. This revised and expanded paperback edition includes new material on open source developments in 1999 and 2000. Raymond's clear and effective writing style accurately describing the benefits of open source software has been key to its success. With major vendors creating acceptance for open source within companies, independent vendors will become the open source story in 2001.},
  isbn = {978-0-596-00108-7},
  langid = {english},
  keywords = {Computers / General,Computers / Human-Computer Interaction (HCI),Computers / Information Technology,Computers / Information Theory,Computers / Internet / General,Computers / Natural Language Processing,Computers / Operating Systems / Linux,Computers / Operating Systems / UNIX,Computers / Programming / General,Computers / Social Aspects}
}

@book{raymond_new_1996,
  title = {The {{New Hacker}}'s {{Dictionary}}},
  author = {Raymond, Eric S. and Steele, Guy L.},
  year = {1996},
  publisher = {{MIT Press}},
  abstract = {This new edition of the hacker's own phenomenally successful lexicon includes more than 100 new entries and updates or revises 200 more. This new edition of the hacker's own phenomenally successful lexicon includes more than 100 new entries and updates or revises 200 more. Historically and etymologically richer than its predecessor, it supplies additional background on existing entries and clarifies the murky origins of several important jargon terms (overturning a few long-standing folk etymologies) while still retaining its high giggle value. Sample definition hacker n. [originally, someone who makes furniture with an axe] 1. A person who enjoys exploring the details of programmable systems and how to stretch their capabilities, as opposed to most users, who prefer to learn only the minimum necessary. 2. One who programs enthusiastically (even obsessively) or who enjoys programming rather than just theorizing about programming. 3. A person capable of appreciating \{hack value\}. 4. A person who is good at programming quickly. 5. An expert at a particular program, or one who frequently does work using it or on it; as in `a UNIX hacker'. (Definitions 1 through 5 are correlated, and people who fit them congregate.) 6. An expert or enthusiast of any kind. One might be an astronomy hacker, for example. 7. One who enjoys the intellectual challenge of creatively overcoming or circumventing limitations. 8. [deprecated] A malicious meddler who tries to discover sensitive information by poking around. Hence `password hacker', `network hacker'. The correct term is \{cracker\}. The term 'hacker' also tends to connote membership in the global community defined by the net (see \{network, the\} and \{Internet address\}). It also implies that the person described is seen to subscribe to some version of the hacker ethic (see \{hacker ethic, the\}). It is better to be described as a hacker by others than to describe oneself that way. Hackers consider themselves something of an elite (a meritocracy based on ability), though one to which new members are gladly welcome. There is thus a certain ego satisfaction to be had in identifying yourself as a hacker (but if you claim to be one and are not, you'll quickly be labeled \{bogus\}). See also \{wannabee\}.},
  isbn = {978-0-262-68092-9},
  langid = {english},
  keywords = {Computers / Computer Science,Computers / Machine Theory,Computers / Reference}
}

@article{reber_processing_2004,
  title = {Processing {{Fluency}} and {{Aesthetic Pleasure}}: {{Is Beauty}} in the {{Perceiver}}'s {{Processing Experience}}?},
  shorttitle = {Processing {{Fluency}} and {{Aesthetic Pleasure}}},
  author = {Reber, Rolf and Schwarz, Norbert and Winkielman, Piotr},
  year = {2004},
  month = nov,
  journal = {Personality and Social Psychology Review},
  volume = {8},
  number = {4},
  pages = {364--382},
  publisher = {{SAGE Publications Inc}},
  issn = {1088-8683},
  doi = {10.1207/s15327957pspr0804_3},
  urldate = {2023-02-28},
  abstract = {We propose that aesthetic pleasure is a funnction of the perceiver's processing dynamics: The more fluently perceivers can process an object, the more positive their aesthetic response. We review variables known to influence aesthetic judgments, such as figural goodness, figure-ground contrast, stimulus repetition, symmetry, and prototypicality, and trace their effects to changes in processing fluency. Other variables that influence processing fluency, like visual or semantic priming, similarly increase judgments of aesthetic pleasure. Our proposal provides an integrative framework for the study of aesthetic pleasure and sheds light on the interplay between early preferences versus cultural influences on taste, preferences for both prototypical and abstracted forms, and the relation between beauty and truth. In contrast to theories that trace aesthetic pleasure to objective stimulus features per se, we propose that beauty is grounded in the processing experiences of the perceiver, which are in part a function of stimulus properties.},
  langid = {english},
  file = {/home/pierre/Zotero/storage/4SL3A6JM/Reber et al. - 2004 - Processing Fluency and Aesthetic Pleasure Is Beau.pdf}
}

@misc{redhat_what_2019,
  title = {What Is an {{IDE}}?},
  author = {Red Hat},
  year = {2019},
  month = jan,
  urldate = {2022-12-13},
  abstract = {An integrated development environment (IDE) is software for building applications that combines common developer tools into a single GUI.},
  howpublished = {https://www.redhat.com/en/topics/middleware/what-is-ide},
  langid = {english},
  file = {/home/pierre/Zotero/storage/EFZJ2YU6/what-is-ide.html}
}

@article{reed_sometimes_2010,
  title = {Sometimes Style Really Does Matter},
  author = {Reed, David},
  year = {2010},
  month = may,
  journal = {Journal of Computing Sciences in Colleges},
  volume = {25},
  number = {5},
  pages = {180--187},
  issn = {1937-4771},
  abstract = {Programming, like any creative endeavor, involves some personal style choices on the part of the programmer. Within the computer science education community, there are some programming style conventions that have been widely agreed upon, because following them unequivocally leads to programs that are easier to read and maintain. In other cases, a programmer might reasonably choose between competing styles, each of which provides similar advantages. This paper describes three instances where programming style is more than just aesthetics - following these conventions can actually help a beginning programmer to avoid mistakes and better understand the underlying programming concepts that they are utilizing.}
}

@phdthesis{reunanen_computer_2010,
  type = {G3 {{Lisensiaatinty\"o}}},
  title = {Computer {{Demos}} - {{What Makes Them Tick}}?; {{Tietokonedemot}} - Mik\"a Saa Ne Hyrr\"a\"am\"a\"an?},
  author = {Reunanen, Markku},
  year = {2010},
  langid = {english},
  school = {Aalto-yliopisto; Aalto University},
  keywords = {computer demos,digitaalinen kulttuuri,digital culture,home computers,kotitietokoneet,multimedia,tietokonedemot}
}

@book{richards_practical_1930,
  title = {Practical {{Criticism}}},
  author = {Richards, I. A.},
  year = {1930},
  publisher = {{Kegan Paul Trench Trubner And Company Limited.}},
  urldate = {2021-10-21},
  langid = {english},
  keywords = {LANGUAGE. LINGUISTICS. LITERATURE}
}

@book{ricoeur_rule_2003,
  title = {The {{Rule}} of {{Metaphor}}: {{The Creation}} of {{Meaning}} in {{Language}}},
  shorttitle = {The {{Rule}} of {{Metaphor}}},
  author = {Ricoeur, Paul},
  year = {2003},
  publisher = {{Psychology Press}},
  abstract = {A fruitful and insightful study of how language affects how we understand the world, this book is also an indispensable work for all those seeking to retrieve some kind of meaning in uncertain times.Paul Ricoeur is widely regarded as one of the most distinguished philosophers of our time. In The Rule of Metaphor this intellectual giant of our age seeks 'to show how language can extend itself to its very limits, forever discovering new resonances within itself'.Recognizing the fundamental power of language in constructing the world we perceive, Ricoeur reveals the processes by which linguistic imagination creates and recreates meaning through metaphor. Taking further his acclaimed analysis of the power of myth and symbol, Ricoeur invites us to explore the many layers of language in order to rediscover what that meaning might be. A fruitful and insightful study of how language affects how we understand the world, this book is also an indispensable work for all those seeking to retrieve some kind of meaning in uncertain times.},
  isbn = {978-0-415-31280-6},
  langid = {english}
}

@article{ritchie_unix_1984,
  title = {The {{UNIX System}}: {{The Evolution}} of the {{UNIX Time-sharing System}}},
  shorttitle = {The {{UNIX System}}},
  author = {Ritchie, D. M.},
  year = {1984},
  journal = {AT\&T Bell Laboratories Technical Journal},
  volume = {63},
  number = {8},
  pages = {1577--1593},
  issn = {1538-7305},
  doi = {10.1002/j.1538-7305.1984.tb00054.x},
  urldate = {2021-11-19},
  abstract = {This paper presents a brief history of the early development of the UNIX\texttrademark{} operating system. It concentrates on the evolution of the file system, the process-control mechanism, and the idea of pipelined commands. Some attention is paid to social conditions during the development of the system. This paper is reprinted from Lecture Notes on Computer Science, No. 79, Language Design and Programming Methodology, Springer-Verlag, 1980.},
  langid = {english},
  file = {/home/pierre/Zotero/storage/S3LJLAPA/j.1538-7305.1984.tb00054.html}
}

@misc{rizvi_why_2021,
  title = {Why {{Software Engineers}} like {{Woodworking}}},
  author = {Rizvi, Zain},
  year = {2021},
  month = feb,
  journal = {Zain Rizvi},
  urldate = {2022-07-19},
  abstract = {The smell of fresh pine sawdust filled the air, with more floating up as I sanded the last rough corner of the stool. My toddler was happily sanding her own block off to the side. Woodworking was a new hobby I'd picked up. My old ones, coding, reading, writing, had},
  howpublished = {https://www.zainrizvi.io/blog/why-software-engineers-like-woodworking/},
  langid = {english},
  file = {/home/pierre/Zotero/storage/LJGF3BLL/why-software-engineers-like-woodworking.html}
}

@article{robillard_how_2004,
  title = {How Effective Developers Investigate Source Code: An Exploratory Study},
  shorttitle = {How Effective Developers Investigate Source Code},
  author = {Robillard, M.P. and Coelho, W. and Murphy, G.C.},
  year = {2004},
  month = dec,
  journal = {IEEE Transactions on Software Engineering},
  volume = {30},
  number = {12},
  pages = {889--903},
  issn = {1939-3520},
  doi = {10.1109/TSE.2004.101},
  abstract = {Prior to performing a software change task, developers must discover and understand the subset of the system relevant to the task. Since the behavior exhibited by individual developers when investigating a software system is influenced by intuition, experience, and skill, there is often significant variability in developer effectiveness. To understand the factors that contribute to effective program investigation behavior, we conducted a study of five developers performing a change task on a medium-size open source system. We isolated the factors related to effective program investigation behavior by performing a detailed qualitative analysis of the program investigation behavior of successful and unsuccessful developers. We report on these factors as a set of detailed observations, such as evidence of the phenomenon of inattention blindness by developers skimming source code. In general, our results support the intuitive notion that a methodical and structured approach to program investigation is the most effective.},
  keywords = {Blindness,Computer Society,empirical software engineering,Index Terms- Software evolution,Inspection,Performance analysis,program investigation,program understanding.,Programming,Scattering,Software engineering,Software performance,Software systems,Software tools},
  file = {/home/pierre/Zotero/storage/6WS8HWR6/Robillard et al. - 2004 - How effective developers investigate source code .pdf}
}

@article{robillard_representing_2007,
  title = {Representing Concerns in Source Code},
  author = {Robillard, Martin P. and Murphy, Gail C.},
  year = {2007},
  month = feb,
  journal = {ACM Transactions on Software Engineering and Methodology},
  volume = {16},
  number = {1},
  pages = {3--es},
  issn = {1049-331X},
  doi = {10.1145/1189748.1189751},
  urldate = {2021-10-08},
  abstract = {A software modification task often addresses several concerns. A concern is anything a stakeholder may want to consider as a conceptual unit, including features, nonfunctional requirements, and design idioms. In many cases, the source code implementing a concern is not encapsulated in a single programming language module, and is instead scattered and tangled throughout a system. Inadequate separation of concerns increases the difficulty of evolving software in a correct and cost-effective manner. To make it easier to modify concerns that are not well modularized, we propose an approach in which the implementation of concerns is documented in artifacts, called concern graphs. Concern graphs are abstract models that describe which parts of the source code are relevant to different concerns. We present a formal model for concern graphs and the tool support we developed to enable software developers to create and use concern graphs during software evolution tasks. We report on five empirical studies, providing evidence that concern graphs support views and operations that facilitate the task of modifying the code implementing scattered concerns, are cost-effective to create and use, and robust enough to be used with different versions of a software system.},
  keywords = {aspect-oriented software development,concern modeling,Java,Separation of concerns,software evolution},
  file = {/home/pierre/Zotero/storage/QDTYEATB/Robillard and Murphy - 2007 - Representing concerns in source code.pdf}
}

@article{root-bernstein_aesthetic_2002,
  title = {Aesthetic Cognition},
  author = {{Root-Bernstein}, Robert S.},
  year = {2002},
  month = mar,
  journal = {International Studies in the Philosophy of Science},
  volume = {16},
  number = {1},
  pages = {61--77},
  publisher = {{Routledge}},
  issn = {0269-8595},
  doi = {10.1080/02698590120118837},
  urldate = {2023-03-29},
  abstract = {The purpose of this article is to integrate two outstanding problems within the philosophy of science. The first concerns what role aesthetics plays in scientific thinking. The second is the problem of how logically testable ideas are generated (the so-called "psychology of research" versus "logic of (dis)proof" problem). I argue that aesthetic sensibility is the basis for what scientists often call intuition, and that intuition in turn embodies (in a literal physiological sense) ways of thinking that have their own meta-logic. Thus, aesthetics is a form of cognition. Scientists think not in equations or words or other logical abstractions, but emotionally and sensually, using visual and aural images, kinesthetic and other proprioceptive feelings, sensations, patterns, and analogies. These aesthetic forms of thinking have their own logics that I call "synosia", from the root words synaesthesia (a combining of senses) and gnosis, "to know". Synosia denotes understanding that integrates feeling that one knows with feeling what one knows. Eminent scientists universally describe an explicitly secondary process in which such personal knowledge must be "translated" into a formal language, such as words or equations, in order to be communicated to other people. Many of the unsolved problems that philosophers of science (as well as psychologists and artificial intelligence researchers) have had in making sense of scientific thinking have arisen from confusing the form and content of the final translations with the hidden means by which scientific insights are actually achieved.}
}

@misc{rosenbaum_secrets_2004,
  title = {Secrets of the {{Little Blue Box}}},
  author = {Rosenbaum, Ron},
  year = {2004},
  month = dec,
  journal = {Secrets of the Little Blue Box},
  urldate = {2021-11-18},
  file = {/home/pierre/Zotero/storage/6AJTVTPF/lbb.html}
}

@book{rosenberg_dreaming_2007,
  title = {Dreaming in Code: Two Dozen Programmers, Three Years, 4,732 Bugs, and One Quest for Transcendent Software},
  shorttitle = {Dreaming in Code},
  author = {Rosenberg, Scott},
  year = {2007},
  publisher = {{Crown Publishers}},
  address = {{New York}},
  abstract = {Why is software so hard? Hard to make well. Hard to deliver on time. Hard to use. Our civilization runs on software, yet the art of creating it continues to be a dark mystery, even to the experts, and the greater our ambitions, the more spectacularly we seem to fail. This book sets out to understand why, through the story of one software project\textendash Mitch Kapor's Chandler, an ambitious, open-source effort to rethink the world of email and scheduling. Journalist Rosenberg spent three years following the work of the Chandler developers as they scaled programming peaks and slogged through software swamps. Here he tells their stories.\textendash Adapted from www.dreamingincode.com.},
  isbn = {978-1-4000-8246-9},
  langid = {english}
}

@article{roskill_aesthetic_1977,
  title = {{{THE AESTHETIC CONCEPT OF CRAFTSMANSHIP}}*},
  author = {Roskill, Mark},
  year = {1977},
  month = feb,
  journal = {The British Journal of Aesthetics},
  volume = {17},
  number = {2},
  pages = {138--148},
  issn = {0007-0904},
  doi = {10.1093/bjaesthetics/17.2.138},
  urldate = {2021-01-28},
  file = {/home/pierre/Zotero/storage/UXY3LBFI/87175.html}
}

@inproceedings{ross_personal_1986,
  title = {A Personal View of the Personal Work Station: Some Firsts in the {{Fifties}}},
  shorttitle = {A Personal View of the Personal Work Station},
  booktitle = {Proceedings of the {{ACM Conference}} on {{The}} History of Personal Workstations},
  author = {Ross, Douglas},
  year = {1986},
  month = jan,
  series = {{{HPW}} '86},
  pages = {19--48},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/12178.12180},
  urldate = {2021-11-17},
  isbn = {978-0-89791-176-4},
  file = {/home/pierre/Zotero/storage/45D2SA8Q/Ross - 1986 - A personal view of the personal work station some.pdf}
}

@article{rota_phenomenology_1997,
  title = {The {{Phenomenology}} of {{Mathematical Beauty}}},
  author = {Rota, Gian-Carlo},
  year = {1997},
  journal = {Synthese},
  volume = {111},
  number = {2},
  eprint = {20117626},
  eprinttype = {jstor},
  pages = {171--182},
  issn = {0039-7857},
  urldate = {2021-04-03},
  abstract = {It has been observed that whereas painters and musicians are likely to be embarrassed by references to the beauty in their work, mathematicians instead like to engage in discussions of the beauty of mathematics. Professional artists are more likely to stress the technical rather than the aesthetic aspects of their work. Mathematicians, instead, are fond of passing judgment on the beauty of their favored pieces of mathematics. Even a cursory observation shows that the characteristics of mathematical beauty are at variance with those of artistic beauty. For example, courses in "art appreciation" are fairly common; it is however unthinkable to find any "mathematical beauty appreciation" courses taught anywhere. The purpose of the present paper is to try to uncover the sense of the term "beauty" as it is currently used by mathematicians.}
}

@book{rousset_forme_1962,
  title = {{Forme et signification}},
  author = {Rousset, Jean},
  year = {1962},
  publisher = {{Librairie Jos\'e Corti}},
  googlebooks = {xRwuAAAAYAAJ},
  langid = {french}
}

@book{ruskin_seven_1920,
  title = {The Seven Lamps of Architecture. {{With}} Illustrations Drawn by the Author},
  author = {Ruskin, John},
  year = {1920},
  publisher = {{London Waverley Book Co}},
  urldate = {2021-01-28},
  abstract = {26},
  langid = {english},
  keywords = {Architecture}
}

@article{russell_logical_1950,
  title = {Logical Positivism},
  author = {Russell, Bertrand},
  year = {1950},
  journal = {Revue Internationale de Philosophie},
  volume = {4},
  number = {11},
  eprint = {23932366},
  eprinttype = {jstor},
  pages = {3--19},
  publisher = {{Revue Internationale de Philosophie}},
  issn = {0048-8143},
  urldate = {2021-09-10}
}

@article{rutzinger_deep_2019,
  title = {Deep {{Immediacy}}: {{Programming Beauty}}},
  shorttitle = {Deep {{Immediacy}}},
  author = {Rutzinger, Stefan and Schinegger, Kristina},
  year = {2019},
  journal = {Architectural Design},
  volume = {89},
  number = {5},
  pages = {98--103},
  issn = {1554-2769},
  doi = {10.1002/ad.2485},
  urldate = {2021-10-18},
  abstract = {Where might we find post-digital beauty? Stefan Rutzinger and Kristina Schinegger, architectural teachers and founding principals of Vienna-based soma architecture, argue that in an era where big data sets and artificial intelligence software assistants are taking the grunt work out of architectural production, notions of beauty and function need to be reworked and re-established.},
  langid = {english},
  keywords = {21er Haus,Aristotle,Expo 2012,Georges Bataille,Kinmen Port Terminal,Lisbon,Max Bense,Media Pavilion,Museum Belvedere,Oceanarium,soma,South Korea,Taiwan,Technical University of Vienna,The Programming of Beauty,Theme Pavilion,Yeosu}
}

@incollection{ryan_four_2021,
  title = {Four {{Types}} of {{Textual Space}} and Their {{Manifestations}} in {{Digital Narrative}}},
  booktitle = {Digital {{Narrative Spaces}}: {{An Interdisciplinary Examination}}},
  author = {Ryan, Marie-Laure},
  editor = {Punday, Daniel},
  year = {2021},
  month = dec,
  publisher = {{Routledge}},
  urldate = {2023-03-10},
  abstract = {The idea of textual space is normally associated with the space represented in the text, this is to say, with mimetic space (henceforth space 1). But the involvement of texts with space can take other forms: the embedding of textual objects in a},
  isbn = {978-0-367-51443-3},
  file = {/home/pierre/Zotero/storage/NESJ69K8/Four_Types_of_Textual_Space_and_their_Manifestations_in_Digital_Narrative.html}
}

@incollection{ryan_space_2009,
  title = {Space},
  booktitle = {Space},
  author = {Ryan, Marie-Laure},
  year = {2009},
  month = aug,
  pages = {420--433},
  publisher = {{De Gruyter}},
  doi = {10.1515/9783110217445.420},
  urldate = {2023-03-10},
  abstract = {Space was published in Handbook of Narratology on page 420.},
  isbn = {978-3-11-021744-5},
  langid = {english}
}

@book{ryle_concept_1951,
  title = {The {{Concept Of Mind}}},
  author = {Ryle, Gilbert},
  year = {1951},
  publisher = {{Hutchinsons University Library}},
  urldate = {2022-10-28},
  collaborator = {{Osmania University} and {Digital Library Of India}},
  langid = {english},
  lccn = {32022},
  keywords = {PHILOSOPHY. PSYCHOLOGY}
}

@book{sack_software_2019,
  title = {The {{Software Arts}}},
  author = {Sack, Warren},
  year = {2019},
  month = apr,
  publisher = {{The MIT Press}},
  doi = {10.7551/mitpress/9495.001.0001},
  abstract = {An alternative history of software that places the liberal arts at the very center of software's evolution.In The Software Arts, Warren Sack offers an alternative history of computing that places the arts at the very center of software's evolution. Tracing the origins of software to eighteenth-century French encyclopedists' step-by-step descriptions of how things were made in the workshops of artists and artisans, Sack shows that programming languages are the offspring of an effort to describe the mechanical arts in the language of the liberal arts. Sack offers a reading of the texts of computing\textemdash code, algorithms, and technical papers\textemdash that emphasizes continuity between prose and programs. He translates concepts and categories from the liberal and mechanical arts\textemdash including logic, rhetoric, grammar, learning, algorithm, language, and simulation\textemdash into terms of computer science and then considers their further translation into popular culture, where they circulate as forms of digital life. He considers, among other topics, the ``arithmetization'' of knowledge that presaged digitization; today's multitude of logics; the history of demonstration, from deduction to newer forms of persuasion; and the post-Chomsky absence of meaning in grammar. With The Software Arts, Sack invites artists and humanists to see how their ideas are at the root of software and invites computer scientists to envision themselves as artists and humanists.},
  isbn = {978-0-262-35236-9}
}

@article{saito_everyday_2012,
  title = {Everyday {{Aesthetics}} and {{Artification}}},
  author = {Saito, Yuriko},
  year = {2012},
  month = jan,
  journal = {Contemporary Aesthetics (Journal Archive)},
  number = {4},
  file = {/home/pierre/Zotero/storage/2NSWGZ3I/5.html}
}

@misc{sanglard_another_2011,
  title = {"{{Another World}}" Source Code Review},
  author = {Sanglard, Fabien},
  year = {2011},
  urldate = {2023-03-20},
  howpublished = {https://fabiensanglard.net/anotherWorld\_code\_review/index.php},
  annotation = {Exploring a source code repository always starts with finding out what the OS will select as the entry point. 99\% of the time it means finding the int main(int,char**) function9},
  file = {/home/pierre/Zotero/storage/4B9XNZXD/index.html}
}

@book{sanglard_game_2018,
  title = {Game {{Engine Black Book}}: {{DOOM}}},
  shorttitle = {Game {{Engine Black Book}}},
  author = {Sanglard, Fabien},
  year = {2018},
  publisher = {{Software Wizards}},
  abstract = {It was early 1993 and id Software was at the top of the PC gaming industry. Wolfenstein 3D had established the First Person Shooter genre and sales of its sequel Spear of Destiny were skyrocketing. The technology and tools id had taken years to develop were no match for their many competitors.It would have been easy for id to coast on their success, but instead they made the audacious decision to throw away everything they had built and start from scratch. Game Engine Black Book: Doom is the story of how they did it.This is a book about history and engineering. Don't expect much prose (the author's English has improved since the first book but is still broken). Instead you will find inside extensive descriptions and drawings to better understand all the challenges id Software had to overcome.~From the hardware -- the Intel 486 CPU, the Motorola 68040 CPU, and the NeXT workstations -- to the game engine's revolutionary design, open up to learn how DOOM changed the gaming industry and became a legend among video games.},
  googlebooks = {wel6DwAAQBAJ},
  langid = {english},
  keywords = {Computers / Computer Graphics}
}

@article{santos_systematic_2018,
  title = {A Systematic Review on the Code Smell Effect},
  author = {Santos, Jos{\'e} Amancio M. and {Rocha-Junior}, Jo{\~a}o B. and Prates, Luciana Carla Lins and do Nascimento, Rogeres Santos and Freitas, Mydi{\~a} Falc{\~a}o and de Mendon{\c c}a, Manoel Gomes},
  year = {2018},
  month = oct,
  journal = {Journal of Systems and Software},
  volume = {144},
  pages = {450--477},
  issn = {0164-1212},
  doi = {10.1016/j.jss.2018.07.035},
  urldate = {2022-06-03},
  abstract = {Context: Code smell is a term commonly used to describe potential problems in the design of software. The concept is well accepted by the software engineering community. However, some studies have presented divergent findings about the usefulness of the smell concept as a tool to support software development tasks. The reasons of these divergences have not been considered because the studies are presented independently. Objective: To synthesize current knowledge related to the usefulness of the smell concept. We focused on empirical studies investigating how smells impact the software development, the code smell effect. Method: A systematic review about the smell effect is carried out. We grouped the primary studies findings in a thematic map. Result: The smell concept does not support the evaluation of quality design in practice activities of software development. There is no strong evidence correlating smells and some important software development attributes, such as effort in maintenance. Moreover, the studies point out that human agreement on smell detection is low. Conclusion: In order to improve analysis on the subject, the area needs to better outline: (i) factors affecting human evaluation of smells; and (ii) a classification of types of smells, grouping them according to relevant characteristics.},
  langid = {english},
  keywords = {Code smell,Systematic review,Thematic synthesis},
  file = {/home/pierre/Zotero/storage/L3VIUYGA/S0164121218301444.html}
}

@misc{scale_why_2015,
  title = {Why {{Google Stores Billions}} of {{Lines}} of {{Code}} in a {{Single Repository}}},
  author = {{@Scale}},
  year = {2015},
  month = sep,
  urldate = {2021-10-08},
  abstract = {This talk will outline the scale of Google's codebase, describe Google's custom-built monolithic source repository, and discuss the reasons behind choosing this model of source control management. It will include background on the systems and workflows used at Google that make managing and working productively with a large repository feasible, in addition to a discussion of the advantages and trade-offs of this approach. Presenter: Rachel Potvin}
}

@misc{schachman_alternative_2012,
  title = {Alternative Programming Interfaces for Alternative Programmers},
  author = {Schachman, Toby},
  year = {2012},
  publisher = {{ACM}},
  doi = {10.1145/2384592.2384594},
  urldate = {2021-11-08},
  file = {/home/pierre/Zotero/storage/MLECHYEJ/2384592.html}
}

@book{schiffrin_approaches_1994,
  title = {Approaches to Discourse},
  author = {Schiffrin, Deborah},
  year = {1994},
  publisher = {{Oxford, UK ; Cambridge, Mass., USA : B. Blackwell}},
  urldate = {2022-05-06},
  abstract = {x, 470 pages ; 26 cm; Approaches to Discourse is a guide to the various frameworks, concepts, and methods available for the analysis of discourse within linguistics. It compares six dominant approaches to discourse analysis: speech act theory, pragmatics, ethnomethodology, interactional sociolinguistics, ethnography of communication, and variation theory. The author not only considers each approach from several standpoints but she also illustrates each approach through extensive applications to a variety of concrete social and linguistic problems facing discourse analysts. Exercises pose problems to which each approach can be applied. In the second edition of Approaches to Discourse, Schiffrin updates and revises the content, organization and exercises throughout the book. In Part 1, she broadens the discussion of discourse analysis through more definitions, new examples, synopsis of approaches not included in the book, and discussion of data. In Part 2, she adds simpler demonstrations of the approaches, clarifies sample analyses, presents recent trends (in a new section in each chapter called "New Developments"), and revises exercises. She also makes crucial additions and revisions to the chapters on ethnography and variation, and adds a chapter on Critical Discourse Analysis. In Part 3, she condenses the comparative chapters, adds a chapter on the integration of various approaches to discourse analysis, and discusses discourse analysis both inside and outside of linguistics; Includes bibliographical references (pages 439-458) and index; pt. I. The Scope of Discourse Analysis. 1. Overview---- 2. Definitions of Discourse ---- pt. II. Approaches to Discourse Analysis --- 3. Speech Act Theory --- 4. Interactional Sociolinguistics --- 5. The Ethnography of Communication --- 6. Pragmatics --- 7. Conversation Analysis --- 8. Variation Analysis ---- pt. III. Conclusion. 9. Structure and Function --- 10. Text and Context --- 11. Discourse and Communication --- 12. Conclusion: Language as Social Interaction ---- Appendix 1: Collecting Data --- Appendix 2: Transcription Conventions --- Appendix 3: Sample Data},
  collaborator = {{Internet Archive}},
  isbn = {978-0-631-16622-1 978-0-631-16623-8},
  langid = {english},
  keywords = {Discourse analysis}
}

@article{schultz_review_2014,
  title = {Review of {{L}}'univers Des Math\'ematiciens. {{L}}'ethos Professionnel Des plus Rigoureux Des Scientifiques},
  author = {Schultz, {\'E}milien},
  year = {2014},
  journal = {Revue fran\c{c}aise de sociologie},
  volume = {55},
  number = {2},
  eprint = {24380753},
  eprinttype = {jstor},
  pages = {377--379},
  publisher = {{[Sciences Po University Press, Association Revue Fran\c{c}aise de Sociologie]}},
  issn = {0035-2969},
  urldate = {2022-12-15},
  collaborator = {Zarca, Bernard}
}

@incollection{schummer_aesthetic_2009,
  title = {Aesthetic {{Values}} in {{Technology}} and {{Engineering Design}}},
  booktitle = {Philosophy of {{Technology}} and {{Engineering Sciences}}},
  author = {Schummer, Joachim and MacLennan, Bruce and Taylor, Nigel},
  editor = {Meijers, Anthonie},
  year = {2009},
  month = jan,
  series = {Handbook of the {{Philosophy}} of {{Science}}},
  pages = {1031--1068},
  publisher = {{North-Holland}},
  address = {{Amsterdam}},
  doi = {10.1016/B978-0-444-51667-1.50042-2},
  urldate = {2021-10-04},
  abstract = {Aesthetic values are difficult to define and to identify in engineering activities for several reasons. One reason is that the professional aesthetics discourse is narrowly focused on the fine arts including literature, such that, particularly for many Anglo-Saxon aestheticists, aesthetics has become equivalent to the study of the fine arts or art criticism. Unfortunately, that makes their conceptual apparatus largely inappropriate for other fields of aesthetics, including engineering aesthetics. Another reason is that scientists and engineers frequently use terms such as ``beautiful'', which would otherwise be typical indicators of aesthetic appreciation, to express epistemic or functional approval or to popularize their activity to a broader public. It is useful therefore to start with a broad concept of aesthetic values by considering any values that are not of epistemic, functional, or ethical nature. The remaining values typically include familiar aesthetic values such as beauty, elegance, harmony (non-epistemic), simplicity and clarity, and familiarity, as well their opposites on which aesthetic disapproval is based. In addition, something can aesthetically please or displease by resemblance to something else that pleases or displeases for aesthetic reasons only, which is typically expressed by analogies or metaphors and which sometimes leads to the formation of aesthetic styles. Whenever such aesthetic values contribute to preferences in engineering decisions, there is evidence that they inform the engineering activity.},
  langid = {english},
  file = {/home/pierre/Zotero/storage/TY2RZCVM/B9780444516671500422.html}
}

@book{scopatz_effective_2015,
  title = {Effective {{Computation}} in {{Physics}}},
  author = {Scopatz, Anthony and Huff, Kathryn D.},
  year = {2015},
  publisher = {{O'Reilly Media}},
  abstract = {More physicists today are taking on the role of software developer as part of their research, but software development isn't always easy or obvious, even for physicists. This practical book teaches essential software development skills to help you automate and accomplish nearly any aspect of research in a physics-based field. Written by two PhDs in nuclear engineering, this book includes practical examples drawn from a working knowledge of physics concepts. You'll learn how to use the Python programming language to perform everything from collecting and analyzing data to building software and publishing your results. In four parts, this book includes: Getting Started: Jump into Python, the command line, data containers, functions, flow control and logic, and classes and objects Getting It Done: Learn about regular expressions, analysis and visualization, NumPy, storing data in files and HDF5, important data structures in physics, computing in parallel, and deploying software Getting It Right: Build pipelines and software, learn to use local and remote version control, and debug and test your code Getting It Out There: Document your code, process and publish your findings, and collaborate efficiently; dive into software licenses, ownership, and copyright procedures},
  isbn = {978-1-4919-0153-3},
  langid = {english},
  keywords = {Computers / General,Computers / Programming Languages / Python,Science / Physics / Mathematical \& Computational}
}

@book{scott_programming_2009,
  title = {Programming {{Language Pragmatics}}},
  author = {Scott, Michael L.},
  year = {2009},
  month = apr,
  edition = {3rd edition},
  publisher = {{Morgan Kaufmann}},
  abstract = {Programming Language Pragmatics, Third Edition, is the most comprehensive programming language book available today. Taking the perspective that language design and implementation are tightly interconnected and that neither can be fully understood in isolation, this critically acclaimed and bestselling book has been thoroughly updated to cover the most recent developments in programming language design, inclouding Java 6 and 7, C++0X, C\# 3.0, F\#, Fortran 2003 and 2008, Ada 2005, and Scheme R6RS. A new chapter on run-time program management covers virtual machines, managed code, just-in-time and dynamic compilation, reflection, binary translation and rewriting, mobile code, sandboxing, and debugging and program analysis tools. Over 800 numbered examples are provided to help the reader quickly cross-reference and access content. This text is designed for undergraduate Computer Science students, programmers, and systems and software engineers.},
  isbn = {978-81-312-2256-0},
  langid = {english}
}

@book{scruton_aesthetics_2013,
  title = {The {{Aesthetics}} of {{Architecture}}},
  author = {Scruton, Roger},
  year = {2013},
  month = apr,
  publisher = {{Princeton University Press}},
  address = {{Princeton}},
  urldate = {2022-07-15},
  abstract = {A landmark account of architectural theory and practice from acclaimed philosopher Roger Scruton},
  isbn = {978-0-691-15833-4},
  langid = {english},
  file = {/home/pierre/Zotero/storage/WHUGKF3W/the-aesthetics-of-architecture.html}
}

@article{seaver_captivating_2019,
  title = {Captivating Algorithms: {{Recommender}} Systems as Traps},
  shorttitle = {Captivating Algorithms},
  author = {Seaver, Nick},
  year = {2019},
  month = dec,
  journal = {Journal of Material Culture},
  volume = {24},
  number = {4},
  pages = {421--436},
  issn = {1359-1835},
  doi = {10.1177/1359183518820366},
  urldate = {2021-01-28},
  abstract = {Algorithmic recommender systems are a ubiquitous feature of contemporary cultural life online, suggesting music, movies, and other materials to their users. This article, drawing on fieldwork with developers of recommender systems in the US, describes a tendency among these systems' makers to describe their purpose as `hooking' people \textendash{} enticing them into frequent or enduring usage. Inspired by steady references to capture in the field, the author considers recommender systems as traps, drawing on anthropological theories about animal trapping. The article charts the rise of `captivation metrics' \textendash{} measures of user retention \textendash{} enabled by a set of transformations in recommenders' epistemic, economic, and technical contexts. Traps prove useful for thinking about how such systems relate to broader infrastructural ecologies of knowledge and technology. As recommenders spread across online cultural infrastructures and become practically inescapable, thinking with traps offers an alternative to common ethical framings that oppose tropes of freedom and coercion.},
  langid = {english},
  keywords = {algorithms,behaviorism,infrastructure,recommender systems,traps}
}

@book{sebesta_concepts_2018,
  title = {Concepts of {{Programming Languages}}},
  author = {Sebesta, Robert W.},
  year = {2018},
  month = feb,
  edition = {12th edition},
  publisher = {{Pearson}},
  address = {{NY, NY}},
  abstract = {As part of the Pearson print rental program, this print textbook is available for students to rent for their Spring 2018 classes. The print rental program provides students with affordable access to learning materials, so they come to class ready to succeed For courses in computer programming. Evaluates the fundamentals of contemporary computer programming languages Concepts of Computer Programming Languages, 12th Edition introduces readers to the fundamental concepts of computer programming languages and provides them with the tools necessary to evaluate contemporary and future languages. Through a critical analysis of design issues of various program languages, the text teaches readers the essential differences between computing with specific languages, while the in-depth discussion of programming language structures also prepares them to study compiler design. The 12th Edition includes new material on contemporary languages like Swift and Python, replacing discussions of outdated languages.},
  isbn = {978-0-13-499718-6},
  langid = {english}
}

@misc{seeley_how_2004,
  title = {How {{Not}} to {{Write Fortran}} in {{Any Language}} - {{ACM Queue}}},
  author = {Seeley, Donn},
  year = {2004},
  month = dec,
  urldate = {2022-04-14}
}

@article{segal_when_2005,
  title = {When {{Software Engineers Met Research Scientists}}: {{A Case Study}}},
  shorttitle = {When {{Software Engineers Met Research Scientists}}},
  author = {Segal, Judith},
  year = {2005},
  month = oct,
  journal = {Empirical Software Engineering},
  volume = {10},
  number = {4},
  pages = {517--536},
  issn = {1573-7616},
  doi = {10.1007/s10664-005-3865-y},
  urldate = {2022-04-02},
  abstract = {This paper describes a case study of software engineers developing a library of software components for a group of research scientists, using a traditional, staged, document-led methodology. The case study reveals two problems with the use of the methodology. The first is that it demands an upfront articulation of requirements, whereas the scientists had experience, and hence expectations, of emergent requirements; the second is that the project documentation does not suffice to construct a shared understanding. Reflecting on our case study, we discuss whether combining agile elements with a traditional methodology might have alleviated these problems. We then argue that the rich picture painted by the case study, and the reflections on methodology that it inspires, has a relevance that reaches beyond the original context of the study.},
  langid = {english}
}

@article{seguy_certeau_1992,
  title = {{Certeau (Michel de) L'Invention du quotidien t.I, Arts de faire}},
  author = {S{\'e}guy, Jean},
  year = {1992},
  journal = {Archives de Sciences Sociales des Religions},
  volume = {80},
  number = {1},
  pages = {249--250},
  urldate = {2021-01-28},
  copyright = {free},
  langid = {fre},
  file = {/home/pierre/Zotero/storage/7YDCM7HU/assr_0335-5985_1992_num_80_1_1564_t1_0249_0000_3.html}
}

@book{seibel_coders_2009,
  title = {Coders at {{Work}}: {{Reflections}} on the {{Craft}} of {{Programming}}},
  shorttitle = {Coders at {{Work}}},
  author = {Seibel, Peter},
  year = {2009},
  month = sep,
  publisher = {{Apress}},
  abstract = {Peter Seibel interviews 15 of the most interesting computer programmers alive today in Coders at Work, offering a companion volume to Apress's highly acclaimed best-seller Founders at Work by Jessica Livingston. As the words ``at work'' suggest, Peter Seibel focuses on how his interviewees tackle the day-to-day work of programming, while revealing much more, like how they became great programmers, how they recognize programming talent in others, and what kinds of problems they find most interesting. Hundreds of people have suggested names of programmers to interview on the Coders at Work web site: www.codersatwork.com. The complete list was 284 names. Having digested everyone's feedback, we selected 15 folks who've been kind enough to agree to be interviewed: Frances Allen: Pioneer in optimizing compilers, first woman to win the Turing Award (2006) and first female IBM fellow Joe Armstrong: Inventor of Erlang Joshua Bloch: Author of the Java collections framework, now at Google Bernie Cosell: One of the main software guys behind the original ARPANET IMPs and a master debugger Douglas Crockford: JSON founder, JavaScript architect at Yahoo! L. Peter Deutsch: Author of Ghostscript, implementer of Smalltalk-80 at Xerox PARC and Lisp 1.5 on PDP-1 Brendan Eich: Inventor of JavaScript, CTO of the Mozilla Corporation Brad Fitzpatrick: Writer of LiveJournal, OpenID, memcached, and Perlbal Dan Ingalls: Smalltalk implementor and designer Simon Peyton Jones: Coinventor of Haskell and lead designer of Glasgow Haskell Compiler Donald Knuth: Author of The Art of Computer Programming and creator of TeX Peter Norvig: Director of Research at Google and author of the standard text on AI Guy Steele: Coinventor of Scheme and part of the Common Lisp Gang of Five, currently working on Fortress Ken Thompson: Inventor of UNIX Jamie Zawinski: Author of XEmacs and early Netscape/Mozilla hacker What you'll learnHow the best programmers in the world do their jobs! Who this book is for Programmers interested in the point of view of leaders in the field. Programmers looking for approaches that work for some of these outstanding programmers. Table of Contents Jamie Zawinski Brad Fitzpatrick Douglas Crockford Brendan Eich Joshua Bloch Joe Armstrong Simon Peyton Jones Peter Norvig Guy Steele Dan Ingalls L Peter Deutsch Ken Thompson Fran Allen Bernie Cosell Donald Knuth},
  isbn = {978-1-4302-1948-4},
  langid = {english},
  keywords = {Business \& Economics / Operations Research,Computers / Programming / General}
}

@book{sennett_craftsman_2009,
  title = {The {{Craftsman}}},
  author = {Sennett, Richard},
  year = {2009},
  publisher = {{Yale University Press}},
  abstract = {In his most ambitious book to date, Richard Sennett offers an original perspective on craftsmanship and its close connections to work and ethical values Craftsmanship, says Richard Sennett, names the basic human impulse to do a job well for its own sake, and good craftsmanship involves developing skills and focusing on the work rather than ourselves. The computer programmer, the doctor, the artist, and even the parent and citizen all engage in a craftsman's work. In this thought-provoking book, Sennett explores the work of craftsmen past and present, identifies deep connections between material consciousness and ethical values, and challenges received ideas about what constitutes good work in today's world. The Craftsman engages the many dimensions of skill\textendash from the technical demands to the obsessive energy required to do good work. Craftsmanship leads Sennett across time and space, from ancient Roman brickmakers to Renaissance goldsmiths to the printing presses of Enlightenment Paris and the factories of industrial London; in the modern world he explores what experiences of good work are shared by computer programmers, nurses and doctors, musicians, glassblowers, and cooks. Unique in the scope of his thinking, Sennett expands previous notions of crafts and craftsmen and apprises us of the surprising extent to which we can learn about ourselves through the labor of making physical things.},
  isbn = {978-0-300-15119-0},
  langid = {english},
  keywords = {Business \& Economics / Labor,History / World,Philosophy / Ethics \& Moral Philosophy,Philosophy / Social,Social Science / Sociology / General}
}

@book{senseney_art_2011,
  title = {The {{Art}} of {{Building}} in the {{Classical World}}: {{Vision}}, {{Craftsmanship}}, and {{Linear Perspective}} in {{Greek}} and {{Roman Architecture}}},
  shorttitle = {The {{Art}} of {{Building}} in the {{Classical World}}},
  author = {Senseney, John R.},
  year = {2011},
  month = mar,
  publisher = {{Cambridge University Press}},
  abstract = {This book examines the application of drawing in the design process of classical architecture, exploring how the tools and techniques of drawing developed for architecture subsequently shaped theories of vision and representations of the universe in science and philosophy. Building on recent scholarship that examines and reconstructs the design process of classical architecture, John R. Senseney focuses on technical drawing in the building trade as a model for the expression of visual order, showing that the techniques of ancient Greek drawing actively determined concepts about the world. He argues that the uniquely Greek innovations of graphic construction determined principles that shaped the massing, special qualities and refinements of buildings and the manner in which order itself was envisioned.},
  isbn = {978-1-139-49726-8},
  langid = {english},
  keywords = {Architecture / History / General,Art / History / Ancient \& Classical,History / Ancient / General,Social Science / Archaeology}
}

@book{sethi_programming_1996,
  title = {Programming {{Languages}}: {{Concepts}} and {{Constructs}}},
  shorttitle = {Programming {{Languages}}},
  author = {Sethi, Ravi},
  year = {1996},
  address = {{Reading, Mass}},
  abstract = {Thoroughly revised to provide readable coverage of the major programming paradigms. Includes an expanded discussion of object-oriented programming. DLC: Programming languages (Electronic computers)},
  isbn = {978-0-201-59065-4},
  langid = {english}
}

@book{shaw_software_1996,
  title = {Software {{Architecture}}: {{Perspectives}} on an {{Emerging Discipline}}},
  shorttitle = {Software {{Architecture}}},
  author = {Shaw, Mary and Garlan, David},
  year = {1996},
  month = apr,
  publisher = {{Pearson}},
  address = {{Upper Saddle River, N.J}},
  abstract = {Good software developers often adopt one or several architectural patterns as strategies for system organization. But, although they use these patterns purposefully, they often use them informally and nearly unconsciously. This book organizes this substantial emerging "folklore" of system design \textendash{} with its rich language of system description \textendash{} and closes the gap between the useful abstractions (constructs and patterns) of system design and the current models, notations and tools. It identifies useful patterns clearly, gives examples, compares them, and evaluates their utility in various settings \textendash{} allowing readers to develop a repertoire of useful techniques that goes beyond the single-minded current fads. KEY TOPICS: Examines the ways in which architectural issues can impact software design; shows how to design new systems in principled ways using well-understood architectural paradigms; emphasizes informal descriptions, touching lightly on formal notations and specifications, and the tools that support them; explains how to understand and evaluate the design of existing software systems from an architectural perspective; and presents concrete examples of actual system architectures that can serve as models for new designs. MARKET: For professional software developers looking for new ideas about system organization.},
  isbn = {978-0-13-182957-2},
  langid = {english}
}

@book{shaw_software_1996a,
  title = {Software Architecture : Perspectives on an Emerging Discipline},
  shorttitle = {Software Architecture},
  author = {Shaw, Mary},
  year = {1996},
  publisher = {{Upper Saddle River, N.J. : Prentice Hall}},
  urldate = {2022-07-15},
  abstract = {xxi, 242 p. : 24 cm; "An Alan R. Apt book."; Includes bibliographical references (p. 227-237) and index},
  collaborator = {{Internet Archive}},
  isbn = {978-0-13-182957-2},
  langid = {english},
  keywords = {Software architecture}
}

@article{sheil_psychological_1981,
  title = {The {{Psychological Study}} of {{Programming}}},
  author = {Sheil, B. A.},
  year = {1981},
  month = mar,
  journal = {ACM Computing Surveys},
  volume = {13},
  number = {1},
  pages = {101--120},
  issn = {0360-0300},
  doi = {10.1145/356835.356840},
  urldate = {2022-11-18},
  file = {/home/pierre/Zotero/storage/FE5EQUB4/Sheil - 1981 - The Psychological Study of Programming.pdf}
}

@article{shneiderman_measuring_1977,
  title = {Measuring Computer Program Quality and Comprehension},
  author = {Shneiderman, B.},
  year = {1977},
  month = jul,
  journal = {International Journal of Man-Machine Studies},
  volume = {9},
  number = {4},
  pages = {465--478},
  issn = {0020-7373},
  doi = {10.1016/S0020-7373(77)80014-X},
  urldate = {2022-12-02},
  abstract = {Judging the relative quality of computer programs and a programmer's comprehension of a given program has proven to be a difficult task. Ability to debug, modify, hand simulate execution or respond to questions about the program all have their weaknesses as comprehension metrics. This paper offers experimental evidence which supports the use of memorization/recall tasks as a further basis for judging program quality and programmer comprehension. A syntactic/semantic model of programmer behavior is presented to provide a basis for this hypothesis.},
  langid = {english},
  keywords = {cognitive psychology,commenting,memorization,modification,program design,programmer behavior,programming,programming experiments,programming languages,recall,structured programming},
  file = {/home/pierre/Zotero/storage/X66QRPJ8/S002073737780014X.html}
}

@book{shusterman_aesthetic_2007,
  title = {Aesthetic {{Experience}}},
  author = {Shusterman, Richard and Tomlin, Adele},
  year = {2007},
  publisher = {{Taylor \& Francis Group}},
  address = {{Florence, UNITED STATES}},
  isbn = {978-0-203-93910-9},
  keywords = {Aesthetics.,Experience.}
}

@article{simmel_problem_1991,
  title = {The {{Problem}} of {{Style}}},
  author = {Simmel, Georg},
  year = {1991},
  month = aug,
  journal = {Theory, Culture \& Society},
  volume = {8},
  number = {3},
  pages = {63--71},
  publisher = {{SAGE Publications Ltd}},
  issn = {0263-2764},
  doi = {10.1177/026327691008003004},
  urldate = {2022-12-19},
  langid = {english}
}

@book{simon_sciences_1996,
  title = {The {{Sciences}} of the {{Artificial}}},
  author = {Simon, Herbert},
  year = {1996},
  publisher = {{MIT Press}},
  urldate = {2022-10-11},
  abstract = {Continuing his exploration of the organization of complexity and the science of design, this new edition of Herbert Simon's classic work on artificial intell...},
  isbn = {978-0-262-69191-8},
  langid = {american},
  file = {/home/pierre/Zotero/storage/F3YM4I9X/the-sciences-of-the-artificial.html}
}

@phdthesis{simondon_mode_1958,
  title = {{Du mode d'existence des objets techniques}},
  author = {Simondon, Gilbert},
  year = {1958},
  address = {{Paris}},
  langid = {french},
  school = {Aubier et Montaigne}
}

@article{sinclair_aesthetic_2011,
  title = {Aesthetic {{Considerations}} in {{Mathematics}}},
  author = {Sinclair, Nathalie},
  year = {2011},
  month = jan,
  journal = {Journal of Humanistic Mathematics},
  volume = {1},
  number = {1},
  pages = {2--32},
  issn = {21598118},
  doi = {10.5642/jhummath.201101.03},
  urldate = {2023-03-24},
  abstract = {Drawing on some of the principles of humanistic mathematics rst outlined by Alvin White, this paper seeks to examine the way in which value judgments are implicated in the growth of the mathematics discipline. After a short overview of some of the roles ascribed to the mathematical aesthetic historically, I turn to more contemporary positioning of the aesthetic in order to develop a framework that oers insight into the particular values, assumptions and desires that constrain what is done in mathematics, how it is done and why. My goal, at least in part, is to bring together under one umbrella some of the recent work that is being done in the cultural ethnography and cognitive history of mathematics and, in so doing, provide a stronger rationale for the importance and relevance of aesthetic considerations in the history and philosophy of mathematics. Finally, I use this framework to promote the idea of a mathematics critic, who could do for mathematics what art critics do for the arts, namely, to not only evaluate and explain art, but to work toward establishing its accessibility and credibility. In the edited collection Essays in Humanistic Mathematics, Alvin M. White [58] describes the humanistic dimension of mathematics as including both: \textbackslash an appreciation of the role of intuition in understanding and creating concepts" and \textbackslash An understanding of the value judgments implied in the growth of any discipline [...] what is investigated, how it is investigated, or why it is investigated" (vii). For me, both these aspects relate strongly to the mathematical aesthetic in two ways. First, in writing about the importance of the value judgments made in the discipline, White points to the axiological dimension of the philosophy of mathematics, which include both aesthetic and ethical questions of what is beautiful or ugly, good or bad, and why. Second, in pointing to the role of intuition in understanding and creating concepts, I interpret White as being concerned with the informal and nonpropositional ways in which mathematical ideas derive their meaning, which},
  file = {/home/pierre/Zotero/storage/6ITJUEHS/Sinclair - 2011 - Aesthetic Considerations in Mathematics.pdf}
}

@inproceedings{sinclair_many_2010,
  title = {The {{Many}} and the {{Few}}: {{Mathematics}}, {{Democracy}} and the {{Aesthetic}}},
  shorttitle = {The {{Many}} and the {{Few}}},
  author = {Sinclair, N. and Pimm, David},
  year = {2010},
  urldate = {2023-03-30},
  abstract = {Educational Insights | Volume 13, Number 1, 2010 | Nathalie Sinclair \ldots imm | The Many and the Few: Mathematics, Democracy and the Aesthetichttp://ccfi.educ.ubc.ca/publication/insights/v13n01/articles/sinclair\_pimm/index.html Page 1 of 18 Sinclair, N. and Pimm, D. (2010 Many and the Few: Mathematics, Democracy and the Aesthetic ). The EducationalInsights, 13(1).[Available:http://www.ccfi.educ.ubc.ca/publication/insights/v13n01/articles/sinclair\_pimm/index.html]},
  file = {/home/pierre/Zotero/storage/RYTMZ7IA/Sinclair and Pimm - 2010 - The Many and the Few Mathematics, Democracy and t.pdf}
}

@article{sinclair_roles_2004,
  title = {The {{Roles}} of the {{Aesthetic}} in {{Mathematical Inquiry}}},
  author = {Sinclair, Nathalie},
  year = {2004},
  month = jul,
  journal = {Mathematical Thinking and Learning},
  volume = {6},
  number = {3},
  pages = {261--284},
  issn = {1098-6065, 1532-7833},
  doi = {10.1207/s15327833mtl0603_1},
  urldate = {2023-03-29},
  abstract = {Mathematicians have long claimed that the aesthetic plays a fundamental role in the development and appreciation of mathematical knowledge. To date, however, it has been unclear how the aesthetic might contribute to the teaching and learning of school mathematics. This is due in part to the fact that mathematicians' aesthetic claims have been inadequately analyzed, making it difficult for mathematics educators to discern any potential pedagogical benefits. This article provides a pragmatic analysis of the roles of the aesthetic in mathematical inquiry. It then probes some of the beliefs and values that underlie mathematical aesthetic responses and reveals the important interplay between the aesthetic, cognitive, and affective processes involved in mathematical inquiry.},
  langid = {english}
}

@inproceedings{smith_linguistic_1982,
  title = {Linguistic and {{Computational Semantics}}},
  booktitle = {Proc., 20th {{Annual Meeting}}, {{Assoc}}. {{Comp}}. {{Ling}}},
  author = {Smith, Brian Cantwell},
  year = {1982},
  pages = {9--15},
  abstract = {We argue that because the very concept of computation rests on notions of interpretation, the semantics of natural anguages and the semantics of computational formalisms are in the deepest sense the same subject. The attempt to use computational formalisms in aid of an explanation of natural language semantics, therefore, is an enterprise that must be undertaken with particular care. We describe a framework for semantical analysis that we have used in the computational realm, and suggest hat it may serve to underwrite computadonally-oriented linguistic ser.antics as well. The major feature of this framework is the explicit recognition of both the declarative and the procedural import of meaningful expressions; we argue that whereas these two viewpoints have traditionally been taken as alternative, any comprehensive semantical theory must account for how both aspects of an expression contribute to its},
  file = {/home/pierre/Zotero/storage/NABYNT45/Smith - 1982 - Linguistic and Computational Semantics.pdf}
}

@book{smith_origin_1998,
  title = {On the {{Origin}} of {{Objects}}},
  author = {Smith, Brian Cantwell},
  year = {1998},
  month = jan,
  edition = {Reprint edition},
  publisher = {{A Bradford Book}},
  address = {{Cambridge, Mass.}},
  abstract = {On the Origin of Objects is the culmination of Brian Cantwell Smith's decade-long investigation into the philosophical and metaphysical foundations of computation, artificial intelligence, and cognitive science. Based on a sustained critique of the formal tradition that underlies the reigning views, he presents an argument for an embedded, participatory, "irreductionist," metaphysical alternative. Smith seeks nothing less than to revise our understanding not only of the machines we build but also of the world with which they interact.On the Origin of Objects is the culmination of Brian Cantwell Smith's decade-long investigation into the philosophical and metaphysical foundations of computation, artificial intelligence, and cognitive science. Based on a sustained critique of the formal tradition that underlies the reigning views, he presents an argument for an embedded, participatory, "irreductionist," metaphysical alternative. Smith seeks nothing less than to revise our understanding not only of the machines we build but also of the world with which they interact.Smith's ambitious project begins as a search for a comprehensive theory of computation, able to do empirical justice to practice and conceptual justice to the computational theory of mind. A rigorous commitment to these two criteria ultimately leads him to recommend a radical overhaul of our traditional conception of metaphysics.Everything that exists\rule{1em}{1pt}objects, properties, life, practice\rule{1em}{1pt}lies Smith claims in the "middle distance," an intermediate realm of partial engagement with and partial separation from, the enveloping world. Patterns of separation and engagement are taken to underlie a single notion unifying representation and ontology: that of subjects' "registration" of the world around them.Along the way, Smith offers many fascinating ideas: the distinction between particularity and individuality, the methodological notion of an "inscription error," an argument that there are no individuals within physics, various deconstructions of the type-instance distinction, an analysis of formality as overly disconnected ("discreteness run amok"), a conception of the boundaries of objects as properties of unruly interactions between objects and subjects, an argument for the theoretical centrality of reference preservation, and a theatrical, acrobatic metaphor for the contortions involved in the preservation of reference and resultant stabilization of objects. Sidebars and diagrams throughout the book help clarify and guide Smith's highly original and compelling argument.A Bradford Book},
  isbn = {978-0-262-69209-0},
  langid = {english}
}

@book{sommerville_software_2010,
  title = {Software {{Engineering}}},
  author = {Sommerville, Ian},
  year = {2010},
  month = mar,
  edition = {9th edition},
  publisher = {{Pearson}},
  address = {{Boston}},
  isbn = {978-0-13-703515-1},
  langid = {english}
}

@article{sondheim_introduction_2001,
  title = {Introduction: {{Codework}}},
  author = {Sondheim, Alan},
  year = {2001},
  month = oct,
  journal = {American Book Review},
  volume = {22},
  number = {6}
}

@misc{sparkes_your_2015,
  type = {Forum Post},
  title = {Your Favourite Algorithm and the Lesson It Taught You},
  author = {{sparkes}},
  year = {2015},
  month = aug,
  journal = {Stack Overflow},
  urldate = {2022-04-14},
  file = {/home/pierre/Zotero/storage/FPWAV9AT/your-favourite-algorithm-and-the-lesson-it-taught-you.html}
}

@book{spinellis_beautiful_2009,
  title = {Beautiful {{Architecture}}: {{Leading Thinkers Reveal}} the {{Hidden Beauty}} in {{Software Design}}},
  shorttitle = {Beautiful {{Architecture}}},
  author = {Spinellis, Diomidis and Gousios, Georgios},
  year = {2009},
  month = jan,
  publisher = {{"O'Reilly Media, Inc."}},
  abstract = {What are the ingredients of robust, elegant, flexible, and maintainable software architecture? Beautiful Architecture answers this question through a collection of intriguing essays from more than a dozen of today's leading software designers and architects. In each essay, contributors present a notable software architecture, and analyze what makes it innovative and ideal for its purpose. Some of the engineers in this book reveal how they developed a specific project, including decisions they faced and tradeoffs they made. Others take a step back to investigate how certain architectural aspects have influenced computing as a whole. With this book, you'll discover:How Facebook's architecture is the basis for a data-centric application ecosystemThe effect of Xen's well-designed architecture on the way operating systems evolveHow community processes within the KDE project help software architectures evolve from rough sketches to beautiful systemsHow creeping featurism has helped GNU Emacs gain unanticipated functionalityThe magic behind the Jikes RVM self-optimizable, self-hosting runtimeDesign choices and building blocks that made Tandem the choice platform in high-availability environments for over two decadesDifferences and similarities between object-oriented and functional architectural viewsHow architectures can affect the software's evolution and the developers' engagementGo behind the scenes to learn what it takes to design elegant software architecture, and how it can shape the way you approach your own projects, with Beautiful Architecture.},
  isbn = {978-0-596-55439-2},
  langid = {english},
  keywords = {Computers / Computer Architecture,Computers / General,Computers / Software Development \& Engineering / General,Computers / Software Development \& Engineering / Systems Analysis \& Design}
}

@misc{spolosky_craftsmanship_2003,
  title = {Craftsmanship},
  author = {Spolosky, Joel},
  year = {2003},
  month = dec,
  journal = {Joel on Software},
  urldate = {2022-07-19},
  abstract = {Making software is not a manufacturing process. In the 1980s everyone was running around terrified that Japanese software companies were setting up ``software factories'' that could churn\ldots},
  howpublished = {https://www.joelonsoftware.com/2003/12/01/craftsmanship-2/},
  langid = {american},
  file = {/home/pierre/Zotero/storage/Z8GL4TCF/craftsmanship-2.html}
}

@misc{stackexchange_why_2014,
  title = {Why Do Many Talented Scientists Write Horrible Software?},
  author = {Stack Exchange},
  year = {2014},
  month = mar,
  journal = {Academia Stack Exchange},
  urldate = {2022-04-02},
  file = {/home/pierre/Zotero/storage/LEYFHPAU/why-do-many-talented-scientists-write-horrible-software.html}
}

@misc{stackoverflow_how_2013,
  type = {Forum Post},
  title = {How Can You Explain "Beautiful Code" to a Non-Programmer?},
  author = {Stack Overflow},
  year = {2013},
  month = jun,
  journal = {Software Engineering Stack Exchange},
  urldate = {2022-06-01}
}

@misc{stackoverflow_stack_2021,
  title = {Stack {{Overflow Developer Survey}} 2021},
  author = {Stack Overflow},
  year = {2021},
  journal = {Stack Overflow},
  urldate = {2022-04-14},
  abstract = {In May 2021 over 80,000 developers told us how they learn and level up, which tools they're using, and what they want.},
  langid = {english},
  file = {/home/pierre/Zotero/storage/DGP2Q69D/2021.html}
}

@book{stallman_free_2002,
  title = {Free Software, Free Society : Selected Essays of {{Richard M}}. {{Stallman}}},
  shorttitle = {Free Software, Free Society},
  author = {Stallman, Richard and Free Software Foundation (Cambridge, Mass )},
  year = {2002},
  publisher = {{Boston, MA : Free Software Foundation}},
  urldate = {2021-10-11},
  abstract = {The intersection of ethics, law, business and computer software is the subject of these essays and speeches by MacArthur Foundation Grant winner, Richard M. Stallman. This collection includes historical writings such as The GNU Manifesto, which defined and launched the activist Free Software Movement, along with new writings on hot topics in copyright, patent law, and the controversial issue of "trusted computing." Stallman takes a critical look at common abuses of copyright law and patents when applied to computer software programs, and how these abuses damage our entire society and remove our existing freedoms. He also discusses the social aspects of software and how free software can create community and social justice. Given the current turmoil in copyright and patent laws, including the DMCA and proposed CBDTPA, these essays are more relevant than ever. Stallman tackles head-on the essential issues driving the current changes in copyright law. He argues that for creativity to flourish, software must be free of inappropriate and overly-broad legal constraints. Over the past twenty years his arguments and actions have changed the course of software history; this new book is sure to impact the future of software and legal policies in the years to come},
  isbn = {978-1-882114-98-6},
  langid = {english},
  keywords = {Ethics \& Moral Philosophy}
}

@misc{stanfordhcigroup_shrdlu_1973,
  title = {{{SHRDLU}}},
  author = {Stanford HCI Group},
  year = {1973},
  urldate = {2022-09-26},
  howpublished = {http://hci.stanford.edu/winograd/shrdlu/},
  file = {/home/pierre/Zotero/storage/JGBT67MJ/shrdlu.html}
}

@book{stansifer_study_1994,
  title = {Study of {{Programming Languages}}, {{The}}},
  author = {Stansifer, Ryan},
  year = {1994},
  month = jul,
  edition = {1st edition},
  publisher = {{Prentice Hall}},
  address = {{Englewood Cliffs, N.J}},
  abstract = {Examines the principles underlying the major paradigms of programming languages, for senior and graduate students in programing languages. Covers the history of the field, attribute grammars, inclusion polymorphism, the PROLOG logic programming paradigm, lambda calculus, denotational semantics, and the axiomatic approach of Hoare. Includes exercises and examples in Ada, Modula-3, and ML languages. Assumes familiarity with programming. Annotation copyright Book News, Inc. Portland, Or.},
  isbn = {978-0-13-726936-5},
  langid = {english}
}

@article{starikova_aesthetic_2018,
  title = {Aesthetic {{Preferences}} in {{Mathematics}}: {{A Case Study}}\textdagger},
  shorttitle = {Aesthetic {{Preferences}} in {{Mathematics}}},
  author = {Starikova, Irina},
  year = {2018},
  month = jun,
  journal = {Philosophia Mathematica},
  volume = {26},
  number = {2},
  pages = {161--183},
  issn = {1744-6406},
  doi = {10.1093/philmat/nkx014},
  urldate = {2023-03-22},
  abstract = {Although mathematicians often use it, mathematical beauty is a philosophically challenging concept. How can abstract objects be evaluated as beautiful? Is this related to their visualisations? Using an example from graph theory (the highly symmetric Petersen graph), this paper argues that, in making aesthetic judgements, mathematicians may be responding to a combination of perceptual properties of visual representations and mathematical properties of abstract structures; the latter seem to carry greater weight. Mathematical beauty thus primarily involves mathematicians' sensitivity to aesthetics of the abstract.},
  file = {/home/pierre/Zotero/storage/4RSQB24P/Starikova - 2018 - Aesthetic Preferences in Mathematics A Case Study.pdf}
}

@article{steele_macaroni_1977,
  title = {Macaroni Is Better than Spaghetti},
  author = {Steele, Guy Lewis},
  year = {1977},
  month = aug,
  journal = {ACM SIGPLAN Notices},
  volume = {12},
  number = {8},
  pages = {60--66},
  issn = {0362-1340},
  doi = {10.1145/872734.806933},
  urldate = {2022-06-03},
  abstract = {We present a stack implementation of multiple environments similar in principle to that of Bobrow and Wegbreit, but based on a model which provides both static and dynamic scoping. We note some of the pragmatic consequences of this choice of models; one is that no unnecessary control stack is retained for certain important constructions such as ``upward funargs'' and coroutines. We also discuss the correct treatment of exit functions, and the need for ``entry functions'' if dynamic switching of control contexts is to be consistent.},
  file = {/home/pierre/Zotero/storage/8UTDF8WJ/Steele - 1977 - Macaroni is better than spaghetti.pdf}
}

@book{stephenson_beginning_1999,
  title = {In the {{Beginning}}...Was the {{Command Line}}},
  author = {Stephenson, Neal},
  year = {1999},
  month = nov,
  edition = {First Paperback Edition},
  publisher = {{William Morrow Paperbacks}},
  address = {{New York}},
  abstract = {This is "the Word" \textendash{} one man's word, certainly \textendash{} about the art (and artifice) of the state of our computer-centric existence. And considering that the "one man" is Neal Stephenson, "the hacker Hemingway" (Newsweek) \textendash{} acclaimed novelist, pragmatist, seer, nerd-friendly philosopher, and nationally bestselling author of groundbreaking literary works (Snow Crash, Cryptonomicon, etc., etc.) \textendash{} the word is well worth hearing. Mostly well-reasoned examination and partial rant, Stephenson's In the Beginning... was the Command Line is a thoughtful, irreverent, hilarious treatise on the cyber-culture past and present; on operating system tyrannies and downloaded popular revolutions; on the Internet, Disney World, Big Bangs, not to mention the meaning of life itself.},
  isbn = {978-0-380-81593-7},
  langid = {english}
}

@book{stiegler_technics_1998,
  title = {Technics and {{Time}}, 1: {{The Fault}} of {{Epimetheus}}},
  shorttitle = {Technics and {{Time}}, 1},
  author = {Stiegler, Bernard},
  year = {1998},
  publisher = {{Stanford University Press}},
  abstract = {At the beginning of Western philosophy, Aristotle contrasted beings formed by nature, which had within themselves a beginning of movement and rest, and man-made objects, which did not have the source of their own production within themselves. This book revises the Aristotelian argument and develops an innovative assessment whereby the technical object can be seen as having an essential, distinct temporality and dynamic of its own. Working his way through the history of the Aristotelian assessment of technics, the author engages the ideas of a wide range of thinkers such as Rousseau, Husserl, and Heidegger.},
  googlebooks = {uJdoW2MLdQgC},
  isbn = {978-0-8047-3041-9},
  langid = {english},
  keywords = {Philosophy / History \& Surveys / Modern,Social Science / General}
}

@book{sturt_wheelwright_1963,
  title = {The {{Wheelwright}}'s {{Shop}}},
  author = {Sturt, George},
  year = {1963},
  month = jan,
  edition = {Revised ed. edition},
  publisher = {{Cambridge University Press}},
  address = {{Cambridge ; New York}},
  abstract = {George Sturt's frank and moving account of his trade as a wheelwright in the late nineteenth century offers a unique glimpse into the working lives of craftsmen in a world since banished by technology. The wheelwright's shop where he entered business had been operating for two centuries; this chronicle, first published in 1923, is a poignant record of that tradition, written as it was passing into history. E. P. Thompson's new foreword acclaims the significance of Sturt's engaging narrative as a vital document in the history of labour at the turn of the century.},
  isbn = {978-0-521-22907-4},
  langid = {english}
}

@article{suber_what_1988,
  title = {What Is {{Software}}?},
  author = {Suber, Peter},
  year = {1988},
  journal = {Journal of Speculative Philosophy},
  volume = {2},
  number = {2},
  pages = {89--119}
}

@book{sullivan_tall_1896,
  title = {The {{Tall Office Building Artistically Considered}}},
  author = {Sullivan, Louis H.},
  year = {1896},
  urldate = {2021-03-29},
  langid = {english},
  keywords = {Office buildings}
}

@misc{sustrik_250bpm_2021,
  title = {250bpm},
  author = {Sustrik, Martin},
  year = {2021},
  urldate = {2021-04-01},
  file = {/home/pierre/Zotero/storage/FERJZSNA/index.html}
}

@book{tanaka-ishii_semiotics_2010,
  title = {Semiotics of {{Programming}}},
  author = {{Tanaka-Ishii}, Kumiko},
  year = {2010},
  edition = {1st},
  publisher = {{Cambridge University Press}},
  address = {{USA}},
  abstract = {This book provides a semiotic analysis of computer programs along three axes: models of signs, kinds of signs, and systems of signs. Because computer programs are well defined and rigid, applying semiotic theories to them will help to reorganize the semiotic theories themselves. Moreover, semiotic discussion of programming theory can provide possible explanations for why programming has developed as it has and how computation is fundamentally related to human semiosis. The goal of this book is to consider the question of what computers can and cannot do, by analyzing how computer sign systems compare to those of humans. A key concept throughout is reflexivity - the capability of a system or function to reinterpret what it has produced by itself. Sign systems are reflexive by nature, and humans know how to make the most of this characteristic but have not yet fully implemented it into computer systems. Therefore, the limitations of current computers can be ascribed to insufficient reflexivity.},
  isbn = {978-0-521-73627-5}
}

@article{taylor_patterns_2001,
  title = {Patterns as {{Software Design Canon}}},
  author = {Taylor, Paul},
  year = {2001},
  month = jan,
  journal = {ACIS 2001 Proceedings},
  file = {/home/pierre/Zotero/storage/Q9EEL3Z2/65.html}
}

@book{team_lowcode_2021,
  title = {Low-{{Code}} and the {{Democratization}} of {{Programming}}},
  author = {Team, O'Reilly Editorial},
  year = {2021},
  month = nov,
  publisher = {{O'Reilly Media}},
  urldate = {2021-11-18},
  abstract = {Rethinking Where Programming Is Headed},
  isbn = {978-1-09-811259-2},
  langid = {american},
  file = {/home/pierre/Zotero/storage/8H36LY8D/low-code-and-the-democratization-of-programming.html}
}

@misc{techmodelrailroadclub_tmrc_2000,
  title = {{{TMRC}} - {{Hackers}}},
  author = {{Tech Model Railroad club}},
  year = {2000},
  journal = {Tech Model Railroad Club},
  urldate = {2021-11-18},
  file = {/home/pierre/Zotero/storage/2LG5ZUFN/hackers-ref.html}
}

@inproceedings{tedre_development_2006,
  title = {The Development of Computer Science: A Sociocultural Perspective},
  shorttitle = {The Development of Computer Science},
  booktitle = {Proceedings of the 6th {{Baltic Sea}} Conference on {{Computing}} Education Research: {{Koli Calling}} 2006},
  author = {Tedre, Matti},
  year = {2006},
  month = feb,
  series = {Baltic {{Sea}} '06},
  pages = {21--24},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1315803.1315808},
  urldate = {2021-01-28},
  abstract = {Computer science is a broad discipline, and computer scientists often disagree about the content, form, and practices of the discipline. The processes through which computer scientists create, maintain, and modify knowledge in computer science\textemdash processes which often are eclectic and anarchistic\textemdash are well researched, but knowledge of those processes is generally not considered to be a part of computer science. On the contrary, I argue that understanding of how computer science works is an important part of the knowledge of an educated computer scientist. In this paper I discuss some characteristics of computer science that are central to understanding how computer science works.},
  isbn = {978-1-4503-7838-3},
  keywords = {metaknowledge in computer science,social issues,social studies of computer science}
}

@book{tedre_science_2014,
  title = {The {{Science}} of {{Computing}}: {{Shaping}} a {{Discipline}}},
  shorttitle = {The {{Science}} of {{Computing}}},
  author = {Tedre, Matti},
  year = {2014},
  month = dec,
  publisher = {{CRC Press}},
  abstract = {The identity of computing has been fiercely debated throughout its short history. Why is it still so hard to define computing as an academic discipline? Is computing a scientific, mathematical, or engineering discipline? By describing the mathematical, engineering, and scientific traditions of computing, The Science of Computing: Shaping a Discipline presents a rich picture of computing from the viewpoints of the field's champions. The book helps readers understand the debates about computing as a discipline. It explains the context of computing's central debates and portrays a broad perspective of the discipline. The book first looks at computing as a formal, theoretical discipline that is in many ways similar to mathematics, yet different in crucial ways. It traces a number of discussions about the theoretical nature of computing from the field's intellectual origins in mathematical logic to modern views of the role of theory in computing. The book then explores the debates about computing as an engineering discipline, from the central technical innovations to the birth of the modern technical paradigm of computing to computing's arrival as a new technical profession to software engineering gradually becoming an academic discipline. It presents arguments for and against the view of computing as engineering within the context of software production and analyzes the clash between the theoretical and practical mindsets. The book concludes with the view of computing as a science in its own right\textemdash not just as a tool for other sciences. It covers the early identity debates of computing, various views of computing as a science, and some famous characterizations of the discipline. It also addresses the experimental computer science debate, the view of computing as a natural science, and the algorithmization of sciences.},
  isbn = {978-1-4822-1769-8},
  langid = {english},
  keywords = {Computers / Computer Science,Computers / General,Computers / Information Theory,Mathematics / General,Mathematics / History \& Philosophy,Mathematics / Recreations \& Games}
}

@misc{temkin_sentences_2017,
  title = {Sentences on {{Code Art}}},
  author = {Temkin, Daniel},
  year = {2017},
  month = dec,
  journal = {esoteric.codes},
  urldate = {2022-07-13},
  abstract = {0. Computers are logical systems that arise as often by accident as by design.},
  howpublished = {https://esoteric.codes/blog/sentences-on-code-art},
  langid = {english},
  file = {/home/pierre/Zotero/storage/YUTLAZFR/sentences-on-code-art.html}
}

@book{tenen_plain_2017,
  title = {Plain {{Text}}: {{The Poetics}} of {{Computation}}},
  shorttitle = {Plain {{Text}}},
  author = {Tenen, Dennis},
  year = {2017},
  publisher = {{Stanford University Press}},
  address = {{Stanford}},
  abstract = {This book challenges the ways we read, write, store, and retrieve information in the digital age. Computers\textemdash from electronic books to smart phones\textemdash play an active role in our social lives. Our technological choices thus entail theoretical and political commitments. Dennis Tenen takes up today's strange enmeshing of humans, texts, and machines to argue that our most ingrained intuitions about texts are profoundly alienated from the physical contexts of their intellectual production. Drawing on a range of primary sources from both literary theory and software engineering, he makes a case for a more transparent practice of human\textendash computer interaction. Plain Text is thus a rallying call, a frame of mind as much as a file format. It reminds us, ultimately, that our devices also encode specific modes of governance and control that must remain available to interpretation.},
  isbn = {978-1-5036-0180-2},
  keywords = {and Medicine,Cinema and Media Studies,History \textendash{} Science,Literary Studies \textendash{} General Criticism and Theory,Philosophy,Technology}
}

@misc{thejargonfile_jargon_2014,
  title = {The {{Jargon File}}},
  author = {{The Jargon File}},
  year = {2014},
  urldate = {2021-01-28},
  howpublished = {http://www.catb.org/jargon/html/},
  annotation = {Version 4.4.7},
  file = {/home/pierre/Zotero/storage/PGN2RBGV/html.html}
}

@article{thomas_beauty_2017,
  title = {Beauty Is Not All There Is to {{Aesthetics}} in {{Mathematics}}\textdagger},
  author = {Thomas, R.S.D.},
  year = {2017},
  month = feb,
  journal = {Philosophia Mathematica},
  volume = {25},
  number = {1},
  pages = {116--127},
  issn = {0031-8019},
  doi = {10.1093/philmat/nkw019},
  urldate = {2023-03-24},
  abstract = {Aesthetics in philosophy of mathematics is too narrowly construed. Beauty is not the only feature in mathematics that is arguably aesthetic. While not the highest aesthetic value, being interesting is a sine qua non for publishability. Of the many ways to be interesting, being explanatory has recently been discussed. The motivational power of what is interesting is important for both directing research and stimulating education. The scientific satisfaction of curiosity and the artistic desire for beautiful results are complementary but both aesthetic.},
  file = {/home/pierre/Zotero/storage/D8MWJF7U/Thomas - 2017 - Beauty is not all there is to Aesthetics in Mathem.pdf;/home/pierre/Zotero/storage/ZMJTR8N9/2669619.html}
}

@book{thompson_materials_1956,
  title = {The {{Materials}} and {{Techniques}} of {{Medieval Painting}}},
  author = {Thompson, Daniel Varney},
  year = {1956},
  month = jan,
  publisher = {{Courier Corporation}},
  abstract = {Sums up 20th-century knowledge; paints, binders, metals, surface preparation. Based on mss. and scientific investigation.},
  isbn = {978-0-486-20327-0},
  langid = {english},
  keywords = {Art / History / Medieval,Art / Techniques / General,Art / Techniques / Painting}
}

@article{thompson_study_1934,
  title = {The {{Study}} of {{Medieval Craftsmanship}}},
  author = {Thompson, Daniel V.},
  year = {1934},
  journal = {Bulletin of the Fogg Art Museum},
  volume = {3},
  eprint = {4300956},
  eprinttype = {jstor},
  pages = {3--8},
  publisher = {{[Harvard University Art Museums, Harvard Art Museums, The President and Fellows of Harvard College]}},
  issn = {1939-0394},
  urldate = {2021-01-28}
}

@inproceedings{tirrell_dumb_2012,
  title = {Dumb {{People}}, {{Smart Objects}}: {{The Sims}} and {{The Distributed Self}}},
  booktitle = {The {{Philosophy}} of {{Computer Games Conference}}},
  author = {Tirrell, Jeremy},
  year = {2012}
}

@misc{tom_most_2008,
  type = {Forum Post},
  title = {Most Efficient Way to Convert an {{HTMLCollection}} to an {{Array}}},
  author = {{Tom}},
  year = {2008},
  month = oct,
  journal = {Stack Overflow},
  urldate = {2022-09-14},
  file = {/home/pierre/Zotero/storage/4DMDUB82/most-efficient-way-to-convert-an-htmlcollection-to-an-array.html}
}

@article{tomov_role_2016a,
  title = {The {{Role}} of {{Aesthetics}} in {{Software Design}}, {{Development}} and {{Education}}: {{Review}} and {{Definitions}}},
  shorttitle = {The {{Role}} of {{Aesthetics}} in {{Software Design}}, {{Development}} and {{Education}}},
  author = {Tomov, Latchezar},
  year = {2016},
  journal = {Computer Science and Education in Computer Science},
  volume = {12},
  number = {1},
  pages = {1--16},
  publisher = {{\cyrchar\CYRN\cyrchar\cyro\cyrchar\cyrv{} \cyrchar\cyrb\cyrchar\cyrhrdsn\cyrchar\cyrl\cyrchar\cyrg\cyrchar\cyra\cyrchar\cyrr\cyrchar\cyrs\cyrchar\cyrk\cyrchar\cyri{} \cyrchar\cyru\cyrchar\cyrn\cyrchar\cyri\cyrchar\cyrv\cyrchar\cyre\cyrchar\cyrr\cyrchar\cyrs\cyrchar\cyri\cyrchar\cyrt\cyrchar\cyre\cyrchar\cyrt}},
  issn = {1313-8624, 2603-4794},
  urldate = {2023-03-30},
  abstract = {Aesthetics in software has the same role as in science in general - it is a powerful tool for motivation of the developer, a symptom of expert knowledge, a way to measure quality. You can hire people, based on it, you can estimate directly or indirectly the quality of software and of the process of development and you can teach it to help student reach the expert level earlier.},
  langid = {english},
  keywords = {aesthetics,Conference proceedings,software quality}
}

@inproceedings{treude_understanding_2017,
  title = {Understanding {{Stack Overflow Code Fragments}}},
  booktitle = {2017 {{IEEE International Conference}} on {{Software Maintenance}} and {{Evolution}} ({{ICSME}})},
  author = {Treude, C. and Robillard, M. P.},
  year = {2017},
  month = sep,
  pages = {509--513},
  doi = {10.1109/ICSME.2017.24},
  abstract = {Code fragments posted in answers on Q\&A forums can form an important source of developer knowledge. However, effective reuse of code fragments found online often requires information other than the code fragment alone. We report on the results of a survey-based study to investigate to what extent developers perceive Stack Overflow code fragments to be self-explanatory. As part of the study, we also investigated the types of information missing from fragments that were not self-explanatory. We find that less than half of the Stack Overflow code fragments in our sample are considered to be self-explanatory by the 321 participants who answered our survey, and that the main issues that negatively affect code fragment understandability include incomplete fragments, code quality, missing rationale, code organization, clutter, naming issues, and missing domain information. This study is a step towards understanding developers' information needs as they relate to code fragments, and how these needs can be addressed.},
  keywords = {Clutter,code fragments,code organization,code quality,code reuse,Data collection,developer knowledge,information needs,Java,Organizations,program compilers,Programming,Software,software engineering,Stack Overflow,stack overflow code fragment reuse},
  file = {/home/pierre/Zotero/storage/6S5WNFVE/8094452.html}
}

@book{tufte_visual_2001,
  title = {The {{Visual Display}} of {{Quantitative Information}}},
  author = {Tufte, Edward R.},
  year = {2001},
  publisher = {{Graphics Press}},
  abstract = {"This book deals with the theory and practice in the design of data graphics and makes the point that the most effective way to describe, explore, and summarize a set of numbers is to look at pictures of those numbers, through the use of statistical graphics, charts, and tables. It includes 250 illustrations of the best (and a few of the worst) statistical graphics, with detailed analysis of how to display data for precise, effective, quick analysis. Also offered is information on the design of the high-resolution displays, small multiples, editing and improving graphics, and the data-ink ratio. Time-series, relational graphics, data maps, multivariate designs, as well as detection of graphical deception: design variation vs. data variation, and sources of deception are discussed. Information on aesthetics and data graphical displays is included. The 2nd edition provides high-resolution color reproductions of the many graphics of William Playfair (1750-1800), adds color to other images where appropriate, and includes all the changes and corrections during the 17 printings of the 1st edition"--Publisher's description},
  googlebooks = {qmjNngEACAAJ},
  isbn = {978-1-930824-13-3},
  langid = {english}
}

@article{turing_computable_1936,
  title = {On {{Computable Numbers}}, with an {{Application}} to the {{Entscheidungsproblem}}},
  author = {Turing, Alan},
  year = {1936},
  journal = {Proceedings of the London Mathematical Society},
  volume = {42},
  number = {1},
  pages = {230--265},
  publisher = {{Association for Symbolic Logic}},
  doi = {10.2307/2268810},
  file = {/home/pierre/Zotero/storage/D9IY9CWG/TUROCN.html}
}

@incollection{turing_computing_2009,
  title = {Computing {{Machinery}} and {{Intelligence}}},
  booktitle = {Parsing the {{Turing Test}}: {{Philosophical}} and {{Methodological Issues}} in the {{Quest}} for the {{Thinking Computer}}},
  author = {Turing, Alan M.},
  editor = {Epstein, Robert and Roberts, Gary and Beber, Grace},
  year = {2009},
  pages = {23--65},
  publisher = {{Springer Netherlands}},
  address = {{Dordrecht}},
  doi = {10.1007/978-1-4020-6710-5_3},
  urldate = {2022-09-25},
  abstract = {I propose to consider the question, ``Can machines think?''\ding{168} This should begin with definitions of the meaning of the terms ``machine'' and ``think''. The definitions might be framed so as to reflect so far as possible the normal use of the words, but this attitude is dangerous. If the meaning of the words ``machine'' and ``think'' are to be found by examining how they are commonly used it is difficult to escape the conclusion that the meaning and the answer to the question, ``Can machines think?'' is to be sought in a statistical survey such as a Gallup poll.},
  isbn = {978-1-4020-6710-5},
  langid = {english},
  keywords = {Computing Machinery,Digital Computer,Performance Capacity,Real Robot,Turing Machine},
  file = {/home/pierre/Zotero/storage/GHCM43GT/Turing - 2009 - Computing Machinery and Intelligence.pdf}
}

@article{turner_compression_2006,
  title = {Compression and Representation},
  author = {Turner, Mark},
  year = {2006},
  month = feb,
  journal = {Language and Literature},
  volume = {15},
  number = {1},
  pages = {17--27},
  publisher = {{SAGE Publications Ltd}},
  issn = {0963-9470},
  doi = {10.1177/0963947006060550},
  urldate = {2022-06-01},
  abstract = {Mental spaces are often connected by vital conceptual relations. When mental spaces serve as inputs to a blended mental space, the vital conceptual relations between them can be `compressed' to blended structure inside the blended mental space. In other words, `outer-space' relations become `inner-space' relations. This article discusses compression of the outer-space relation of representation under mental blending.},
  langid = {english},
  keywords = {analogy,blending,compression,conceptual integration,mental space,representation,Winnie the Pooh},
  file = {/home/pierre/Zotero/storage/RGPJQM6A/Turner - 2006 - Compression and representation.pdf}
}

@incollection{turner_computational_2018,
  title = {Computational {{Artifacts}}},
  booktitle = {Computational {{Artifacts}}: {{Towards}} a {{Philosophy}} of {{Computer Science}}},
  author = {Turner, Raymond},
  editor = {Turner, Raymond},
  year = {2018},
  pages = {25--29},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-662-55565-1_3},
  urldate = {2021-11-09},
  abstract = {Technical artifacts are taken to include all the common objects of everyday life, such as chairs, televisions, paper clips, telephones, smartphones and dog collars. They are material objects, the engineered things of world that have been intentionally produced by humans in order to fulfill a practical function.},
  isbn = {978-3-662-55565-1},
  langid = {english}
}

@article{turner_programming_2014,
  title = {Programming {{Languages}} as {{Technical Artifacts}}},
  author = {Turner, Raymond},
  year = {2014},
  month = sep,
  journal = {Philosophy \& Technology},
  volume = {27},
  number = {3},
  pages = {377--397},
  issn = {2210-5441},
  doi = {10.1007/s13347-012-0098-z},
  urldate = {2021-10-01},
  abstract = {Taken at face value, a programming language is defined by a formal grammar. But, clearly, there is more to it. By themselves, the naked strings of the language do not determine when a program is correct relative to some specification. For this, the constructs of the language must be given some semantic content. Moreover, to be employed to generate physical computations, a programming language must have a physical implementation. How are we to conceptualize this complex package? Ontologically, what kind of thing is it? In this paper, we shall argue that an appropriate conceptualization is furnished by the notion of a technical artifact.},
  copyright = {2013 Springer Science+Business Media Dordrecht},
  langid = {english}
}

@misc{undur_gongor_answer_2011,
  title = {Answer to "{{Is}} It Possible to Use Pointers in {{Ruby}}?"},
  shorttitle = {Answer to "{{Is}} It Possible to Use Pointers in {{Ruby}}?},
  author = {{undur\_gongor}},
  year = {2011},
  month = aug,
  journal = {Stack Overflow},
  urldate = {2023-04-28},
  file = {/home/pierre/Zotero/storage/IXIUXSNL/is-it-possible-to-use-pointers-in-ruby.html}
}

@book{vandenboomen_transcoding_2014a,
  title = {Transcoding the {{Digital}}: {{How Metaphors Matter}} in {{New Media}}},
  shorttitle = {Transcoding the {{Digital}}},
  author = {{van den Boomen}, Marianne},
  year = {2014},
  publisher = {{Institute of Network Cultures}},
  address = {{Amsterdam}},
  urldate = {2021-03-23},
  abstract = {Transcoding the Digital: How Metaphors Matter in New Media by Marianne van den Boomen is a material-semiotic inquiry into the constitutive role of metaphors in our daily encounters with computers and networks. While interface concepts such as desktop and windows are easily recognized as metaphors, this research shows how in fact all digital sign-tool-objects \textendash{} ranging from icons and email to Facebook friends, from hyperlink and tweet to Pirate Bay \textendash{} are digital-material metaphors. They frame and organize how we access the black boxes of software and machinery, which in turn organize and reconfigure society. The same holds for discourse metaphors such as virtual community, cyberspace, Web 2.0, and social network. Metaphors matter in digital praxis, literally. This study makes an intervention into the contemporary theory of metaphor by extending it with the notion of material metaphor, including a manifest for hacking digital-material metaphors.},
  langid = {english},
  file = {/home/pierre/Zotero/storage/GBVVDY9C/tod14-binnenwerk-def-pdf.html}
}

@article{vanroy_programming_2012,
  title = {Programming {{Paradigms}} for {{Dummies}}: {{What Every Programmer Should Know}}},
  shorttitle = {Programming {{Paradigms}} for {{Dummies}}},
  author = {Van Roy, Peter},
  year = {2012},
  month = apr,
  abstract = {This chapter gives an introduction to all the main programming paradigms, their un- derlying concepts, and the relationships between them. We give a broad view to help programmers choose the right concepts they need to solve the problems at hand. We give a taxonomy of almost 30 useful programming paradigms and how they are related. Most of them dier only in one or a few concepts, but this can make a world of dierence in programming. We explain briey how programming paradigms inuence language design, and we show two sweet spots: dual-paradigm languages and a denitive lan- guage. We introduce the main concepts of programming languages: records, closures, independence (concurrency), and named state. We explain the main principles of data abstraction and how it lets us organize large programs. Finally, we conclude by focus- ing on concurrency, which is widely considered the hardest concept to program with. We present four little-known but important paradigms that greatly simplify concurrent programming with respect to mainstream languages: declarative concurrency (both ea- ger and lazy), functional reactive programming, discrete synchronous programming, and constraint programming. These paradigms have no race conditions and can be used in cases where no other paradigm works. We explain why for multi-core processors and we give several examples from computer music, which often uses these paradigms.},
  file = {/home/pierre/Zotero/storage/H7FZTXZH/Van Roy - 2012 - Programming Paradigms for Dummies What Every Prog.pdf}
}

@article{vardi_science_2010,
  title = {Science Has Only Two Legs},
  author = {Vardi, Moshe Y.},
  year = {2010},
  month = sep,
  journal = {Communications of the ACM},
  volume = {53},
  number = {9},
  pages = {5},
  issn = {0001-0782},
  doi = {10.1145/1810891.1810892},
  urldate = {2022-04-02},
  file = {/home/pierre/Zotero/storage/B4CTB49M/Vardi - 2010 - Science has only two legs.pdf}
}

@misc{vicious_beautiful_2008,
  title = {Beautiful {{Code Exists}}, If {{You Know Where}} to {{Look}} - {{ACM Queue}}},
  author = {Vicious, Kode},
  year = {2008},
  month = oct,
  journal = {ACM Queue},
  urldate = {2023-03-15},
  howpublished = {https://queue.acm.org/detail.cfm?id=1454458},
  file = {/home/pierre/Zotero/storage/WBI3FK4Z/detail.html}
}

@misc{victor_explorable_2011,
  title = {Explorable {{Explanations}}},
  author = {Victor, Bret},
  year = {2011},
  month = oct,
  journal = {Explorable Explanations},
  urldate = {2022-12-18},
  howpublished = {http://worrydream.com/ExplorableExplanations/},
  file = {/home/pierre/Zotero/storage/NV6DSLWJ/ExplorableExplanations.html}
}

@inproceedings{victor_humane_2014,
  title = {Humane Representation of Thought: A Trail Map for the 21st Century},
  shorttitle = {Humane Representation of Thought},
  booktitle = {Proceedings of the Companion Publication of the 2014 {{ACM SIGPLAN}} Conference on {{Systems}}, {{Programming}}, and {{Applications}}: {{Software}} for {{Humanity}}},
  author = {Victor, Bret},
  year = {2014},
  month = oct,
  series = {{{SPLASH}} '14},
  pages = {5},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2660252.2661746},
  urldate = {2022-12-19},
  abstract = {New representations of thought -- written language, mathematical notation, information graphics, etc -- have been responsible for some of the most significant leaps in the progress of civilization, by expanding humanity's collectively-thinkable territory. But at debilitating cost. These representations, having been invented for static media such as paper, tap into a small subset of human capabilities and neglect the rest. Knowledge work means sitting at a desk, interpreting and manipulating symbols. The human body is reduced to an eye staring at tiny rectangles and fingers on a pen or keyboard. Like any severely unbalanced way of living, this is crippling to mind and body. But less obviously, and more importantly, it is enormously wasteful of the vast human potential. Human beings naturally have many powerful modes of thinking and understanding. Most are incompatible with static media. In a culture that has contorted itself around the limitations of marks on paper, these modes are undeveloped, unrecognized, or scorned. We are now seeing the start of a dynamic medium. To a large extent, people today are using this medium merely to emulate and extend static representations from the era of paper, and to further constrain the ways in which the human body can interact with external representations of thought. But the dynamic medium offers the opportunity to deliberately invent a humane and empowering form of knowledge work. We can design dynamic representations which draw on the entire range of human capabilities -- all senses, all forms of movement, all forms of understanding -- instead of straining a few and atrophying the rest. This talk suggests how each of the human activities in which thought is externalized (conversing, presenting, reading, writing, etc) can be redesigned around such representations.},
  isbn = {978-1-4503-3208-8},
  keywords = {dynamic representations}
}

@misc{victor_tangle_2011,
  title = {Tangle: A {{JavaScript}} Library for Reactive Documents},
  author = {Victor, Bret},
  year = {2011},
  month = jun,
  urldate = {2022-12-18},
  file = {/home/pierre/Zotero/storage/476I9EHQ/Tangle.html}
}

@incollection{vinck_mediating_1995,
  title = {Mediating and {{Commissioning Objects}} in the {{Sociotechnical Process}} of {{Product Design}} : A Conceptual Approach},
  shorttitle = {Mediating and {{Commissioning Objects}} in the {{Sociotechnical Process}} of {{Product Design}}},
  author = {Vinck, Dominique and Jeantet, Alain},
  year = {1995},
  month = jan,
  pages = {111--129},
  file = {/home/pierre/Zotero/storage/HE6AAEI6/Vinck and Jeantet - 1995 - Mediating and Commissioning Objects in the Sociote.pdf}
}

@book{viniotis_mathematics_2013,
  title = {Mathematics: {{The Language}} of {{Electrical}} and {{Computer Engineering}}},
  shorttitle = {Mathematics},
  author = {Viniotis, Yannis and Trussell, H. Joel},
  year = {2013},
  month = aug,
  publisher = {{Trafford}},
  isbn = {978-1-4907-1008-2},
  langid = {english}
}

@book{voloshinov_marxism_1986,
  title = {Marxism and the {{Philosophy}} of {{Language}}},
  author = {Voloshinov, V. N. and Bachtin, Michail M.},
  year = {1986},
  publisher = {{Harvard University Press}},
  abstract = {V. N. Volosinov's important work, first published in Russian in 1929, had to wait a generation for recognition. This first paperback edition of the English translation will be capital for literary theorists, philosophers, linguists, psychologists, and many others.Volosinov is out to undo the old disciplinary boundaries between linguistics, rhetoric, and poetics in order to construct a new kind of field: semiotics or textual theory. Ladislav Matejka and I. R. Titunik have provided a new preface to discuss Volosinov in relation to the great resurgence of interest in all the writing of the circle of Mikhail Bakhtin.},
  isbn = {978-0-674-55098-8},
  langid = {english},
  keywords = {Language Arts \& Disciplines / Linguistics / General}
}

@incollection{vonneumann_mathematician_1947,
  title = {The {{Mathematician}}},
  booktitle = {The Works of the Mind},
  author = {Von Neumann, John},
  editor = {Adler, Mortimer Jerome and Heywood, Robert B.},
  year = {1947},
  publisher = {{University of Chicago Press}},
  address = {{Chicago}},
  abstract = {Donated by Sydney Harris},
  langid = {english},
  keywords = {\"Asthetik,{Creation (Literary, artistic, etc.)},Geschichte 1947},
  annotation = {OCLC: 194208}
}

@misc{waldron_idiomatic_2020,
  title = {Idiomatic.Js/Readme.Md at Master {$\cdot$} Rwaldron/Idiomatic.Js},
  author = {Waldron, Rick},
  year = {2020},
  journal = {GitHub},
  urldate = {2021-11-23},
  abstract = {Principles of Writing Consistent, Idiomatic JavaScript - idiomatic.js/readme.md at master {$\cdot$} rwaldron/idiomatic.js},
  langid = {english},
  file = {/home/pierre/Zotero/storage/K4BRQ8CJ/idiomatic.html}
}

@misc{warren_windows_2020,
  title = {Windows {{XP}} Source Code Leaks Online},
  author = {Warren, Tom},
  year = {2020},
  month = sep,
  urldate = {2021-11-17},
  abstract = {This leak is the latest in a series of Windows and Xbox source code leaks},
  langid = {english}
}

@book{watters_teaching_2021,
  title = {Teaching {{Machines}}: {{The History}} of {{Personalized Learning}}},
  shorttitle = {Teaching {{Machines}}},
  author = {Watters, Audrey},
  year = {2021},
  month = aug,
  publisher = {{MIT Press}},
  abstract = {How ed tech was born: Twentieth-century teaching machines--from Sidney Pressey's mechanized test-giver to B. F. Skinner's behaviorist bell-ringing box.Contrary to popular belief, ed tech did not begin with videos on the internet. The idea of technology that would allow students to "go at their own pace" did not originate in Silicon Valley. In Teaching Machines, education writer Audrey Watters offers a lively history of predigital educational technology, from Sidney Pressey's mechanized positive-reinforcement provider to B. F. Skinner's behaviorist bell-ringing box. Watters shows that these machines and the pedagogy that accompanied them sprang from ideas--bite-sized content, individualized instruction--that had legs and were later picked up by textbook publishers and early advocates for computerized learning. Watters pays particular attention to the role of the media--newspapers, magazines, television, and film--in shaping people's perceptions of teaching machines as well as the psychological theories underpinning them. She considers these machines in the context of education reform, the political reverberations of Sputnik, and the rise of the testing and textbook industries. She chronicles Skinner's attempts to bring his teaching machines to market, culminating in the famous behaviorist's efforts to launch Didak 101, the "pre-verbal" machine that taught spelling. (Alternate names proposed by Skinner include "Autodidak," "Instructomat," and "Autostructor.") Telling these somewhat cautionary tales, Watters challenges what she calls "the teleology of ed tech"--the idea that not only is computerized education inevitable, but technological progress is the sole driver of events.},
  googlebooks = {DVqUzQEACAAJ},
  isbn = {978-0-262-04569-8},
  langid = {english},
  keywords = {Education / Computers \& Technology,Education / History,Technology \& Engineering / History}
}

@misc{wayne_clever_2021,
  title = {Clever vs {{Insightful Code}} \textbullet{} {{Hillel Wayne}}},
  author = {Wayne, Hillel},
  year = {2021},
  month = jun,
  urldate = {2021-11-09},
  abstract = {``Don't write clever code.'' Why not? ``Because it's hard to understand.'' People who say this think of clever code such as Duff's Device: Duff's Device send(to, from, count) registershort*to, *from; registercount; \{ registern =(count +7) /8; switch(count \%8) \{ case0:do\{ *to =*from++; case7:*to =*from++; case6:*to =*from++; case5:*to =*from++; case4:*to =*from++; case3:*to =*from++; case2:*to =*from++; case1:*to =*from++; \} while(\textendash n \textbackslash textbackslashtextgreater0); \} \} This code is ``clever'' because it exploits knowledge about the language, in this case the peculiarities of fall-through.},
  langid = {english},
  file = {/home/pierre/Zotero/storage/GBZW4ECC/cleverness.html}
}

@article{weaver_science_1948,
  title = {Science and {{Complexity}}},
  author = {Weaver, Warren},
  year = {1948},
  journal = {American Scientist},
  volume = {36},
  number = {4},
  eprint = {27826254},
  eprinttype = {jstor},
  pages = {536--544},
  publisher = {{Sigma Xi, The Scientific Research Society}},
  issn = {0003-0996},
  urldate = {2022-11-03}
}

@incollection{wegenstein_bodies_2010,
  title = {Bodies},
  booktitle = {Critical {{Terms}} for {{Media Studies}}},
  author = {Wegenstein, Bernadette},
  year = {2010},
  month = mar,
  publisher = {{University of Chicago Press}},
  abstract = {Communications, philosophy, film and video, digital culture: media studies straddles an astounding array of fields and disciplines and produces a vocabulary that is in equal parts rigorous and intuitive. Critical Terms for Media Studies defines, and at times, redefines, what this new and hybrid area aims to do, illuminating the key concepts behind its liveliest debates and most dynamic topics. Part of a larger conversation that engages culture, technology, and politics, this exciting collection of essays explores our most critical language for dealing with the qualities and modes of contemporary media. Edited by two outstanding scholars in the field, W. J. T. Mitchell and Mark B. N. Hansen, the volume features works by a team of distinguished contributors. These essays, commissioned expressly for this volume, are organized into three interrelated groups: ``Aesthetics'' engages with terms that describe sensory experiences and judgments, ``Technology'' offers entry into a broad array of technological concepts, and ``Society'' opens up language describing the systems that allow a medium to function. A compelling reference work for the twenty-first century and the media that form our experience within it, Critical Terms for Media Studies will engage and deepen any reader's knowledge of one of our most important new fields.},
  isbn = {978-0-226-53266-0},
  langid = {english},
  keywords = {Literary Criticism / General,Literary Criticism / Reference,Performing Arts / General,Reference / Word Lists}
}

@book{weinberg_psychology_1998,
  title = {The {{Psychology}} of {{Computer Programming}}},
  author = {Weinberg, Gerald M.},
  year = {1998},
  publisher = {{Dorset House Pub.}},
  abstract = {Discover or Revisit One of the Most Popular Books in Computing This landmark 1971 classic is reprinted with a new preface, chapter-by-chapter commentary, and straight-from-the-heart observations on topics that affect the professional life of programmers. Long regarded as one of the first books to pioneer a people-oriented approach to computing, The Psychology of Computer Programming endures as a penetrating analysis of the intelligence, skill, teamwork, and problem-solving power of the computer programmer. Finding the chapters strikingly relevant to today's issues in programming, Gerald M. Weinberg adds new insights and highlights the similarities and differences between now and then. Using a conversational style that invites the reader to join him, Weinberg reunites with some of his most insightful writings on the human side of software engineering. Topics include egoless programming, intelligence, psychological measurement, personality factors, motivation, training, social problems on large projects, problem-solving ability, programming language design, team formation, the programming environment, and much more. Dorset House Publishing is proud to make this important text available to new generations of programmers\textendash and to encourage readers of the first edition to return to its valuable lessons.},
  isbn = {978-0-932633-42-2},
  langid = {english},
  keywords = {Computers / Programming / General}
}

@book{weizenbaum_computer_1976,
  title = {Computer {{Power}} and {{Human Reason}}: {{From Judgment}} to {{Calculation}}},
  shorttitle = {Computer {{Power}} and {{Human Reason}}},
  author = {Weizenbaum, Joseph},
  year = {1976},
  month = mar,
  edition = {1st edition},
  publisher = {{W H Freeman \& Co}},
  address = {{San Francisco}},
  abstract = {Examines the sources of the computer's powers and offers evaluative explorations of what computers can do, cannot do, and should not be employed to do. Bibliogs},
  isbn = {978-0-7167-0463-8},
  langid = {english}
}

@article{wells_are_1990,
  title = {Are These the Most Beautiful?},
  author = {Wells, David},
  year = {1990},
  month = jun,
  journal = {The Mathematical Intelligencer},
  volume = {12},
  number = {3},
  pages = {37--41},
  issn = {0343-6993},
  doi = {10.1007/BF03024015},
  urldate = {2023-03-24},
  abstract = {In the Fall 1988 Mathematical Intelligencer (vol. 10, no. 4) (11) readers were asked to evaluate 24 theorems, on a scale from 0 to 10, for beauty. I received 76 completed ques(12) tionnaires, including 11 from a preliminary version (plus 10 extra, noted below.) One person assigned each theorem a score of 0, (13) with the comment, "Maths is a tool. Art has beauty"; that response was excluded from the averages listed below, as was another that awarded very many zeros, (14) four who left many blanks, and two who awarded numerous 10s. The 24 theorems are listed below, ordered by their average score from the remaining 68 responses 9},
  langid = {english}
}

@book{west_macintosh_1987,
  title = {Macintosh {{Programmers Workshop}}},
  author = {West, Joel},
  year = {1987},
  series = {The {{Macintosh Performance Library}}},
  publisher = {{Bantam Books}},
  urldate = {2022-12-18},
  abstract = {Macintosh Programmers Workshop missing 735,736},
  isbn = {0-553-34436-6},
  langid = {english}
}

@misc{wettel_codecity_2008,
  title = {{{CodeCity}}},
  author = {Wettel, Richard},
  year = {2008},
  address = {{Switzerland}},
  urldate = {2023-03-21},
  file = {/home/pierre/Zotero/storage/BMTPPT4N/codecity.html}
}

@article{wikipedia_code_2022,
  title = {Code Smell},
  author = {{Wikipedia}},
  year = {2022},
  month = mar,
  journal = {Wikipedia},
  urldate = {2022-06-03},
  abstract = {In computer programming, a code smell is any characteristic in the source code of a program that possibly indicates a deeper problem. Determining what is and is not a code smell is subjective, and varies by language, developer, and development methodology. The term was popularised by Kent Beck on WardsWiki in the late 1990s. Usage of the term increased after it was featured in the 1999 book Refactoring: Improving the Design of Existing Code by Martin Fowler. It is also a term used by agile programmers.},
  copyright = {Creative Commons Attribution-ShareAlike License},
  langid = {english},
  annotation = {Page Version ID: 1074709396},
  file = {/home/pierre/Zotero/storage/83GA7SKN/Code_smell.html}
}

@misc{wikipedia_linux_2021,
  title = {Linux Kernel},
  author = {{Wikipedia}},
  year = {2021},
  month = oct,
  urldate = {2021-10-08},
  abstract = {The Linux kernel is a free and open-source, monolithic, modular, multitasking, Unix-like operating system kernel. It was conceived and created in 1991 by Linus Torvalds for his i386-based PC, and it was soon adopted as the kernel for the GNU operating system, which was created as a free replacement for UNIX. Since then, it has spawned a large number of operating system distributions, commonly also called Linux. Linux is deployed on a wide variety of computing systems, such as embedded devices, mobile devices (including its use in the Android operating system), personal computers, servers, mainframes, and supercomputers. It can be tailored for specific architectures and for several usage scenarios using a family of simple commands (that is, without the need of manually editing its source code before compilation); privileged users can also fine-tune kernel parameters at runtime. Most of the Linux kernel code is written using the GNU extensions of GCC to the standard C programming language and with the use of architecture specific instructions (ISA). This produces a highly optimized executable (vmlinux) with respect to utilization of memory space and task execution times.Day-to-day development discussions take place on the Linux kernel mailing list (LKML). Changes are tracked using the version control system git, which was created by Torvalds as a bespoke replacement for BitKeeper. Linux as a whole is released under the GNU General Public License version 2 only (GPL-2.0-only) with an explicit syscall exception (Linux-syscall-note), but it also contains several files under other compatible licenses.As with many other open-source software projects, developers are required to adhere to the Contributor Covenant, a code of conduct created by Coraline Ada Ehmke and intended to address harassment of minority contributors including women, LGBT, trans and genderqueer individuals.},
  copyright = {Creative Commons Attribution-ShareAlike License},
  langid = {english}
}

@article{wikipedia_unified_2023,
  title = {Unified {{Modeling Language}}},
  author = {{Wikipedia}},
  year = {2023},
  month = mar,
  journal = {Wikipedia},
  urldate = {2023-03-17},
  abstract = {The Unified Modeling Language (UML) is a general-purpose, developmental modeling language in the field of software engineering that is intended to provide a standard way to visualize the design of a system.The creation of UML was originally motivated by the desire to standardize the disparate notational systems and approaches to software design. It was developed at Rational Software in 1994\textendash 1995, with further development led by them through 1996.In 1997, UML was adopted as a standard by the Object Management Group (OMG), and has been managed by this organization ever since. In 2005, UML was also published by the International Organization for Standardization (ISO) as an approved ISO standard. Since then the standard has been periodically revised to cover the latest revision of UML. In software engineering, most practitioners do not use UML, but instead produce informal hand drawn diagrams; these diagrams, however, often include elements from UML.:{$\mkern1mu$}536},
  copyright = {Creative Commons Attribution-ShareAlike License},
  langid = {english},
  annotation = {Page Version ID: 1144930999},
  file = {/home/pierre/Zotero/storage/4XUFXMBH/Unified_Modeling_Language.html}
}

@book{wilhelm_ninja_2010,
  title = {Ninja {{Hacking}}: {{Unconventional Penetration Testing Tactics}} and {{Techniques}}},
  shorttitle = {Ninja {{Hacking}}},
  author = {Wilhelm, Thomas and Andress, Jason},
  year = {2010},
  month = nov,
  publisher = {{Elsevier}},
  abstract = {Ninja Hacking offers insight on how to conduct unorthodox attacks on computing networks, using disguise, espionage, stealth, and concealment. This book blends the ancient practices of Japanese ninjas, in particular the historical Ninjutsu techniques, with the present hacking methodologies. It looks at the methods used by malicious attackers in real-world situations and details unorthodox penetration testing techniques by getting inside the mind of a ninja. It also expands upon current penetration testing methodologies including new tactics for hardware and physical attacks. This book is organized into 17 chapters. The first two chapters incorporate the historical ninja into the modern hackers. The white-hat hackers are differentiated from the black-hat hackers. The function gaps between them are identified. The next chapters explore strategies and tactics using knowledge acquired from Sun Tzu's The Art of War applied to a ninja hacking project. The use of disguise, impersonation, and infiltration in hacking is then discussed. Other chapters cover stealth, entering methods, espionage using concealment devices, covert listening devices, intelligence gathering and interrogation, surveillance, and sabotage. The book concludes by presenting ways to hide the attack locations and activities. This book will be of great value not only to penetration testers and security professionals, but also to network and system administrators as well as hackers.Discusses techniques used by malicious attackers in real-world situationsDetails unorthodox penetration testing techniques by getting inside the mind of a ninjaExpands upon current penetration testing methodologies including new tactics for hardware and physical attacks},
  isbn = {978-1-59749-589-9},
  langid = {english},
  keywords = {Computers / Management Information Systems,Computers / Security / General}
}

@article{wilken_card_2010,
  title = {The Card Index as Creativity Machine},
  author = {Wilken, R.},
  year = {2010},
  month = jan,
  journal = {Culture Machine},
  urldate = {2022-12-19},
  abstract = {A particular photograph of Roland Barthes has always fascinated me. It is a well-known image, taken by Henri Cartier-Bresson in 1963, around the time of the publication of Barthes' Sur Racine (On Racine). The image is of a youthful Barthes in an office setting, reclining in a chair. He has mute but playful eyes and a sardonic halfsmile. His legs are crossed, right over left. He wears crisply creased slacks, and a white shirt under a woollen cardigan. His right arm is hooked over the back of his chair \textendash{} a rather awkward gesture but one that nevertheless conveys confidence, perhaps even arrogance. His left elbow rests on the left arm of his chair; the left hand is raised and cocked slightly, a cigarette stub between his first two fingers and his thumb. In the background is office shelving, housing various hanging files, and, above these, a series of smaller wooden boxes.}
}

@book{williams_pair_2003,
  title = {Pair {{Programming Illuminated}}},
  author = {Williams, Laurie and Kessler, Robert R.},
  year = {2003},
  publisher = {{Addison-Wesley Professional}},
  abstract = {At face value, pair programming appears to be a simple, straightforward concept. Two programmers work side-by-side at one computer, continuously collaborating on the same design, algorithm, code, and test. If it was as simple as plopping two skilled programmers at one desktop, there would be no need for this book. However, there are people and personalities involved, and these people are accustomed to programming alone. Pair programming offers significant benefits: quality is increased, time is saved, morale is improved, trust and teamwork grow, knowledge is shared, and learning is enhanced. However, before any pair programming can take place, participants have to accept a new way of thinking. In Pair Programming Illuminated, Laurie Williams and Robert Kessler help you fight through the exceptions, gain collective acceptance of this approach, and experience remarkable success with it. Two case studies show pair programming in practice using Extreme Programming and Collaborative Software Process as methods.},
  isbn = {978-0-201-74576-4},
  langid = {english},
  keywords = {Computers / Programming / General,Computers / Software Development \& Engineering / General}
}

@article{wilson_best_2014,
  title = {Best {{Practices}} for {{Scientific Computing}}},
  author = {Wilson, Greg and Aruliah, D. A. and Brown, C. Titus and Hong, Neil P. Chue and Davis, Matt and Guy, Richard T. and Haddock, Steven H. D. and Huff, Kathryn D. and Mitchell, Ian M. and Plumbley, Mark D. and Waugh, Ben and White, Ethan P. and Wilson, Paul},
  year = {2014},
  month = jan,
  journal = {PLOS Biology},
  volume = {12},
  number = {1},
  pages = {e1001745},
  issn = {1545-7885},
  doi = {10.1371/journal.pbio.1001745},
  urldate = {2022-04-02},
  abstract = {We describe a set of best practices for scientific software development, based on research and experience, that will improve scientists' productivity and the reliability of their software.},
  langid = {english},
  keywords = {Computer software,Computers,Control systems,Open source software,Programming languages,Reproducibility,Scientists,Software development},
  file = {/home/pierre/Zotero/storage/UTPDKHIJ/Wilson et al. - 2014 - Best Practices for Scientific Computing.pdf;/home/pierre/Zotero/storage/LJVWT78J/article.html}
}

@book{winograd_language_1982,
  title = {Language {{As}} a {{Cognitive Process}}: {{Syntax}}},
  shorttitle = {Language {{As}} a {{Cognitive Process}}},
  author = {Winograd, Terry},
  year = {1982},
  month = may,
  publisher = {{Addison-Wesley}},
  address = {{Reading, Mass}},
  abstract = {Hardback. No writing n book. No damage to book cover. Found in a storage box.},
  isbn = {978-0-201-08571-6},
  langid = {english}
}

@article{winograd_procedures_1971,
  title = {Procedures as a {{Representation}} for {{Data}} in a {{Computer Program}} for {{Understanding Natural Language}}},
  author = {Winograd, Terry},
  year = {1971},
  month = jan,
  urldate = {2021-09-12},
  abstract = {This paper describes a system for the  computer understanding of English. The  system answers questions, executes  commands, and accepts information in  normal English dialog. It uses semantic  information and context to understand  discourse and to disambiguate sentences. It  combines a complete syntactic analysis of  each sentence with a "heuristic understander"  which uses different kinds of information  about a sentence, other parts of the  discourse, and general information about the  world in deciding what the sentence means. It  is based on the belief that a computer cannot  deal reasonably with language unless it can  "understand" the subject it is discussing. The  program is given a detailed model of the  knowledge needed by a simple robot having  only a hand and an eye. We can give it  instructions to manipulate toy objects,  interrogate it about the scene, and give it  information it will use in deduction. In addition  to knowing the properties of toy objects, the  program has a simple model of its own  mentality. It can remember and discuss its  plans and actions as well as carry them out. It  enters into a dialog with a person, responding  to English sentences with actions and  English replies, and asking for clarification  when its heuristic programs cannot  understand a sentence through use of context  and physical knowledge.},
  langid = {american},
  annotation = {Accepted: 2004-10-20T20:29:48Z},
  file = {/home/pierre/Zotero/storage/VFGUT7JB/Winograd - 1971 - Procedures as a Representation for Data in a Compu.pdf;/home/pierre/Zotero/storage/KRXA8YRP/7095.html}
}

@book{wirth_algorithms_1976,
  title = {Algorithms + {{Data Structures}}},
  author = {Wirth, Niklaus},
  year = {1976},
  publisher = {{Prentice-Hall}},
  abstract = {Fundamental data structures; Sorting; Recursive algorithms; Dynamic information structures; Language structures and compilers.},
  isbn = {978-0-13-022418-7},
  langid = {english},
  keywords = {Computers / General}
}

@article{wirth_brief_2008,
  title = {A {{Brief History}} of {{Software Engineering}}},
  author = {Wirth, N.},
  year = {2008},
  journal = {IEEE Annals of the History of Computing},
  doi = {10.1109/MAHC.2008.33},
  abstract = {This personal perspective on the art of programming begins with a look at the state of programming from about 1960, and it follows programming's development through the present day. This personal perspective on the art of programming begins with a look at the state of programming from about 1960, and it follows programming's development through the present day. The article examines key contributions to the field of software engineering and identifies major obstacles, which persist even today.}
}

@inproceedings{wirth_essence_2003,
  title = {The {{Essence}} of {{Programming Languages}}},
  booktitle = {Modular {{Programming Languages}}},
  author = {Wirth, Niklaus},
  editor = {B{\"o}sz{\"o}rm{\'e}nyi, L{\'a}szl{\'o} and Schojer, Peter},
  year = {2003},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {1--11},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-540-45213-3_1},
  abstract = {Only a few years after the invention of the first programming languages, the subject flourished and a whole flurry of languages appeared. Soon programmers had to make their choices among available languages. How were they selected; were there any criteria of selection, of language quality? What is truly essential in a programming language? In spite of the convergence to a few, wide-spread, popular languages in recent years, these questions remain relevant, and the search for a ``better'' language continues among programmers.},
  isbn = {978-3-540-45213-3},
  langid = {english},
  keywords = {Language Design,Predicate Transformer,Program Language,Program Text,Programming Language}
}

@book{wittgenstein_recherches_2004,
  title = {{Recherches philosophiques}},
  author = {Wittgenstein, Ludwig},
  year = {2004},
  publisher = {{Gallimard}},
  address = {{Paris}},
  isbn = {978-2-07-075852-4},
  langid = {fre},
  keywords = {Langage et langues -- Philosophie.,Language and languages -- Philosophy.,Philosophy.,Semantics (Philosophy),S\'emantique (Philosophie)},
  annotation = {Open Library ID: OL16831978M}
}

@book{wittgenstein_tractatus_2010,
  title = {Tractatus {{Logico-Philosophicus}}},
  author = {Wittgenstein, Ludwig},
  translator = {Ogden, C. K. (Charles Kay)},
  year = {2010},
  month = oct,
  urldate = {2022-09-25},
  collaborator = {Russell, Bertrand},
  copyright = {Public domain in the USA.},
  langid = {english},
  lccn = {EBook-No. 5740},
  keywords = {Language and languages -- Philosophy,{Logic, Symbolic and mathematical}}
}

@article{woolston_why_2022,
  title = {Why Science Needs More Research Software Engineers},
  author = {Woolston, Chris},
  year = {2022},
  month = may,
  journal = {Nature},
  publisher = {{Nature Publishing Group}},
  doi = {10.1038/d41586-022-01516-2},
  urldate = {2022-08-17},
  abstract = {Ten years after their profession got its name, research software engineers seek to swell their ranks.},
  copyright = {2022 Springer Nature Limited},
  langid = {english},
  keywords = {Careers,Software,Technology},
  annotation = {Bandiera\_abtest: a Cg\_type: Career Q\&a Subject\_term: Technology, Software, Careers},
  file = {/home/pierre/Zotero/storage/7QHNGQI2/d41586-022-01516-2.html}
}

@article{wyatt_danger_2004,
  title = {Danger! {{Metaphors}} at {{Work}} in {{Economics}}, {{Geophysiology}}, and the {{Internet}}},
  author = {Wyatt, Sally},
  year = {2004},
  journal = {Science, Technology, \& Human Values},
  volume = {29},
  number = {2},
  eprint = {1557981},
  eprinttype = {jstor},
  pages = {242--261},
  publisher = {{Sage Publications, Inc.}},
  issn = {0162-2439},
  urldate = {2022-12-09},
  abstract = {The author analyzes the types of metaphors that are used to describe the Internet in issues of Wired magazine from before and after the dot-com collapse to understand the perceptions and expectations of some of the actors involved in the shaping of the Internet. In addition, the metaphors deployed in economics and geophysiology are used to demonstrate how metaphors can influence public debate, policy, and theory. The author argues that metaphors do not simply have a descriptive function but that they also carry normative connotations. Language, alongside social practices and material objects, is an important tool in attempts to construct the future. Six overlapping metaphorical themes are identified: revolution, evolution, salvation, progress, universalism, and the "American dream." A critical analysis of these metaphors, informed by a critique of the metaphors used in economics and geophysiology, leads the author to challenge the universalist claims made by some Internet enthusiasts for the inclusive potential of the Internet.}
}

@book{yanagi_unknown_1989,
  title = {The {{Unknown Craftsman}}: {{A Japanese Insight Into Beauty}}},
  shorttitle = {The {{Unknown Craftsman}}},
  author = {Yanagi, Soetsu and Yanagi, Muneyoshi and Leach, Bernard},
  year = {1989},
  publisher = {{Kodansha International}},
  abstract = {This book challenges the conventional ideas of art and beauty. What is the value of things made by an anonymous craftsman working in a set tradition for a lifetime? What is the value of handwork? Why should even the roughly lacquered rice bowl of a Japanese farmer be thought beautiful? The late Soetsu Yanagi was the first to fully explore the traditional Japanese appreciation for "objects born, not made."Mr. Yanagi sees folk art as a manifestation of the essential world from which art, philosophy, and religion arise and in which the barriers between them disappear. The implications of the author's ideas are both far-reaching and practical.Soetsu Yanagi is often mentioned in books on Japanese art, but this is the first translation in any Western language of a selection of his major writings. The late Bernard Leach, renowned British potter and friend of Mr. Yanagi for fifty years, has clearly transmitted the insights of one of Japan's most important thinkers. The seventy-six plates illustrate objects that underscore the universality of his concepts. The author's profound view of the creative process and his plea for a new artistic freedom within tradition are especially timely now when the importance of craft and the handmade object is being rediscovered.},
  googlebooks = {486Ye\_1hdRAC},
  isbn = {978-0-87011-948-4},
  langid = {english},
  keywords = {Art / Asian / General}
}

@incollection{yuill_code_2004,
  title = {Code {{Art Brutalism}}: Low-Level Systems and Simple Programs},
  shorttitle = {Code {{Art Brutalism}}},
  booktitle = {Read\_me: {{Software Arts}} and {{Culture}}},
  author = {Yuill, Simon},
  year = {2004},
  publisher = {{Digital Aesthetics Research Center}},
  address = {{Aarhus}},
  urldate = {2022-04-28},
  abstract = {Originally published in read\_me: Software Art and Cultures, 2004},
  file = {/home/pierre/Zotero/storage/73XKK2CK/Code_Art_Brutalism_low_level_systems_and_simple_programs.html}
}

@misc{zeller_algorithms_2020,
  title = {Algorithms Are like Recipes},
  author = {Zeller, Johannes},
  year = {2020},
  month = may,
  journal = {Goethe Institut},
  urldate = {2022-09-20},
  abstract = {But the ingredients have to be carefully selected to ensure that a dish tastes good: Algorithm expert Sebastian Schelter talks about artificial intelligence, how it takes decisions off our hands, and how this impacts our lives.},
  howpublished = {https://www.goethe.de/en/kul/ges/21877729.html},
  langid = {english},
  file = {/home/pierre/Zotero/storage/ZH8KRRPR/21877729.html}
}

@misc{zenil_compression_2021,
  title = {Compression Is {{Comprehension}}, and the {{Unreasonable Effectiveness}} of {{Digital Computation}} in the {{Natural World}}},
  author = {Zenil, Hector},
  year = {2021},
  month = jun,
  number = {arXiv:1904.10258},
  eprint = {1904.10258},
  primaryclass = {cs, math},
  publisher = {{arXiv}},
  doi = {10.48550/arXiv.1904.10258},
  urldate = {2023-03-03},
  abstract = {Chaitin's work, in its depth and breadth, encompasses many areas of scientific and philosophical interest. It helped establish the accepted mathematical concept of randomness, which in turn is the basis of tools that I have developed to justify and quantify what I think is clear evidence of the algorithmic nature of the world. To illustrate the concept I will establish novel upper bounds of algorithmic randomness for elementary cellular automata. I will discuss how the practice of science consists in conceiving a model that starts from certain initial values, running a computable instantiation, and awaiting a result in order to determine where the system may be in a future state--in a shorter time than the time taken by the actual unfolding of the phenomenon in question. If a model does not comply with all or some of these requirements it is traditionally considered useless or even unscientific, so the more precise and faster the better. A model is thus better if it can explain more with less, which is at the core of Chaitin's "compression is comprehension". I will pursue these questions related to the random versus possibly algorithmic nature of the world in two directions, drawing heavily on the work of Chaitin. I will also discuss how the algorithmic approach is related to the success of science at producing models of the world, allowing computer simulations to better understand it and make more accurate predictions and interventions.},
  archiveprefix = {arxiv},
  keywords = {Computer Science - Information Theory},
  file = {/home/pierre/Zotero/storage/J9VGUN6T/Zenil - 2021 - Compression is Comprehension, and the Unreasonable.pdf;/home/pierre/Zotero/storage/QKVIKNVK/1904.html}
}

@inproceedings{zhang_jingdezhen_2015,
  title = {Jingdezhen's {{Ceramic Civilization}}: The {{Past}} and {{Today}}},
  shorttitle = {Jingdezhen's {{Ceramic Civilization}}},
  booktitle = {2015 {{International Conference}} on {{Humanities}} and {{Social Science Research}}},
  author = {Zhang, Ganlin and Cheng, Zhou and Wang, Qingli},
  year = {2015},
  month = sep,
  pages = {9--14},
  publisher = {{Atlantis Press}},
  issn = {2352-5398},
  doi = {10.2991/ichssr-15.2015.3},
  urldate = {2021-01-28},
  abstract = {As the main host city, Jingdezhen, celebrated China's ninth ``Cultural Heritage Day'' on June 14, 2014. After several thousand years' inheritance and development, Jingdezhen now has unique and unmatched ceramic culture nationwide and even worldwide. It has many precious cultural heritage and immovable cultural relics, totally 770 pieces. Today Jingdezhen...},
  isbn = {978-94-6252-115-5},
  langid = {english},
  file = {/home/pierre/Zotero/storage/KH35G6NH/Zhang et al. - 2015 - Jingdezhenâ€™s Ceramic Civilization the Past and To.pdf;/home/pierre/Zotero/storage/DTQQX3WH/25840496.html}
}
